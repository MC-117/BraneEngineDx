[Log][0:0:0:199]Engine/Shaders/Default/Default_Default.shadapter load
[Log][0:0:0:246]Engine/Shaders/Default/Default_Position.shadapter load
[Log][0:0:0:248]Engine/Shaders/Default/Empty_Fragment.shadapter load
[Log][0:0:0:256]Engine/Shaders/Default/PureColor_Fragment.shadapter load
[Log][0:0:0:357]Engine/Shaders/Default/Toon_Fragment.shadapter load
[Log][0:0:0:414]Engine/Banner folder
[Log][0:0:0:464]Engine/Banner/Banner.png load
[Log][0:0:0:498]Engine/Banner/Banne_old.png load
[Log][0:0:0:498]Engine/Fonts folder
[Log][0:0:0:499]Engine/Icons folder
[Log][0:0:0:504]Engine/Icons/Animation_Icon.png load
[Log][0:0:0:531]Engine/Icons/AssetFile_Icon.png load
[Log][0:0:0:550]Engine/Icons/Audio_Icon.png load
[Log][0:0:0:559]Engine/Icons/Folder_Icon.png load
[Log][0:0:0:569]Engine/Icons/Material_Icon.png load
[Log][0:0:0:589]Engine/Icons/Model_Icon.png load
[Log][0:0:0:603]Engine/Icons/Python_Icon.png load
[Log][0:0:0:620]Engine/Icons/SkeletonMesh_Icon.png load
[Log][0:0:0:620]Engine/LUTS folder
[Log][0:0:0:689]Engine/LUTS/arapaho_lut.png load
[Log][0:0:0:760]Engine/LUTS/aspen_lut.png load
[Log][0:0:0:831]Engine/LUTS/BlacKkKlansman_lut.png load
[Log][0:0:0:901]Engine/LUTS/bluegreen_lut.png load
[Log][0:0:0:971]Engine/LUTS/C-8120-STD_lut.png load
[Log][0:0:1:42]Engine/LUTS/C-9730-STD_lut.png load
[Log][0:0:1:112]Engine/LUTS/darkest_hour_lut.png load
[Log][0:0:1:182]Engine/LUTS/F-6800-STD_lut.png load
[Log][0:0:1:255]Engine/LUTS/F-8700-STD_lut.png load
[Log][0:0:1:327]Engine/LUTS/F-8700-V2-STD_lut.png load
[Log][0:0:1:398]Engine/LUTS/greygreen_lut.png load
[Log][0:0:1:468]Engine/LUTS/H-9110-STD_lut.png load
[Log][0:0:1:537]Engine/LUTS/humble_lut.png load
[Log][0:0:1:605]Engine/LUTS/kodak-5205-fuji_lut.png load
[Log][0:0:1:679]Engine/LUTS/oldman_lut.png load
[Log][0:0:1:749]Engine/LUTS/sedona_lut.png load
[Log][0:0:1:818]Engine/LUTS/W-8370-STD_lut.png load
[Log][0:0:1:886]Engine/LUTS/W-ARAPAHO-33-STD_lut.png load
[Log][0:0:1:951]Engine/LUTS/X-6500-STD_lut.png load
[Log][0:0:2:20]Engine/LUTS/X-9400-STD_lut.png load
[Log][0:0:2:21]Engine/Shaders folder
[Log][0:0:2:22]Engine/Shaders/ClearColor.mat load
[Log][0:0:2:22]Engine/Shaders/Default folder
[Warn][0:0:2:22]Engine/Shaders/Default/Default_Default.shadapter unknown file type
[Error][0:0:2:23]Engine/Shaders/Default/Default_Default.shadapter Default_Default load failed
[Warn][0:0:2:23]Engine/Shaders/Default/Default_Position.shadapter unknown file type
[Error][0:0:2:23]Engine/Shaders/Default/Default_Position.shadapter Default_Position load failed
[Warn][0:0:2:23]Engine/Shaders/Default/Empty_Fragment.shadapter unknown file type
[Error][0:0:2:24]Engine/Shaders/Default/Empty_Fragment.shadapter Empty_Fragment load failed
[Warn][0:0:2:24]Engine/Shaders/Default/PureColor_Fragment.shadapter unknown file type
[Error][0:0:2:24]Engine/Shaders/Default/PureColor_Fragment.shadapter PureColor_Fragment load failed
[Warn][0:0:2:24]Engine/Shaders/Default/Toon_Fragment.shadapter unknown file type
[Error][0:0:2:24]Engine/Shaders/Default/Toon_Fragment.shadapter Toon_Fragment load failed
[Log][0:0:2:25]Engine/Shaders/Depth.mat load
[Log][0:0:2:25]Engine/Shaders/lib folder
[Warn][0:0:2:26]Engine/Shaders/lib/Basic_FS_Lib.hmat unknown file type
[Error][0:0:2:26]Engine/Shaders/lib/Basic_FS_Lib.hmat Basic_FS_Lib load failed
[Warn][0:0:2:26]Engine/Shaders/lib/Basic_VS_Lib.hmat unknown file type
[Error][0:0:2:26]Engine/Shaders/lib/Basic_VS_Lib.hmat Basic_VS_Lib load failed
[Warn][0:0:2:27]Engine/Shaders/lib/Bindings_Def.hmat unknown file type
[Error][0:0:2:27]Engine/Shaders/lib/Bindings_Def.hmat Bindings_Def load failed
[Warn][0:0:2:27]Engine/Shaders/lib/CameraData_Def.hmat unknown file type
[Error][0:0:2:27]Engine/Shaders/lib/CameraData_Def.hmat CameraData_Def load failed
[Warn][0:0:2:27]Engine/Shaders/lib/Const_Def.hmat unknown file type
[Error][0:0:2:28]Engine/Shaders/lib/Const_Def.hmat Const_Def load failed
[Warn][0:0:2:28]Engine/Shaders/lib/Light_Def.hmat unknown file type
[Error][0:0:2:28]Engine/Shaders/lib/Light_Def.hmat Light_Def load failed
[Warn][0:0:2:28]Engine/Shaders/lib/MeshData_Def.hmat unknown file type
[Error][0:0:2:29]Engine/Shaders/lib/MeshData_Def.hmat MeshData_Def load failed
[Warn][0:0:2:29]Engine/Shaders/lib/MorphData_Def.hmat unknown file type
[Error][0:0:2:29]Engine/Shaders/lib/MorphData_Def.hmat MorphData_Def load failed
[Warn][0:0:2:29]Engine/Shaders/lib/ParticleData_Def.hmat unknown file type
[Error][0:0:2:30]Engine/Shaders/lib/ParticleData_Def.hmat ParticleData_Def load failed
[Warn][0:0:2:30]Engine/Shaders/lib/PBR_Lib.hmat unknown file type
[Error][0:0:2:30]Engine/Shaders/lib/PBR_Lib.hmat PBR_Lib load failed
[Warn][0:0:2:30]Engine/Shaders/lib/SkeletonMeshData_Def.hmat unknown file type
[Error][0:0:2:30]Engine/Shaders/lib/SkeletonMeshData_Def.hmat SkeletonMeshData_Def load failed
[Warn][0:0:2:31]Engine/Shaders/lib/Toon_Lib.hmat unknown file type
[Error][0:0:2:31]Engine/Shaders/lib/Toon_Lib.hmat Toon_Lib load failed
[Warn][0:0:2:31]Engine/Shaders/lib/TransformData_Def.hmat unknown file type
[Error][0:0:2:31]Engine/Shaders/lib/TransformData_Def.hmat TransformData_Def load failed
[Log][0:0:2:34]Engine/Shaders/Toon.mat load
[Log][0:0:2:34]Engine/Shapes folder
[Log][0:0:2:46]Engine/Shapes/column.fbx load
[Log][0:0:2:74]Engine/Shapes/Cone.fbx load
[Log][0:0:2:88]Engine/Shapes/hemisphere.fbx load
[Log][0:0:2:97]Engine/Shapes/UnitBox.obj load
[Log][0:0:2:118]Engine/Shapes/UnitSphere.fbx load
[Log][0:0:2:119]Engine/SkySphere folder
[Log][0:0:2:148]Engine/SkySphere/Clouds.tga load
[Log][0:0:2:157]Vertex Shader
  1 #version 460
  2 #define VERTEX_MAX_BONE 4
  3 #define MAT_INS_BIND_INDEX b0
  4 #define TRANS_BIND_INDEX t0
  5 #define TRANS_INDEX_BIND_INDEX t1
  6 #define MORPHDATA_BIND_INDEX t2
  7 #define MORPHWEIGHT_BIND_INDEX t3
  8 #define PARTICLE_BIND_INDEX t4
  9 #define CAM_BIND_INDEX t5
 10 #define DIRECT_LIGHT_BIND_INDEX t6
 11 #define POINT_LIGHT_BIND_INDEX t7
 12 #define __T0 t8
 13 #define __T1 t9
 14 #define __T2 t10
 15 #define __T3 t11
 16 #define __T4 t12
 17 #define __T5 t13
 18 #define __T6 t14
 19 #define __T7 t15
 20 #define __T8 t16
 21 #define __T9 t17
 22 #define __T10 t18
 23 #define __T11 t19
 24 #define __T12 t20
 25 #define __T13 t21
 26 #define __T14 t22
 27 #define __T15 t23
 28 #define __S0 s8
 29 #define __S1 s9
 30 #define __S2 s10
 31 #define __S3 s11
 32 #define __S4 s12
 33 #define __S5 s13
 34 #define __S6 s14
 35 #define __S7 s15
 36 #define __S8 s16
 37 #define __S9 s17
 38 #define __S10 s18
 39 #define __S11 s19
 40 #define __S12 s20
 41 #define __S13 s21
 42 #define __S14 s22
 43 #define __S15 s23
 44 #define TEX_BINDING(i) register(__T##i)
 45 #define SAMPLE_BINDING(i) register(__S##i)
 46 #define DEF_TEX2D(tex, id) \
 47 Texture2D tex : TEX_BINDING(id);\
 48 SamplerState tex##Sampler : SAMPLE_BINDING(id);
 49 // Only work for pattern [tex] and [tex]Sampler.
 50 #define SAMPLE_TEX(tex, uv) (tex.Sample(tex##Sampler, (uv)))
 51 #define DEF_MAT_BEGIN cbuffer MatInsBuf : register(MAT_INS_BIND_INDEX) {
 52 #define DEF_MAT_END };
 53 StructuredBuffer<float4x4> Transforms : register(TRANS_BIND_INDEX);
 54 Buffer<uint> ObjectIDs : register(TRANS_INDEX_BIND_INDEX);
 55 float4x4 getFinalMat(in uint instanceID, in float4 weights, in uint4 boneId)
 56 {
 57     float tw = weights[0] + weights[1] + weights[2] + weights[3];
 58     uint bid = ObjectIDs[instanceID];
 59     float4x4 fm = Transforms[bid + boneId[0]] * weights[0] / tw;
 60     if (weights[1] != 0)
 61         fm += Transforms[bid + boneId[1]] * weights[1] / tw;
 62     if (weights[2] != 0)
 63         fm += Transforms[bid + boneId[2]] * weights[2] / tw;
 64     if (weights[3] != 0)
 65         fm += Transforms[bid + boneId[3]] * weights[3] / tw;
 66     return fm;
 67 }
 68 struct CameraData
 69 {
 70     float4x4 pmat;
 71     float4x4 promat;
 72     float4x4 vmat;
 73     float3 camPos;
 74     float zNear;
 75     float3 camDir;
 76     float zFar;
 77     float3 camUp;
 78     float fovy;
 79     float3 camLeft;
 80     float user1;
 81     float2 viewSize;
 82     float2 user2;
 83 };
 84 tbuffer CameraDataBuf : register(CAM_BIND_INDEX)
 85 {
 86     CameraData camData;
 87 };
 88 struct DefaultVertexOut
 89 {
 90     float4 svPos : SV_POSITION;
 91     float4 lightSpacePos : LIGHTSAPCEPOS;
 92     float3 Normal : NORMAL;
 93     float3 WorldPos : WOLRDPOS;
 94     float2 TexCoords : TEXCOORD;
 95 };
 96 #define MESH_MAIN main(float3 pos : POSITION, float2 uv : TEXCOORD, float3 norm : NORMAL, uint vertexID : SV_VERTEXID, uint instanceID : SV_InstanceID)
 97 out vec3 LocalPos;
 98 out vec3 WorldPos;
 99 out vec2 TexCoords;
100 void main() {
101     mat4 fm = Transforms[ObjectIDs[gl_InstanceID + gl_BaseInstance]];
102     gl_Position = camData.pmat * fm * vec4(pos.x, pos.y, pos.z, 1.0);
103     LocalPos = pos;
104     vec4 w = fm * vec4(pos.x, pos.y, pos.z, 1.0);
105     WorldPos = w.xyz / w.w;
106     TexCoords = uv;
107     TexCoords.y = 1 - TexCoords.y;
108 }
109 
[Error][0:0:2:158]Sky.mat (Vertex Shader) compile failed:
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Sky.mat(1,2-8): error X1504: invalid preprocessor command 'version'
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Sky.mat(97,1-3): error X3000: syntax error: unexpected token 'out'

[Log][0:0:2:163]Fragment Shader
  1 #version 460
  2 layout(early_fragment_tests) in;
  3 #define VERTEX_MAX_BONE 4
  4 #define MAT_INS_BIND_INDEX b0
  5 #define TRANS_BIND_INDEX t0
  6 #define TRANS_INDEX_BIND_INDEX t1
  7 #define MORPHDATA_BIND_INDEX t2
  8 #define MORPHWEIGHT_BIND_INDEX t3
  9 #define PARTICLE_BIND_INDEX t4
 10 #define CAM_BIND_INDEX t5
 11 #define DIRECT_LIGHT_BIND_INDEX t6
 12 #define POINT_LIGHT_BIND_INDEX t7
 13 #define __T0 t8
 14 #define __T1 t9
 15 #define __T2 t10
 16 #define __T3 t11
 17 #define __T4 t12
 18 #define __T5 t13
 19 #define __T6 t14
 20 #define __T7 t15
 21 #define __T8 t16
 22 #define __T9 t17
 23 #define __T10 t18
 24 #define __T11 t19
 25 #define __T12 t20
 26 #define __T13 t21
 27 #define __T14 t22
 28 #define __T15 t23
 29 #define __S0 s8
 30 #define __S1 s9
 31 #define __S2 s10
 32 #define __S3 s11
 33 #define __S4 s12
 34 #define __S5 s13
 35 #define __S6 s14
 36 #define __S7 s15
 37 #define __S8 s16
 38 #define __S9 s17
 39 #define __S10 s18
 40 #define __S11 s19
 41 #define __S12 s20
 42 #define __S13 s21
 43 #define __S14 s22
 44 #define __S15 s23
 45 #define TEX_BINDING(i) register(__T##i)
 46 #define SAMPLE_BINDING(i) register(__S##i)
 47 #define DEF_TEX2D(tex, id) \
 48 Texture2D tex : TEX_BINDING(id);\
 49 SamplerState tex##Sampler : SAMPLE_BINDING(id);
 50 // Only work for pattern [tex] and [tex]Sampler.
 51 #define SAMPLE_TEX(tex, uv) (tex.Sample(tex##Sampler, (uv)))
 52 #define DEF_MAT_BEGIN cbuffer MatInsBuf : register(MAT_INS_BIND_INDEX) {
 53 #define DEF_MAT_END };
 54 struct CameraData
 55 {
 56     float4x4 pmat;
 57     float4x4 promat;
 58     float4x4 vmat;
 59     float3 camPos;
 60     float zNear;
 61     float3 camDir;
 62     float zFar;
 63     float3 camUp;
 64     float fovy;
 65     float3 camLeft;
 66     float user1;
 67     float2 viewSize;
 68     float2 user2;
 69 };
 70 tbuffer CameraDataBuf : register(CAM_BIND_INDEX)
 71 {
 72     CameraData camData;
 73 };
 74 uniform vec4 sunColor;
 75 uniform vec4 cloudColor;
 76 uniform vec4 zenithColor;
 77 uniform vec4 horizonColor;
 78 uniform vec4 overallColor;
 79 uniform vec4 lightDirection;
 80 uniform float cloudOpacity;
 81 uniform float starBrightness;
 82 uniform float sunBrightness;
 83 uniform float sunHeight;
 84 uniform float sunRadius;
 85 uniform float radius;
 86 uniform float time;
 87 uniform float cloudSpeed;
 88 uniform float lowNoisePower;
 89 uniform float highNoisePower;
 90 uniform float horizonFalloff;
 91 uniform sampler2D cloudNoiseMap;
 92 uniform sampler2D skyMap;
 93 uniform sampler2D starMap;
 94 in vec3 LocalPos;
 95 in vec3 WorldPos;
 96 in vec2 TexCoords;
 97 out vec4 oCol;
 98 float sphereMask(float pos, float center, float radius, float hardness) {
 99     return clamp((1 - abs(pos - center) / radius) / (1 - hardness), 0, 1);
100 }
101 void main() {
102     vec3 cameraVector = normalize(WorldPos - camData.camPos);
103     float cutoff = clamp(dot(cameraVector, vec3(0, 0, 1)), 0, 1);
104     float cloudAlpha = cloudOpacity * (1 - clamp((LocalPos / radius * -10).b, 0, 1));
105     float offset = time * cloudSpeed;
106     float cloud = texture(cloudNoiseMap, vec2(offset + TexCoords.x, TexCoords.y)).r;
107     float sky = texture(skyMap, vec2(offset + TexCoords.x, TexCoords.y)).r;
108     cloudAlpha = mix(0, mix(sky, cloud, cutoff), cloudAlpha);
109     float power = texture(cloudNoiseMap, TexCoords).r;
110     power = mix(lowNoisePower, highNoisePower, power);
111     power = pow(cloudAlpha, power);
112     vec4 rimLight = cloudColor * power;
113     power *= power;
114     float sunVal = dot(normalize(lightDirection.xyz), cameraVector);
115     rimLight += clamp(pow(sphereMask(sunVal, 1, 1.3, 0), 10), 0, 1) * sunColor * power * 0.4;
116     vec4 sunCol = sphereMask(sunVal, 1, sunRadius, 0) * sunBrightness * sunColor;
117     cutoff = clamp(pow(1 - cutoff, horizonFalloff), 0, 1);
118     vec4 SkyCol = zenithColor + texture(starMap, TexCoords) * starBrightness * sunHeight;
119     SkyCol = mix(SkyCol, horizonColor, cutoff);
120     oCol = sunCol + SkyCol;
121     oCol = mix(oCol, rimLight, clamp(power, 0, 1)) * overallColor * 1.5;
122     // float gamma = 1.8;
123     // vec3 mapped = vec3(1.0) - exp(-oCol.xyz);
124     // mapped = pow(mapped, vec3(1.0 / gamma));
125     // oCol = vec4(mapped, 1.0);
126 }
127 
[Error][0:0:2:164]Sky.mat (Fragment Shader) compile failed:
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Sky.mat(1,2-8): error X1504: invalid preprocessor command 'version'
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Sky.mat(2,1-6): error X3000: unrecognized identifier 'layout'

[Log][0:0:2:164]Engine/SkySphere/Sky.mat load
[Log][0:0:2:214]Engine/SkySphere/Sky.tga load
[Log][0:0:2:223]Vertex Shader
  1 #version 460
  2 #define VERTEX_MAX_BONE 4
  3 #define MAT_INS_BIND_INDEX b0
  4 #define TRANS_BIND_INDEX t0
  5 #define TRANS_INDEX_BIND_INDEX t1
  6 #define MORPHDATA_BIND_INDEX t2
  7 #define MORPHWEIGHT_BIND_INDEX t3
  8 #define PARTICLE_BIND_INDEX t4
  9 #define CAM_BIND_INDEX t5
 10 #define DIRECT_LIGHT_BIND_INDEX t6
 11 #define POINT_LIGHT_BIND_INDEX t7
 12 #define __T0 t8
 13 #define __T1 t9
 14 #define __T2 t10
 15 #define __T3 t11
 16 #define __T4 t12
 17 #define __T5 t13
 18 #define __T6 t14
 19 #define __T7 t15
 20 #define __T8 t16
 21 #define __T9 t17
 22 #define __T10 t18
 23 #define __T11 t19
 24 #define __T12 t20
 25 #define __T13 t21
 26 #define __T14 t22
 27 #define __T15 t23
 28 #define __S0 s8
 29 #define __S1 s9
 30 #define __S2 s10
 31 #define __S3 s11
 32 #define __S4 s12
 33 #define __S5 s13
 34 #define __S6 s14
 35 #define __S7 s15
 36 #define __S8 s16
 37 #define __S9 s17
 38 #define __S10 s18
 39 #define __S11 s19
 40 #define __S12 s20
 41 #define __S13 s21
 42 #define __S14 s22
 43 #define __S15 s23
 44 #define TEX_BINDING(i) register(__T##i)
 45 #define SAMPLE_BINDING(i) register(__S##i)
 46 #define DEF_TEX2D(tex, id) \
 47 Texture2D tex : TEX_BINDING(id);\
 48 SamplerState tex##Sampler : SAMPLE_BINDING(id);
 49 // Only work for pattern [tex] and [tex]Sampler.
 50 #define SAMPLE_TEX(tex, uv) (tex.Sample(tex##Sampler, (uv)))
 51 #define DEF_MAT_BEGIN cbuffer MatInsBuf : register(MAT_INS_BIND_INDEX) {
 52 #define DEF_MAT_END };
 53 StructuredBuffer<float4x4> Transforms : register(TRANS_BIND_INDEX);
 54 Buffer<uint> ObjectIDs : register(TRANS_INDEX_BIND_INDEX);
 55 float4x4 getFinalMat(in uint instanceID, in float4 weights, in uint4 boneId)
 56 {
 57     float tw = weights[0] + weights[1] + weights[2] + weights[3];
 58     uint bid = ObjectIDs[instanceID];
 59     float4x4 fm = Transforms[bid + boneId[0]] * weights[0] / tw;
 60     if (weights[1] != 0)
 61         fm += Transforms[bid + boneId[1]] * weights[1] / tw;
 62     if (weights[2] != 0)
 63         fm += Transforms[bid + boneId[2]] * weights[2] / tw;
 64     if (weights[3] != 0)
 65         fm += Transforms[bid + boneId[3]] * weights[3] / tw;
 66     return fm;
 67 }
 68 struct CameraData
 69 {
 70     float4x4 pmat;
 71     float4x4 promat;
 72     float4x4 vmat;
 73     float3 camPos;
 74     float zNear;
 75     float3 camDir;
 76     float zFar;
 77     float3 camUp;
 78     float fovy;
 79     float3 camLeft;
 80     float user1;
 81     float2 viewSize;
 82     float2 user2;
 83 };
 84 tbuffer CameraDataBuf : register(CAM_BIND_INDEX)
 85 {
 86     CameraData camData;
 87 };
 88 struct DefaultVertexOut
 89 {
 90     float4 svPos : SV_POSITION;
 91     float4 lightSpacePos : LIGHTSAPCEPOS;
 92     float3 Normal : NORMAL;
 93     float3 WorldPos : WOLRDPOS;
 94     float2 TexCoords : TEXCOORD;
 95 };
 96 #define MESH_MAIN main(float3 pos : POSITION, float2 uv : TEXCOORD, float3 norm : NORMAL, uint vertexID : SV_VERTEXID, uint instanceID : SV_InstanceID)
 97 out vec3 LocalPos;
 98 out vec3 WorldPos;
 99 out vec2 TexCoords;
100 void main() {
101     gl_Position = camData.pmat * Transforms[gl_InstanceID + gl_BaseInstance] * vec4(pos.x, pos.y, pos.z, 1.0);
102     LocalPos = pos;
103     vec4 w = Transforms[gl_InstanceID + gl_BaseInstance] * vec4(pos.x, pos.y, pos.z, 1.0);
104     WorldPos = w.xyz / w.w;
105     TexCoords = uv;
106     TexCoords.y = 1 - TexCoords.y;
107 }
108 
[Error][0:0:2:223]Space.mat (Vertex Shader) compile failed:
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Space.mat(1,2-8): error X1504: invalid preprocessor command 'version'
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Space.mat(97,1-3): error X3000: syntax error: unexpected token 'out'

[Log][0:0:2:229]Fragment Shader
 1 #version 460
 2 layout(early_fragment_tests) in;
 3 #define VERTEX_MAX_BONE 4
 4 #define MAT_INS_BIND_INDEX b0
 5 #define TRANS_BIND_INDEX t0
 6 #define TRANS_INDEX_BIND_INDEX t1
 7 #define MORPHDATA_BIND_INDEX t2
 8 #define MORPHWEIGHT_BIND_INDEX t3
 9 #define PARTICLE_BIND_INDEX t4
10 #define CAM_BIND_INDEX t5
11 #define DIRECT_LIGHT_BIND_INDEX t6
12 #define POINT_LIGHT_BIND_INDEX t7
13 #define __T0 t8
14 #define __T1 t9
15 #define __T2 t10
16 #define __T3 t11
17 #define __T4 t12
18 #define __T5 t13
19 #define __T6 t14
20 #define __T7 t15
21 #define __T8 t16
22 #define __T9 t17
23 #define __T10 t18
24 #define __T11 t19
25 #define __T12 t20
26 #define __T13 t21
27 #define __T14 t22
28 #define __T15 t23
29 #define __S0 s8
30 #define __S1 s9
31 #define __S2 s10
32 #define __S3 s11
33 #define __S4 s12
34 #define __S5 s13
35 #define __S6 s14
36 #define __S7 s15
37 #define __S8 s16
38 #define __S9 s17
39 #define __S10 s18
40 #define __S11 s19
41 #define __S12 s20
42 #define __S13 s21
43 #define __S14 s22
44 #define __S15 s23
45 #define TEX_BINDING(i) register(__T##i)
46 #define SAMPLE_BINDING(i) register(__S##i)
47 #define DEF_TEX2D(tex, id) \
48 Texture2D tex : TEX_BINDING(id);\
49 SamplerState tex##Sampler : SAMPLE_BINDING(id);
50 // Only work for pattern [tex] and [tex]Sampler.
51 #define SAMPLE_TEX(tex, uv) (tex.Sample(tex##Sampler, (uv)))
52 #define DEF_MAT_BEGIN cbuffer MatInsBuf : register(MAT_INS_BIND_INDEX) {
53 #define DEF_MAT_END };
54 struct CameraData
55 {
56     float4x4 pmat;
57     float4x4 promat;
58     float4x4 vmat;
59     float3 camPos;
60     float zNear;
61     float3 camDir;
62     float zFar;
63     float3 camUp;
64     float fovy;
65     float3 camLeft;
66     float user1;
67     float2 viewSize;
68     float2 user2;
69 };
70 tbuffer CameraDataBuf : register(CAM_BIND_INDEX)
71 {
72     CameraData camData;
73 };
74 uniform vec4 sunColor;
75 uniform vec4 overallColor;
76 uniform vec4 lightDirection;
77 uniform float sunBrightness;
78 uniform float sunHeight;
79 uniform float sunRadius;
80 uniform float radius;
81 uniform sampler2D skyMap;
82 in vec3 LocalPos;
83 in vec3 WorldPos;
84 in vec2 TexCoords;
85 out vec4 oCol;
86 float sphereMask(float pos, float center, float radius, float hardness) {
87     return clamp((1 - abs(pos - center) / radius) / (1 - hardness), 0, 1);
88 }
89 void main() {
90     vec3 cameraVector = normalize(WorldPos - camData.camPos);
91     float sunVal = dot(normalize(lightDirection.xyz), cameraVector);
92     vec4 sunCol = sphereMask(sunVal, 1, sunRadius, 0) * sunBrightness * sunColor;
93     vec4 SkyCol = texture(skyMap, TexCoords);
94     oCol = sunCol + SkyCol;
95     oCol = oCol * overallColor * 1.5;
96 }
97 
[Error][0:0:2:229]Space.mat (Fragment Shader) compile failed:
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Space.mat(1,2-8): error X1504: invalid preprocessor command 'version'
C:\Users\MC117\Documents\Visual Studio 2019\Projects\BraneEngineDx\BraneEngineDx\Space.mat(2,1-6): error X3000: unrecognized identifier 'layout'

[Log][0:0:2:230]Engine/SkySphere/Space.mat load
[Log][0:0:2:489]Engine/SkySphere/Sphere.obj load
[Log][0:0:2:568]Engine/SkySphere/Sphere1.obj load
[Log][0:0:2:573]Engine/SkySphere/Stars.tga load
[Log][0:0:2:573]Engine/Textures folder
[Error][0:0:2:574]Engine/Textures/Black.png Black load failed
[Error][0:0:2:574]Engine/Textures/default_lut.png default_lut load failed
[Log][0:0:2:576]Engine/Textures/Default_N.png load
[Log][0:0:2:604]Engine/Textures/env.jpg load
[Log][0:0:2:607]Engine/Textures/env_ir.tga load
[Log][0:0:2:616]Engine/Textures/env_prefilter.mip load
[Log][0:0:2:669]Engine/Textures/GridInfo.png load
[Error][0:0:2:669]Engine/Textures/ibl_brdf_lut.png ibl_brdf_lut load failed
[Log][0:0:2:747]Engine/Textures/ibl_hdr_radiance.png load
[Log][0:0:2:749]Engine/Textures/Smoke.tga load
[Log][0:0:2:800]Engine/Textures/SmokeNoise.png load
[Log][0:0:2:878]Engine/Textures/SpaceBox.tga load
[Log][0:0:2:881]Engine/Textures/SpaceBox_irr.tga load
[Log][0:0:2:907]Engine/Textures/SpaceBox_prefilter.mip load
[Log][0:0:3:187]Engine/Textures/ssaoRand.png load
[Log][0:0:3:264]Engine/Textures/ssaoRand1.jpg load
[Log][0:0:3:299]Engine/Textures/StarTexP.tga load
[Error][0:0:3:299]Engine/Textures/White.png White load failed
