#order 1000
#material
#vertex use default
#fragment
#condition deferred
#condition lighting
#include "../lib/Light_Def.hmat"
#include "../lib/CameraData_Def.hmat"

#include "../lib/GBuffer_Def.hmat"

Buffer<float4> colors : TEX_BINDING(0);

float4 getColor(float2 uv)
{
    int2 coord = trunc(uv * 1024);
    return colors[coord.y * 1024 + coord.x];
}

#if defined(DEFERRED_SHADER_FEATURE)
#elif defined(LIGHTING_SHADER_FEATURE)
DEF_GBUFFER
#else
#endif

#ifdef DEFERRED_SHADER_FEATURE
FS_DEF_OUT_GBUFFER
#else
FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
//FS_DEF_OUT_COLOR(ssnMask, 0);
FS_DEF_OUT_END
#endif

#include "../lib/Surface_Def.hmat"

FragmentOut SURFACE_MAIN
{
    FragmentOut fout;
    Surface surf = getSurface(fin);

    #ifndef LIGHTING_SHADER_FEATURE
    surf.albedo = getColor(fin.TexCoords);
    surf.roughness = 0.9f;
    surf.metallic = 0.001f;
    #endif

    #ifdef DEFERRED_SHADER_FEATURE
    outputSurface(surf, fout.gBufferA, fout.gBufferB, fout.gBufferC, fout.gBufferD, fout.gBufferE);
    #else
    fout.FragColor = surf.albedo;
    #endif
    return fout;
}