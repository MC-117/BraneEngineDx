#order 1000
#material
Count probeIndex: 0
#vertex use default
#fragment
#condition deferred
#condition lighting
#include "../lib/Light_Def.hmat"
#include "../lib/CameraData_Def.hmat"

#include "../lib/GBuffer_Def.hmat"

#include "../lib/ReflectionProbe_Def.hmat"

DEF_MAT_BEGIN
uniform int probeIndex;
DEF_MAT_END

#if defined(DEFERRED_SHADER_FEATURE)
#elif defined(LIGHTING_SHADER_FEATURE)
DEF_GBUFFER
#else
#endif

#include "../lib/Surface_Def.hmat"

FS_DEF_OUT_BEGIN
FS_DEF_OUT_SURFACE
FS_DEF_OUT_END

FragmentOut SURFACE_MAIN
{
    FragmentOut fout;
    Surface surf = getSurface(fin);

    #ifndef LIGHTING_SHADER_FEATURE
    surf.albedo = float4(0, 0, 0, 1);
    surf.roughness = 0.9f;
    surf.metallic = 0.001f;
    #endif

    #ifdef DEFERRED_SHADER_FEATURE
    outputSurface(surf, fout.gBufferA, fout.gBufferB, fout.gBufferC, fout.gBufferD, fout.gBufferE);
    #else
    ReflectionProbeData probeData = reflectionProbes[probeIndex];
    float3 L = reflect(normalize(surf.WorldPos - camData.camPos), surf.Normal);
    float4 color = SAMPLE_TEX(reflectionCubeMap, float4(L, probeData.cubeMapIndex));
    color.a = 1;
    fout.FragColor = color;
    #endif
    return fout;
}
