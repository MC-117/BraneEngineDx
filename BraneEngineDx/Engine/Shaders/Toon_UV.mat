#order 1000
#material
Color baseColor: 255, 255, 255, 255
Texture colorMap: white
Color shadowColor: 150, 150, 150, 255
Color highlightColor: 255, 255, 255, 255
Color rimColor: 255, 255, 255, 255
Color overColor: 255, 255, 255, 255
Color uvScale: 1.0, 1.0, 0.0, 0.0
Scalar shadowCut: 0.5
Scalar shadowCutSmooth: 0.0
Scalar highlightCut: 0.999
Scalar highlightCutSmooth: 0.0
Scalar rimCut: 0.8
Scalar rimCutSmooth: 0.0
Scalar normalScale: 1.0
Texture normalMap: black
Texture depthMap: white
#vertex use default
#fragment
#include "lib/Light_Def.hmat"
#include "lib/CameraData_Def.hmat"
#include "lib/Toon_Lib.hmat"

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
//FS_DEF_OUT_COLOR(ssnMask, 0);
FS_DEF_OUT_END

DEF_MAT_BEGIN
uniform float4 baseColor;
uniform float4 shadowColor;
uniform float4 highlightColor;
uniform float4 rimColor;
uniform float4 overColor;
uniform float4 uvScale;
uniform float shadowCut;
uniform float shadowCutSmooth;
uniform float highlightCut;
uniform float highlightCutSmooth;
uniform float rimCut;
uniform float rimCutSmooth;
uniform float normalScale;
DEF_MAT_END

DEF_TEX2D(colorMap, 0);
DEF_TEX2D(normalMap, 1);
DEF_TEX2D(depthMap, 2);

FragmentOut DEFAULT_FS_MAIN
{
    FragmentOut fout;
    float2 UV = fin.TexCoords * uvScale.xy;
    float3 N = mul(((normalize(SAMPLE_TEX(normalMap, UV) * 2 - 1)).xyz),
        cotangent(fin.Normal, fin.WorldPos, UV)) * normalScale;
    float3 V = normalize(camData.camPos - fin.WorldPos);
    float4 albedo = SAMPLE_TEX(colorMap, UV);
    float a = albedo.a * baseColor.a;

    float4 Lo = Float4(0.0f);
    float L_Dot = 0;
    float lightInstansity = 0;

    lightInstansity = getLightFinalIntensity(directLight);
    if (lightInstansity != 0) {
        float3 L = directLight.direction;
        float4 Lo_dir = Toon_Lo_DirectLight(directLight, N, V, baseColor, highlightColor,
            highlightCut, highlightCutSmooth);
        Lo = lerp(shadowColor * lightInstansity, Lo_dir, ShadowCalculation(depthMap, depthMapSampler,
            fin.lightSpacePos, N, L));
        L_Dot = dot(N, L);
    }

    for(int i = 0; i < pointLightCount; ++i) {
        float intensity = getLightFinalIntensity(pointLights[i]);
        if (intensity != 0) {
            float3 L = normalize(pointLights[i].pos - fin.WorldPos);
            float distance = length(pointLights[i].pos - fin.WorldPos);
            float attenuation = distance / pointLights[i].radius;
            attenuation = max(1 - attenuation * attenuation, 0);
            float3 radiance = pointLights[i].color * pointLights[i].intensity * attenuation;
            float4 Lo_point = Toon_Lo(N, V, L, radiance, baseColor,
                highlightColor, highlightCut, highlightCutSmooth);
            Lo += Lo_point;
            L_Dot = max(dot(N, L) * attenuation, L_Dot);
            lightInstansity += intensity * attenuation;
        }
    }
    
    Lo = smoothToon(Lo, shadowColor * lightInstansity, L_Dot, shadowCut, shadowCutSmooth);
    Lo = smoothToon(rimColor * lightInstansity, Lo, fresnelSchlick(dot(N, normalize(camData.camPos - fin.WorldPos)), 0.33f),
        rimCut, rimCutSmooth);

    float4 ambient = Toon_Ambient(albedo, 1);

    fout.FragColor = albedo * Lo + ambient;
    fout.FragColor.a = a;
    fout.FragColor *= overColor;
    //fout.ssnMask = float4(1);
    return fout;
}