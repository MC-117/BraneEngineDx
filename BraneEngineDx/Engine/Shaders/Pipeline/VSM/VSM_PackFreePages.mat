#material
#localsize 256 1 1
#compute
#include "../../lib/VirtualShadowMap_Def.hmat"

#define SORT_BLOCK_SIZE LOCAL_SIZE_X
#define SORT_BLOCK_HALF_SIZE (SORT_BLOCK_SIZE >> 1)

groupshared uint sharedData[SORT_BLOCK_SIZE];

void batchSort(uint batchSize, uint tid, uint gtid)
{
    bool isDescend = (tid & batchSize) == batchSize;
    for (batchSize >>= 1 ; batchSize > 0; batchSize >>= 1) {
        uint leftIndex = tid & ~batchSize;
        uint rightIndex = tid | batchSize;
        uint data0 = outFreePhysPages[leftIndex];
        uint data1 = outFreePhysPages[rightIndex];
        bool isLeftIndex = tid == leftIndex;
        uint data = (data0 <= data1) == (isLeftIndex == isDescend) ? outFreePhysPages[leftIndex] : outFreePhysPages[rightIndex];
        DeviceMemoryBarrierWithGroupSync();
        outFreePhysPages[tid] = data;
        DeviceMemoryBarrierWithGroupSync();
    }
    
    // sharedData[gtid] = outFreePhysPages[tid];
    // GroupMemoryBarrierWithGroupSync();

    // for ( ; batchSize > 0; batchSize >>= 1) {
    //     uint leftIndex = gtid & ~batchSize;
    //     uint rightIndex = gtid | batchSize;
    //     uint data0 = sharedData[leftIndex];
    //     uint data1 = sharedData[rightIndex];
    //     GroupMemoryBarrierWithGroupSync();
    //     uint age0 = data0 >> 16;
    //     uint age1 = data1 >> 16;
    //     bool isLeftIndex = gtid == leftIndex;
    //     sharedData[gtid] = (age0 > age1) == (isLeftIndex != isDescend) ? data0 : data1;
    //     GroupMemoryBarrierWithGroupSync();
    // }
    
    // outFreePhysPages[tid] = sharedData[gtid];
}

void simpleSort(uint size, uint tid, uint gtid)
{
    uint numLarger = 0;
    uint data = outFreePhysPages[tid];
    for (uint otherIndex = 0; otherIndex < size; otherIndex++) {
        uint otherData = outFreePhysPages[otherIndex];
        if (otherData > data)
            numLarger++;
    }
    DeviceMemoryBarrierWithGroupSync();
    outFreePhysPages[numLarger] = data;
    DeviceMemoryBarrierWithGroupSync();
}

[numthreads(LOCAL_SIZE_X, LOCAL_SIZE_Y, LOCAL_SIZE_Z)]
void main(uint tid : SV_DispatchThreadID, uint gtid : SV_GroupThreadID)
{
	if (tid >= vsmInfo.maxPhysPages)
	 	return;

    // uint freeListOffset = 0;
    // uint oldListOffset = 0;
    // uint requestCount = physPageAllocRequests[vsmInfo.maxPhysPages].globalPageOffset;
    VSMPhysPageMetaData metaData = physPageMetaData[tid];
    // if (metaData.flags == 0) {
    //     InterlockedAdd(outFreePhysPages[vsmInfo.maxPhysPages], 1, freeListOffset);
    //     outFreePhysPages[freeListOffset] = tid;
    // }
    // else if (metaData.flags & VSM_PHYSICAL_FLAG_PREVIOUS_CACHE) {
    //     InterlockedAdd(outFreePhysPages[vsmInfo.maxPhysPages + 1], 1, oldListOffset);
    //     outFreePhysPages[vsmInfo.maxPhysPages - oldListOffset - 1] = tid;
    // }

    // uint freeCount = freeListOffset + 1;
    // uint oldCount = oldListOffset + 1;

    // if (requestCount < freeCount)
    //     return;

    // DeviceMemoryBarrierWithGroupSync();

    uint age = metaData.flags == 0 ? 0xFFFFU : metaData.age;
    outFreePhysPages[tid] = (age << 16) | tid;
}