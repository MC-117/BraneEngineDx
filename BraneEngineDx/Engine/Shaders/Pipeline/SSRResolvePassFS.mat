#material
Count resolveSamples: 9
Color hiZUVScale: 1.0, 1.0, 1.0, 1.0
#vertex use postprocess
#fragment postprocess
#include "../lib/Light_Def.hmat"
#include "../lib/ReflectionProbe_def.hmat"
#include "../lib/Surface_def.hmat"
#include "../lib/SSR_Lib.hmat"

DEF_MAT_BEGIN
uniform int resolveSamples;
uniform float4 hiZUVScale;
DEF_MAT_END

DEF_TEX2D(gBufferB, 0);
DEF_TEX2D(gBufferC, 1);
DEF_TEX2D(hitDataMap, 2);
DEF_TEX2D(hitColorMap, 3);

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

FragmentOut DEFAULT_SCREEN_MAIN
{
    FragmentOut fout;

    float2 UV = fin.UV;
    float depth = SAMPLE_TEX_LOD(gBufferB, UV, 0);
    float4 C = SAMPLE_TEX_LOD(gBufferC, UV, 0);
    float roughness = C.a;
    float3 viewN = normalize(worldDirToView(C.xyz));
    float3 viewPos = uvzPosToView(float3(UV, depth));
    float3 V = normalize(viewPos);
    float4 hitData0 = SAMPLE_TEX_LOD(hitDataMap, UV, 0);
    float4 hitColor0 = SAMPLE_TEX_LOD(hitColorMap, UV, 0);
    float3 color = 0;
    if (any(hitData0.xyz != 0.0f.rrr)) {
        float weightSum = 0;
        float radius = lerp(0.0005, 0.005, roughness * roughness);
        for (int i = 0; i < resolveSamples; i++) {
            float2 offUV = Hammersley16(i, resolveSamples, uint2(0x0f3a, 0xd20c)) * camData.aspect * radius;
            float2 sampleUV = UV + offUV;
            float4 hitData = SAMPLE_TEX_LOD(hitDataMap, sampleUV, 0);
            float4 hitColor = SAMPLE_TEX_LOD(hitColorMap, sampleUV, 0);
            //hitColor.rgb /= 1 + luminance(hitColor.rgb);
            float3 L = hitData.xyz;
            float weight = SSR_BRDF(-V, L, viewN, roughness);
            //weight = max(weight, hitData.a);
            weightSum += weight;
            color += hitColor.rgb * weight;
        }
        color *= rcp(weightSum);
        //color /= 1 - luminance(color);
        color = max(1e-5, color) * 0.2f * smoothstep(0.0f, 0.2f, 1 - roughness);
    }

    fout.FragColor = float4(color, 1);

    return fout;
}