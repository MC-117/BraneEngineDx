#material
Scalar blurRadius: 4
Scalar blurIter: 3
Scalar blurNear: 10
Scalar blurFar: 300
Scalar blurSmoothNear: 5
Scalar blurSmoothFar: 50
Scalar blurNearIntensity: 0
Scalar blurFarIntensity: 0
Texture dofMap
Texture screenMap
Texture depthMap
#vertex use postprocess
#fragment postprocess
#version 460

#include "../lib/Const_Def.hmat"
#include "../lib/CameraData_Def.hmat"

layout (location = 0) out float4 FragColor;
in float2 UV;
uniform int pass;
uniform float blurRadius;
uniform float blurIter;
uniform float blurNear;
uniform float blurFar;
uniform float blurSmoothNear;
uniform float blurSmoothFar;
uniform float blurNearIntensity;
uniform float blurFarIntensity;
uniform sampler2D dofMap;
uniform sampler2D screenMap;
uniform sampler2D depthMap;

const uint dofKernelN = 57;

const float2 dofKernel[57] = float2[](
    float2(0.000000, 0.000000),

    float2(0.461940, 0.191342), float2(0.191342, 0.461940), float2(-0.191342, 0.461940), float2(-0.461940, 0.191342),
    float2(-0.461940, -0.191342), float2(-0.191342, -0.461940), float2(0.191342, -0.461940), float2(0.461940, -0.191342),

    float2(1.000000, 0.000000), float2(0.923880, 0.382683), float2(0.707107, 0.707107), float2(0.382683, 0.923880),
    float2(0.000000, 1.000000), float2(-0.382683, 0.923880), float2(-0.707107, 0.707107), float2(-0.923880, 0.382683),
    float2(-1.000000, 0.000000), float2(-0.923880, -0.382683), float2(-0.707107, -0.707107), float2(-0.382683, -0.923880),
    float2(-0.000000, -1.000000), float2(0.382683, -0.923880), float2(0.707107, -0.707107), float2(0.923880, -0.382683),

    float2(1.492777, 0.147026), float2(1.435411, 0.435427), float2(1.322882, 0.707095), float2(1.159516, 0.951590),
    float2(0.951590, 1.159516), float2(0.707095, 1.322882), float2(0.435427, 1.435411), float2(0.147026, 1.492777),
    float2(-0.147026, 1.492777), float2(-0.435427, 1.435411), float2(-0.707095, 1.322882), float2(-0.951590, 1.159516),
    float2(-1.159516, 0.951590), float2(-1.322882, 0.707095), float2(-1.435411, 0.435427), float2(-1.492777, 0.147026),
    float2(-1.492777, -0.147026), float2(-1.435411, -0.435427), float2(-1.322882, -0.707095), float2(-1.159516, -0.951590),
    float2(-0.951590, -1.159516), float2(-0.707095, -1.322882), float2(-0.435427, -1.435411), float2(-0.147026, -1.492777),
    float2(0.147026, -1.492777), float2(0.435427, -1.435411), float2(0.707095, -1.322882), float2(0.951590, -1.159516),
    float2(1.159516, -0.951590), float2(1.322882, -0.707095), float2(1.435411, -0.435427), float2(1.492777, -0.147026)
);

void main() {
	if (pass == 0) {
        float weight = 0;
        float3 c = float3(0);
        int n = blurIter < 1 ? 1 : (blurIter < 2 ? 9 : (blurIter < 3 ? 25 : 57));
        for (int i = 0; i < n; i++) {
            float2 off = dofKernel[i] * blurRadius;
            off /= camData.viewSize;
            float linearDepth = 2.0 * camData.zNear * camData.zFar / (camData.zFar + camData.zNear - (2.0 * texture(depthMap, UV + off).r - 1.0) * (camData.zFar - camData.zNear));
            float rate = (1 - smoothstep(blurNear, blurNear + blurSmoothNear, linearDepth)) +
                smoothstep(blurFar - blurSmoothFar, blurFar, linearDepth);
            if (rate != 0) {
                float3 cc = texture(screenMap, UV + off * rate).rgb;
                float w = length(cc) + 0.1;
                weight += w;
                c += cc * w;
            }
        }
        FragColor.rgb = c / weight;//((1 + n) * n);
        FragColor.a = 1.0;
    }
    else if (pass == 1) {
        float linearDepth = 2.0 * camData.zNear * camData.zFar / (camData.zFar + camData.zNear - (2.0 * texture(depthMap, UV).r - 1.0) * (camData.zFar - camData.zNear));
        float4 blurC = texture(dofMap, UV);
        float4 screenC = texture(screenMap, UV);
        float rate = (1 - smoothstep(blurNear, blurNear + blurSmoothNear, linearDepth)) * blurNearIntensity +
            smoothstep(blurFar - blurSmoothFar, blurFar, linearDepth) * blurFarIntensity;
        FragColor = mix(screenC, blurC, rate);
    }
}