#material
Scalar width: 1280
Scalar height: 720
Scalar gamma: 0.25
Scalar exposure: 3
Scalar bloomLightIntensity: 5
Scalar bloomDarkIntensity: 2.5
Scalar bloomThreshold: 0.7
Count bloomLevel: 5
Count bloomIter: 5
Texture sampleMap
Texture screenMap
#vertex use postprocess
#fragment postprocess
#version 460

layout (location = 0) out float4 FragColor;
in float2 UV;
uniform int pass;
uniform int bloomLevel;
uniform int bloomIter;
uniform float width;
uniform float height;
uniform float gamma;
uniform float exposure;
uniform float bloomLightIntensity;
uniform float bloomDarkIntensity;
uniform float bloomThreshold;
uniform sampler2D sampleMap;
uniform sampler2D screenMap;

void main() {
	float4 pixel = float4(0.0);
    if (pass == 0) {
        pixel = texture(sampleMap, UV);
		float3 col = pixel.rgb;
        float3 rate = smoothstep(bloomThreshold, bloomThreshold + 0.1, col) * col - float3(bloomThreshold);
        col = mix(bloomDarkIntensity * col, bloomLightIntensity * col, rate);
		col = float3(1.0) - exp(-col * exposure);
        col = pow(col, float3(1.0/gamma));
		pixel.rgb = col;
        FragColor = pixel;
    }
	else if (pass == 1) {
		float bloomOffset = (-0.02 * bloomIter + 0.6) / width;
		for (int dx = -bloomIter; dx <= bloomIter; dx++) {
			pixel += texture(sampleMap, UV + float2(bloomOffset * dx, 0));
		}
        FragColor = pixel / (bloomIter * 2 - 1);
	}
	else if (pass == 2) {
		float bloomOffset = (-0.02 * bloomIter + 0.6) / height;
		for (int dy = -bloomIter; dy <= bloomIter; dy++) {
			pixel += texture(sampleMap, UV + float2(0, bloomOffset * dy));
		}
        FragColor = pixel / (bloomIter * 2 - 1);
	}
    else if (pass == 3) {
        pixel = texture(screenMap, UV);
        for (int i = 0; i < bloomLevel; i++) {
            pixel += textureLod(sampleMap, UV, i) * (1 - i * 0.1);
        }
		pixel.a = 1.0;
        FragColor = pixel;
    }
}