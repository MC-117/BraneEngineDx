#material
Scalar width: 1280
Scalar height: 720
Scalar gamma: 0.25
Scalar exposure: 3
Scalar bloomLightIntensity: 5
Scalar bloomDarkIntensity: 2.5
Scalar bloomThreshold: 0.7
Count bloomLevel: 5
Count bloomIter: 6
Texture sampleMap
#vertex use postprocess
#fragment postprocess
#pragma debug
#include "../lib/Basic_FS_Lib.hmat"
#include "../lib/ScreenPass_Def.hmat"

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

DEF_MAT_BEGIN
uniform int bloomLevel;
uniform int bloomIter;
uniform float width;
uniform float height;
uniform float gamma;
uniform float exposure;
uniform float bloomLightIntensity;
uniform float bloomDarkIntensity;
uniform float bloomThreshold;
DEF_MAT_END

DEF_TEX2D(sampleMap, 0);

FragmentOut DEFAULT_SCREEN_MAIN
{
	FragmentOut fout;
	float4 pixel = Float4(0.0);
    if (passID == 0) {
        pixel = SAMPLE_TEX_LOD(sampleMap, fin.UV, 0);
		pixel.rgb = min(float3(1, 1, 1), pixel.rgb);
		float totalLuminance = luminance(pixel.rgb);
		float bloomLuminance = totalLuminance - bloomThreshold;
		float bloomIntensity = saturate(bloomLuminance * 0.5f);
        fout.FragColor = float4(bloomIntensity * pixel.rgb, 1);
    }
	else if (passID == 1) {
		float bloomOffset = (-0.02 * bloomIter + 0.6) / width * pow(2, passNum);
		for (int dx = -bloomIter; dx <= bloomIter; dx++) {
			pixel += SAMPLE_TEX_LOD(sampleMap, fin.UV + float2(bloomOffset * dx, 0), passNum);
		}
        fout.FragColor = pixel / (bloomIter * 2 - 1);
	}
	else if (passID == 2) {
		float bloomOffset = (-0.02 * bloomIter + 0.6) / height * pow(2, passNum);
		for (int dy = -bloomIter; dy <= bloomIter; dy++) {
			pixel += SAMPLE_TEX_LOD(sampleMap, fin.UV + float2(0, bloomOffset * dy), passNum);
		}
        fout.FragColor = pixel / (bloomIter * 2 - 1);
	}
    else if (passID == 3) {
        for (int i = 0; i < bloomLevel; i++) {
            pixel += SAMPLE_TEX_LOD(sampleMap, fin.UV, i);// * (1 - i * 0.1);
        }
		pixel.a = 1.0;
        fout.FragColor = pixel;
    }
	return fout;
}