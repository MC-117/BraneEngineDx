#material
Scalar worldRadius: 5
Scalar ssaoIntensity: 1.0
Count numAngles: 4
Count GTAO_NUMTAPS: 5
Texture ssaoMap
Texture screenMap
Texture depthMap
#vertex use postprocess
#fragment postprocess
#include "../lib/Basic_FS_Lib.hmat"
#include "../lib/PostProcess_Def.hmat"
#include "../lib/CameraData_Def.hmat"

#define PI_HALF (PI*0.5)

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

DEF_MAT_BEGIN
uniform int numAngles = 8;
uniform int GTAO_NUMTAPS = 10;
uniform float worldRadius;
uniform float ssaoIntensity;
uniform int ssaoBlurIter;
uniform float screenScale;
DEF_MAT_END

DEF_TEX2D(ssaoMap, 0);
DEF_TEX2D(screenMap, 1);
DEF_TEX2D(depthMap, 2);

static const float3 sample_sphere[16] = {
    float3( 0.5381, 0.1856,-0.4319), float3( 0.1379, 0.2486, 0.4430),
    float3( 0.3371, 0.5679,-0.0057), float3(-0.6999,-0.0451,-0.0019),
    float3( 0.0689,-0.1598,-0.8547), float3( 0.0560, 0.0069,-0.1843),
    float3(-0.0146, 0.1402, 0.0762), float3( 0.0100,-0.1924,-0.0344),
    float3(-0.3577,-0.5301,-0.4358), float3(-0.3169, 0.1063, 0.0158),
    float3( 0.0103,-0.5869, 0.0046), float3(-0.0897,-0.4940, 0.3287),
    float3( 0.7119,-0.0154,-0.0918), float3(-0.0533, 0.0596,-0.5411),
    float3( 0.0352,-0.0631, 0.5460), float3(-0.4776, 0.2847,-0.0271)
};

float3 normalFromDepth(in float depth, in float2 texcoords, in float offset) 
{
	float2 offset1 = float2(0.0,offset);
	float2 offset2 = float2(offset,0.0);
	float2 offset3 = float2(0.0,-offset);
	float2 offset4 = float2(-offset,0.0);

	float depth1 = SAMPLE_TEX_LOD(depthMap, texcoords + offset1, 0).r;
	float depth2 = SAMPLE_TEX_LOD(depthMap, texcoords + offset2, 0).r;
	float depth3 = SAMPLE_TEX_LOD(depthMap, texcoords + offset3, 0).r;
	float depth4 = SAMPLE_TEX_LOD(depthMap, texcoords + offset4, 0).r;

	float3 p1 = float3(offset1, depth1 - depth);
	float3 p2 = float3(offset2, depth2 - depth);
	float3 p3 = float3(offset3, depth3 - depth);
	float3 p4 = float3(offset4, depth4 - depth);

	float3 normal1 = cross(p1, p2);
	float3 normal2 = cross(p2, p3);
	float3 normal3 = cross(p3, p4);
	float3 normal4 = cross(p4, p1);

	float3 normal = (normal1 + normal2 + normal3 + normal4) / 4;
	normal.z = -normal.z;

	return normalize(normal);
}

float depthFromNDCToView(float depth)
{
    float ndcZ = 2.0 * depth - 1.0;
    float z = 2.0 * camData.zNear * camData.zFar / (camData.zFar + camData.zNear - ndcZ * (camData.zFar - camData.zNear));
    return z;
}

float3 reflection(float3 v1,float3 v2)
{
    float3 result= 2.0 * dot(v2, v1) * v2;
    result=v1-result;
    return result;
}

float3 ScreenToViewPos(float2 uv, float ndcDepth)
{
    float4 ndcPos;
    ndcPos.x = uv.x * 2.0f - 1.0f;
    ndcPos.y = 1.0f - uv.y * 2.0f;
    ndcPos.z = ndcDepth;
    ndcPos.w = 1.0f;
    ndcPos = mul(ndcPos, camData.promatInv);
    return ndcPos.xyz / ndcPos.w;
}

float InterleavedGradientNoise(float2 iPos)
{
	return frac(52.9829189f * frac((iPos.x * 0.06711056) + (iPos.y * 0.00583715)));
}

float2 GetRandomAngleOffset(uint2 iPos)
{
	iPos.y = 4096 - iPos.y;
	float Angle = InterleavedGradientNoise(float2(iPos));
	float Offset = (1.0 / 4.0) * ((iPos.y - iPos.x) & 3);
	return float2(Angle, Offset);
}

float3 GetRandomVector(uint2 iPos)
{
	iPos.y = 16384 - iPos.y;

	float3 RandomVec = float3(0, 0, 0);
	float3 RandomTexVec = float3(0, 0, 0);
	float ScaleOffset;

	float TemporalCos = 0.705;
	float TemporalSin = 0.705;
	float GradientNoise = InterleavedGradientNoise(float2(iPos));

	RandomTexVec.x = cos((GradientNoise * PI));
	RandomTexVec.y = sin((GradientNoise * PI));

	ScaleOffset = (1.0 / 4.0) * ((iPos.y - iPos.x) & 3);
//	ScaleOffset = (1.0/5.0)  *  (( iPos.y - iPos.x) % 5);

	RandomVec.x = dot(RandomTexVec.xy, float2(TemporalCos, -TemporalSin));
	RandomVec.y = dot(RandomTexVec.xy, float2(TemporalSin, TemporalCos));
	RandomVec.z = frac(ScaleOffset + 0.5);

	return RandomVec;
}

float2 SearchForLargestAngleDual(uint NumSteps, float2 BaseUV, float2 ScreenDir, float3 ViewPos, float3 ViewDir)
{
	float LenDsSquare, LenDsInv,Ang,FallOff;
	float3 Ds;
	float2 SceneDepths = 0;
	float2 BestAng = float2(-1, -1);
	
	float AttenFactor = 2.0 / (worldRadius * worldRadius);
	
	float Thickness = 0.9f;
	for (uint i = 0; i < NumSteps; i++)
	{
		float fi = (float) i;
		
		float2 UVOffset = ScreenDir * (fi + 1.0) / camData.viewSize; 
		UVOffset.y *= -1;
		
		float4 UV2 = BaseUV.xyxy + float4(UVOffset.xy, -UVOffset.xy);
		
		SceneDepths.x = SAMPLE_TEX_LOD(depthMap, UV2.xy, 0).r;
		SceneDepths.y = SAMPLE_TEX_LOD(depthMap, UV2.zw, 0).r;
		
		//正向 slider54
		Ds = ScreenToViewPos(UV2.xy, SceneDepths.x) - ViewPos;	
		LenDsSquare = dot(Ds, Ds);
		LenDsInv = rsqrt(LenDsSquare + 0.0001);
		Ang = dot(Ds, ViewDir) * LenDsInv;
		
		FallOff = saturate(LenDsSquare * AttenFactor);
		Ang = lerp(Ang, BestAng.x, FallOff);
		
		BestAng.x = (Ang > BestAng.x) ? Ang : lerp(Ang, BestAng.x, Thickness);;

		//反向
		Ds = ScreenToViewPos(UV2.zw, SceneDepths.x) - ViewPos;
		LenDsSquare = dot(Ds, Ds);
		LenDsInv = rsqrt(LenDsSquare + 0.0001);
		Ang = dot(Ds, ViewDir) * LenDsInv;
		
		FallOff = saturate(LenDsSquare * AttenFactor);
		Ang = lerp(Ang, BestAng.x, FallOff);
		
		BestAng.y = (Ang > BestAng.y) ? Ang : lerp(Ang, BestAng.y, Thickness);;
	}
	BestAng.x = acos(clamp(BestAng.x, -1.0, 1.0));
	BestAng.y = acos(clamp(BestAng.y, -1.0, 1.0));
	
	return BestAng;
}

float ComputeInnerIntegral(float2 UV, float2 Angles, float2 ScreenDir, float3 ViewDir, float3 ViewSpaceNormal, float SceneDepth)
{
	// Given the angles found in the search plane we need to project the View Space Normal onto the plane defined by the search axis and the View Direction and perform the inner integrate
	float3 PlaneNormal = normalize(cross(float3(ScreenDir.xy, 0), ViewDir));
	float3 Perp = cross(ViewDir, PlaneNormal);
	float3 ProjNormal = ViewSpaceNormal - PlaneNormal * dot(ViewSpaceNormal, PlaneNormal);

	float LenProjNormal = length(ProjNormal) + 0.000001f;
	float RecipMag = 1.0f / (LenProjNormal);

	float CosAng = dot(ProjNormal, Perp) * RecipMag;
	float Gamma = acos(CosAng) - PI_HALF;
	float CosGamma = dot(ProjNormal, ViewDir) * RecipMag;
	float SinGamma = CosAng * -2.0f;

	// clamp to normal hemisphere 
	Angles.x = Gamma + max(-Angles.x - Gamma, -(PI_HALF));
	Angles.y = Gamma + min(Angles.y - Gamma, (PI_HALF));

	float AO = ((LenProjNormal) * 0.25 *
					    ((Angles.x * SinGamma + CosGamma - cos((2.0 * Angles.x) - Gamma)) +
				  	      (Angles.y * SinGamma + CosGamma - cos((2.0 * Angles.y) - Gamma))));

	return AO;
}


float3 MutiBounce(float AO,float3 albedo)
{
	float3 a = 2.0404 * albedo - 0.3324;
	float3 b = -4.7951 * albedo + 0.6417;
	float3 c = 2.7552 * albedo + 0.6903;

	return max(AO, ((AO * a + b) * AO + c) * AO);
}

FragmentOut DEFAULT_PP_MAIN
{
	FragmentOut fout;
    if (passID == 0) {
        // float3 pos = reconstructPos();
        // float AO = 0.0;

        // for (int i = 0 ; i < 16 ; i++) {
        //     float3 samplePos = pos + ssaoKernal[i];
        //     float4 offset = float4(samplePos, 1.0);
        //     offset = camData.pmat * offset;
        //     offset.xy /= offset.w;
        //     offset.xy = offset.xy * 0.5 + 0.5;

        //     float sampleDepth = calViewZ(offset.xy);

        //     // float rangeCheck = smoothstep(0.0, 1.0, ssaoRadius / abs(pos.z - sampleDepth));
        //     // AO += (sampleDepth >= samplePos.z ? 1.0 : 0.0) * rangeCheck;

        //     if (abs(pos.z - sampleDepth) < ssaoRadius) {
        //         AO += step(sampleDepth,samplePos.z);
        //     }
        // }
        // AO = 1.0 - AO / 16.0;
        // oCol0.rgb = float3(AO * AO);
        // oCol0.a = 1.0;

        //SSAO
        // float2 depthSize = getTexureSize(depthMap);
        // float depth = SAMPLE_TEX_LOD(depthMap, pin.UV, 0).r;
        // float3 normal = normalFromDepth(depth, pin.UV, 1 / depthSize.x);
        // if (depth < ssaoCutoff && abs(dot(normal, float3(0, 0, 1))) < (1 - ssaobias)) {
        //     float3 random = normalize(SAMPLE_TEX_LOD(ssaoKernalMap, pin.UV * 8.0, 0).rgb);
        //     float3 position = float3(pin.UV.x,pin.UV.y,depth);
        //     float radiusDepth = ssaoRadius/depth;
        //     float occlusion = 0.0;
        //     //float bias = max(ssaobias * dot(normal, float3(0, 0, 1)), ssaobias * 0.1);

        //     int iterations = 16;
        //     for (int j = 0; j < iterations; ++j)
        //     {
        //         float3 ray = radiusDepth * reflection(sample_sphere[j], random);
        //         if (dot(ray,normal) > 0) {
        //             float3 hemiRay = position + ray;
                
        //             float occDepth = SAMPLE_TEX_LOD(depthMap, clamp(hemiRay.xy,0.0,1.0), 0).r;
        //             float difference = depth - occDepth;

        //             occlusion += smoothstep(ssaoFalloff, ssaoArea, (depth >= occDepth ? 1.0 : 0.0) * (1 - smoothstep(0, 1, abs(difference) / ssaoRadius)));
        //         }
        //         //occlusion += step(ssaoFalloff, difference) * smoothstep(ssaoFalloff, ssaoArea, difference);
        //     }

        //     float ao = occlusion * (1.0 / iterations);
        //     ao = smoothstep(ssaoFalloff, ssaoArea, ao) * ssaoIntensity * ao;
        //     ao = 1 - ao;
        //     float final = clamp(ao * ao,0.0,1.0);

        //     fout.FragColor = float4(final, final, final, 1);
        // }
        // else
        //     fout.FragColor = Float4(1);

        //GTAO
        float2 depthSize = getTexureSize(depthMap);
        float ndcDepth = SAMPLE_TEX_LOD(depthMap, pin.UV, 0).r;
        float viewDepth = depthFromNDCToView(ndcDepth);
        float3 normVS = normalFromDepth(ndcDepth, pin.UV, 1 / depthSize.x);
        float3 posVS = ScreenToViewPos(pin.UV, ndcDepth);

        float3 viewDir = normalize(-posVS.xyz);
        
        float sinDeltaAngle = sin(PI / numAngles);
        float cosDeltaAngle = cos(PI / numAngles);

        float3 random = GetRandomVector(int2(pin.UV * camData.viewSize));
        float2 randomVec = random.xy;
        float offset = random.z;

        float ao = 0;

        float2 screenDir = randomVec;
        for (int angle = 0; angle < numAngles; angle++)
        {
            float2 Angles = SearchForLargestAngleDual(GTAO_NUMTAPS, pin.UV, screenDir, posVS, viewDir);
            ao += ComputeInnerIntegral(pin.UV, Angles, screenDir, viewDir, normVS, viewDepth);
		
		    // Rotate for the next angle
		    float2 TempScreenDir = screenDir.xy;
		    screenDir.x = (TempScreenDir.x * cosDeltaAngle) + (TempScreenDir.y * -sinDeltaAngle);
		    screenDir.y = (TempScreenDir.x * sinDeltaAngle) + (TempScreenDir.y * cosDeltaAngle);
        }

        ao /= numAngles;
        ao *= 2.0f / PI;

        ao = 1 - (1 - ao) * ssaoIntensity * 0.3;

        fout.FragColor = float4(ao, ao, ao, 1);
    }
    else if (passID == 1) {
        float4 albedo = SAMPLE_TEX_LOD(screenMap, pin.UV, 0);
        float ao = SAMPLE_TEX_LOD(ssaoMap, pin.UV, 0);
        albedo.rgb *= MutiBounce(ao, albedo.rgb);
        albedo.a = 1;
        fout.FragColor = albedo;
    }
    return fout;
}