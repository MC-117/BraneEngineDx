#material
#localsize 4 32
#compute
#include "CMAA2_Lib.hmat"

#if CMAA2_DEFERRED_APPLY_THREADGROUP_SWAP
[numthreads( 4, CMAA2_DEFERRED_APPLY_NUM_THREADS, 1 )]
#else
[numthreads( CMAA2_DEFERRED_APPLY_NUM_THREADS, 4, 1 )]
#endif
void DeferredColorApply2x2CS( uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID )
{
    const uint numCandidates    = g_workingControlBuffer.Load(4*3);
#if CMAA2_DEFERRED_APPLY_THREADGROUP_SWAP
    const uint currentCandidate     = dispatchThreadID.y;
    const uint currentQuadOffsetXY  = groupThreadID.x;
#else
    const uint currentCandidate     = dispatchThreadID.x;
    const uint currentQuadOffsetXY  = groupThreadID.y;
#endif

    if( currentCandidate >= numCandidates )
        return;

    uint pixelID    = g_workingDeferredBlendLocationList[currentCandidate];
    uint2 quadPos   = uint2( (pixelID >> 16), pixelID & 0xFFFF );
    const int2 qeOffsets[4] = { {0, 0}, {1, 0}, {0, 1}, {1, 1} };
    uint2 pixelPos  = quadPos*2+qeOffsets[currentQuadOffsetXY];

    uint counterIndexWithHeader = g_workingDeferredBlendItemListHeads[quadPos];

    int counter = 0;

#if CMAA_MSAA_SAMPLE_COUNT > 1
    lpfloat4 outColors[CMAA_MSAA_SAMPLE_COUNT];
    [unroll]
    for( uint msaaSampleIndex = 0; msaaSampleIndex < CMAA_MSAA_SAMPLE_COUNT; msaaSampleIndex++ )
        outColors[msaaSampleIndex] = lpfloat4( 0, 0, 0, 0 );
    bool hasValue = false;
#else
    lpfloat4 outColors = lpfloat4( 0, 0, 0, 0 );
#endif

    const uint maxLoops = 32*CMAA_MSAA_SAMPLE_COUNT;   // do the loop to prevent bad data hanging the GPU <- probably not needed
    {
        for( uint i = 0; (counterIndexWithHeader != 0xFFFFFFFF) && ( i < maxLoops); i ++ )
        {
            // decode item-specific info: {2 bits for 2x2 quad location}, {3 bits for MSAA sample index}, {1 bit for isComplexShape flag}, {26 bits for address}
            uint offsetXY           = (counterIndexWithHeader >> 30) & 0x03;
            uint msaaSampleIndex    = (counterIndexWithHeader >> 27) & 0x07;
            bool isComplexShape     = (counterIndexWithHeader >> 26) & 0x01;

            uint2 val = g_workingDeferredBlendItemList[ counterIndexWithHeader & ((1 << 26) - 1) ];

            counterIndexWithHeader  = val.x;

            if( offsetXY == currentQuadOffsetXY )
            {
                lpfloat3 color      = InternalUnpackColor(val.y);
                lpfloat weight      = 0.8 + 1.0 * lpfloat(isComplexShape);
#if CMAA_MSAA_SAMPLE_COUNT > 1
                outColors[msaaSampleIndex] += lpfloat4( color * weight, weight );
                hasValue = true;
#else
                outColors += lpfloat4( color * weight, weight );
#endif
            }
            //numberOfElements[offsetXY]++;
        }
    }

#if CMAA_MSAA_SAMPLE_COUNT > 1
    if( !hasValue )             return;
#else
    if( outColors.a == 0 )      return;
#endif

    {
#if CMAA_MSAA_SAMPLE_COUNT > 1
        lpfloat4 outColor = 0;
        for( uint msaaSampleIndex = 0; msaaSampleIndex < CMAA_MSAA_SAMPLE_COUNT; msaaSampleIndex++ )
        {
            if( outColors[msaaSampleIndex].a != 0 )
                outColor.xyz += outColors[msaaSampleIndex].rgb / (outColors[msaaSampleIndex].a);
            else
                outColor.xyz += LoadSourceColor( pixelPos, int2(0, 0), msaaSampleIndex );
        }
        outColor /= (lpfloat)CMAA_MSAA_SAMPLE_COUNT;
#else
        lpfloat4 outColor = outColors;
        outColor.rgb /= outColor.a;
#endif
        FinalUAVStore( pixelPos, lpfloat3(outColor.rgb) );
    }
}