#material
#localsize 128 1 1
#compute
#include "CMAA2_Lib.hmat"

void FindZLineLengths( out lpfloat lineLengthLeft, out lpfloat lineLengthRight, uint2 screenPos, uniform bool horizontal, uniform bool invertedZShape, const float2 stepRight, uint msaaSampleIndex )
{
// this enables additional conservativeness test but is pretty detrimental to the final effect so left disabled by default even when CMAA2_EXTRA_SHARPNESS is enabled
#define CMAA2_EXTRA_CONSERVATIVENESS2 0
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TODO: a cleaner and faster way to get to these - a precalculated array indexing maybe?
    uint maskLeft, bitsContinueLeft, maskRight, bitsContinueRight;
    {
        // Horizontal (vertical is the same, just rotated 90- counter-clockwise)
        // Inverted Z case:              // Normal Z case:
        //   __                          // __
        //  X|                           //  X|
        // --                            //   --
        uint maskTraceLeft, maskTraceRight;
#if CMAA2_EXTRA_CONSERVATIVENESS2
        uint maskStopLeft, maskStopRight;
#endif
        if( horizontal )
        {
            maskTraceLeft = 0x08; // tracing top edge
            maskTraceRight = 0x02; // tracing bottom edge
#if CMAA2_EXTRA_CONSERVATIVENESS2
            maskStopLeft = 0x01; // stop on right edge
            maskStopRight = 0x04; // stop on left edge
#endif
        }
        else
        {
            maskTraceLeft = 0x04; // tracing left edge
            maskTraceRight = 0x01; // tracing right edge
#if CMAA2_EXTRA_CONSERVATIVENESS2
            maskStopLeft = 0x08; // stop on top edge
            maskStopRight = 0x02; // stop on bottom edge
#endif
        }
        if( invertedZShape )
        {
            uint temp = maskTraceLeft;
            maskTraceLeft = maskTraceRight;
            maskTraceRight = temp;
        }
        maskLeft = maskTraceLeft;
        bitsContinueLeft = maskTraceLeft;
        maskRight = maskTraceRight;
#if CMAA2_EXTRA_CONSERVATIVENESS2
        maskLeft |= maskStopLeft;
        maskRight |= maskStopRight;
#endif
        bitsContinueRight = maskTraceRight;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    bool continueLeft = true;
    bool continueRight = true;
    lineLengthLeft = 1;
    lineLengthRight = 1;
    [loop]
    for( ; ; )
    {
        uint edgeLeft =     LoadEdge( screenPos.xy - stepRight * float(lineLengthLeft)          , int2( 0, 0 ), msaaSampleIndex );
        uint edgeRight =    LoadEdge( screenPos.xy + stepRight * ( float(lineLengthRight) + 1 ) , int2( 0, 0 ), msaaSampleIndex );

        // stop on encountering 'stopping' edge (as defined by masks)
        continueLeft    = continueLeft  && ( ( edgeLeft & maskLeft ) == bitsContinueLeft );
        continueRight   = continueRight && ( ( edgeRight & maskRight ) == bitsContinueRight );

        lineLengthLeft += continueLeft;
        lineLengthRight += continueRight;

        lpfloat maxLR = max( lineLengthRight, lineLengthLeft );

        // both stopped? cause the search end by setting maxLR to max length.
        if( !continueLeft && !continueRight )
            maxLR = (lpfloat)c_maxLineLength;

        // either the longer one is ahead of the smaller (already stopped) one by more than a factor of x, or both
        // are stopped - end the search.
#if CMAA2_EXTRA_SHARPNESS
        if( maxLR >= min( (lpfloat)c_maxLineLength, (1.20 * min( lineLengthRight, lineLengthLeft ) - 0.20) ) )
#else
        if( maxLR >= min( (lpfloat)c_maxLineLength, (1.25 * min( lineLengthRight, lineLengthLeft ) - 0.25) ) )
#endif
            break;
    }
}

// these are blendZ settings, determined empirically :)
static const lpfloat c_symmetryCorrectionOffset = lpfloat( 0.22 );
#if CMAA2_EXTRA_SHARPNESS
static const lpfloat c_dampeningEffect          = lpfloat( 0.11 );
#else
static const lpfloat c_dampeningEffect          = lpfloat( 0.15 );
#endif

#if CMAA2_COLLECT_EXPAND_BLEND_ITEMS
bool CollectBlendZs( uint2 screenPos, bool horizontal, bool invertedZShape, lpfloat shapeQualityScore, lpfloat lineLengthLeft, lpfloat lineLengthRight, float2 stepRight, uint msaaSampleIndex )
{
    lpfloat leftOdd = c_symmetryCorrectionOffset * lpfloat( lineLengthLeft % 2 );
    lpfloat rightOdd = c_symmetryCorrectionOffset * lpfloat( lineLengthRight % 2 );

    lpfloat dampenEffect = saturate( lpfloat(lineLengthLeft + lineLengthRight - shapeQualityScore) * c_dampeningEffect ) ;

    lpfloat loopFrom = -floor( ( lineLengthLeft + 1 ) / 2 ) + 1.0;
    lpfloat loopTo = floor( ( lineLengthRight + 1 ) / 2 );
    
    uint itemIndex;
    const uint blendItemCount = loopTo-loopFrom+1;
    InterlockedAdd( g_groupSharedBlendItemCount, blendItemCount, itemIndex );
    // safety
    if( (itemIndex+blendItemCount) > CMAA2_BLEND_ITEM_SLM_SIZE )
        return false;

    lpfloat totalLength = lpfloat(loopTo - loopFrom) + 1 - leftOdd - rightOdd;
    lpfloat lerpStep = lpfloat(1.0) / totalLength;

    lpfloat lerpFromK = (0.5 - leftOdd - loopFrom) * lerpStep;

    uint itemHeader     = (screenPos.x << 18) | (msaaSampleIndex << 14) | screenPos.y;
    uint itemValStatic  = (horizontal << 31) | (invertedZShape << 30);

    for( lpfloat i = loopFrom; i <= loopTo; i++ )
    {
        lpfloat lerpVal = lerpStep * i + lerpFromK;

        lpfloat secondPart = (i>0);
        lpfloat srcOffset = 1.0 - secondPart * 2.0;

        lpfloat lerpK = (lerpStep * i + lerpFromK) * srcOffset + secondPart;
        lerpK *= dampenEffect;

        int2 encodedItem;
        encodedItem.x = itemHeader;
        encodedItem.y = itemValStatic | ((uint(i+256) /*& 0x3FF*/) << 20) | ( (uint(srcOffset+256) /*& 0x3FF*/ ) << 10 ) | uint( saturate(lerpK) * 1023 + 0.5 );
        g_groupSharedBlendItems[itemIndex++] = encodedItem;
    }
    return true;
}
#endif

void BlendZs( uint2 screenPos, bool horizontal, bool invertedZShape, lpfloat shapeQualityScore, lpfloat lineLengthLeft, lpfloat lineLengthRight, float2 stepRight, uint msaaSampleIndex )
{
    float2 blendDir = ( horizontal ) ? ( float2( 0, -1 ) ) : ( float2( -1, 0 ) );

    if( invertedZShape )
        blendDir = -blendDir;

    lpfloat leftOdd = c_symmetryCorrectionOffset * lpfloat( lineLengthLeft % 2 );
    lpfloat rightOdd = c_symmetryCorrectionOffset * lpfloat( lineLengthRight % 2 );

    lpfloat dampenEffect = saturate( lpfloat(lineLengthLeft + lineLengthRight - shapeQualityScore) * c_dampeningEffect ) ;

    lpfloat loopFrom = -floor( ( lineLengthLeft + 1 ) / 2 ) + 1.0;
    lpfloat loopTo = floor( ( lineLengthRight + 1 ) / 2 );
    
    lpfloat totalLength = lpfloat(loopTo - loopFrom) + 1 - leftOdd - rightOdd;
    lpfloat lerpStep = lpfloat(1.0) / totalLength;

    lpfloat lerpFromK = (0.5 - leftOdd - loopFrom) * lerpStep;

    for( lpfloat i = loopFrom; i <= loopTo; i++ )
    {
        lpfloat lerpVal = lerpStep * i + lerpFromK;

        lpfloat secondPart = (i>0);
        lpfloat srcOffset = 1.0 - secondPart * 2.0;

        lpfloat lerpK = (lerpStep * i + lerpFromK) * srcOffset + secondPart;
        lerpK *= dampenEffect;

        float2 pixelPos = screenPos + stepRight * float(i);

        lpfloat3 colorCenter    = LoadSourceColor( pixelPos, int2( 0, 0 ), msaaSampleIndex ).rgb;
        lpfloat3 colorFrom      = LoadSourceColor( pixelPos.xy + blendDir * float(srcOffset).xx, int2( 0, 0 ), msaaSampleIndex ).rgb;
        
        lpfloat3 output = lerp( colorCenter.rgb, colorFrom.rgb, lerpK );

        StoreColorSample( pixelPos.xy, output, true, msaaSampleIndex );
    }
}

// TODO:
// There were issues with moving this (including the calling code) to half-float on some hardware (broke in certain cases on RX 480).
// Further investigation is required.
void DetectZsHorizontal( in lpfloat4 edges, in lpfloat4 edgesM1P0, in lpfloat4 edgesP1P0, in lpfloat4 edgesP2P0, out lpfloat invertedZScore, out lpfloat normalZScore )
{
    // Inverted Z case:
    //   __
    //  X|
    // --
    {
        invertedZScore  = edges.r * edges.g *                edgesP1P0.a;
        invertedZScore  *= 2.0 + ((edgesM1P0.g + edgesP2P0.a) ) - (edges.a + edgesP1P0.g) - 0.7 * (edgesP2P0.g + edgesM1P0.a + edges.b + edgesP1P0.r);
    }

    // Normal Z case:
    // __
    //  X|
    //   --
    {
        normalZScore    = edges.r * edges.a *                edgesP1P0.g;
        normalZScore    *= 2.0 + ((edgesM1P0.a + edgesP2P0.g) ) - (edges.g + edgesP1P0.a) - 0.7 * (edgesP2P0.a + edgesM1P0.g + edges.b + edgesP1P0.r);
    }
}

[numthreads( CMAA2_PROCESS_CANDIDATES_NUM_THREADS, 1, 1 )]
void ProcessCandidatesCS( uint3 dispatchThreadID : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID )
{
#if CMAA2_COLLECT_EXPAND_BLEND_ITEMS
    if( groupThreadID.x == 0 )
        g_groupSharedBlendItemCount = 0;
    GroupMemoryBarrierWithGroupSync( );
#endif

    uint msaaSampleIndex = 0;
    const uint numCandidates = g_workingControlBuffer.Load(4*3); //g_workingControlBuffer[3];
    if( dispatchThreadID.x < numCandidates )
    {

	uint pixelID = g_workingShapeCandidates[dispatchThreadID.x];

#if 0 // debug display
    uint2 screenSize;
    g_inoutColorReadonly.GetDimensions( screenSize.x, screenSize.y );
    StoreColorSample( uint2(dispatchThreadID.x % screenSize.x, dispatchThreadID.x / screenSize.x), lpfloat3( 1, 1, 0 ), false, msaaSampleIndex );
    return;
#endif

    uint2 pixelPos = uint2( (pixelID >> 18) /*& 0x3FFF*/, pixelID & 0x3FFF );
#if CMAA_MSAA_SAMPLE_COUNT > 1
    msaaSampleIndex = (pixelID >> 14) & 0x07;
#endif

#if CMAA_MSAA_SAMPLE_COUNT > 1
    int4 loadPosCenter = int4( pixelPos, msaaSampleIndex, 0 );
#else
    int3 loadPosCenter = int3( pixelPos, 0 );
#endif

    uint edgesCenterPacked = LoadEdge( pixelPos, int2( 0, 0 ), msaaSampleIndex );
    lpfloat4 edges      = UnpackEdgesFlt( edgesCenterPacked );
    lpfloat4 edgesLeft  = UnpackEdgesFlt( LoadEdge( pixelPos, int2( -1, 0 ), msaaSampleIndex ) );
    lpfloat4 edgesRight = UnpackEdgesFlt( LoadEdge( pixelPos, int2(  1, 0 ), msaaSampleIndex ) );
    lpfloat4 edgesBottom= UnpackEdgesFlt( LoadEdge( pixelPos, int2( 0,  1 ), msaaSampleIndex ) );
    lpfloat4 edgesTop   = UnpackEdgesFlt( LoadEdge( pixelPos, int2( 0, -1 ), msaaSampleIndex ) );
    
    // simple shapes
    {
        lpfloat4 blendVal = ComputeSimpleShapeBlendValues( edges, edgesLeft, edgesRight, edgesTop, edgesBottom, true );

        const lpfloat fourWeightSum = dot( blendVal, lpfloat4( 1, 1, 1, 1 ) );
        const lpfloat centerWeight = 1.0 - fourWeightSum;

        lpfloat3 outColor = LoadSourceColor( pixelPos, int2( 0, 0 ), msaaSampleIndex ).rgb * centerWeight;
        [flatten]
        if( blendVal.x > 0.0 )   // from left
        {
            lpfloat3 pixelL = LoadSourceColor( pixelPos, int2( -1, 0 ), msaaSampleIndex ).rgb;
            outColor.rgb += blendVal.x * pixelL;
        }
        [flatten]
        if( blendVal.y > 0.0 )   // from above
        {
            lpfloat3 pixelT = LoadSourceColor( pixelPos, int2( 0, -1 ), msaaSampleIndex ).rgb; 
            outColor.rgb += blendVal.y * pixelT;
        }
        [flatten]
        if( blendVal.z > 0.0 )   // from right
        {
            lpfloat3 pixelR = LoadSourceColor( pixelPos, int2( 1, 0 ), msaaSampleIndex ).rgb;
            outColor.rgb += blendVal.z * pixelR;
        }
        [flatten]
        if( blendVal.w > 0.0 )   // from below
        {
            lpfloat3 pixelB = LoadSourceColor( pixelPos, int2( 0, 1 ), msaaSampleIndex ).rgb;
            outColor.rgb += blendVal.w * pixelB;
        }

        StoreColorSample( pixelPos.xy, outColor, false, msaaSampleIndex );
    }

    // complex shapes - detect
    {
        lpfloat invertedZScore;
        lpfloat normalZScore;
        lpfloat maxScore;
        bool horizontal = true;
        bool invertedZ = false;
        // lpfloat shapeQualityScore;    // 0 - best quality, 1 - some edges missing but ok, 2 & 3 - dubious but better than nothing

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // horizontal
        {
            lpfloat4 edgesM1P0 = edgesLeft;
            lpfloat4 edgesP1P0 = edgesRight;
            lpfloat4 edgesP2P0 = UnpackEdgesFlt( LoadEdge( pixelPos, int2(  2, 0 ), msaaSampleIndex ) );

            DetectZsHorizontal( edges, edgesM1P0, edgesP1P0, edgesP2P0, invertedZScore, normalZScore );
            maxScore = max( invertedZScore, normalZScore );

            if( maxScore > 0 )
            {
                invertedZ = invertedZScore > normalZScore;
            }
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // vertical
        {
            // Reuse the same code for vertical (used for horizontal above), but rotate input data 90 degrees counter-clockwise, so that:
            // left     becomes     bottom
            // top      becomes     left
            // right    becomes     top
            // bottom   becomes     right

            // we also have to rotate edges, thus .argb
            lpfloat4 edgesM1P0 = edgesBottom;
            lpfloat4 edgesP1P0 = edgesTop;
            lpfloat4 edgesP2P0 = UnpackEdgesFlt( LoadEdge( pixelPos, int2( 0, -2 ), msaaSampleIndex ) );

            DetectZsHorizontal( edges.argb, edgesM1P0.argb, edgesP1P0.argb, edgesP2P0.argb, invertedZScore, normalZScore );
            lpfloat vertScore = max( invertedZScore, normalZScore );

            if( vertScore > maxScore )
            {
                maxScore = vertScore;
                horizontal = false;
                invertedZ = invertedZScore > normalZScore;
                //shapeQualityScore = floor( clamp(4.0 - maxScore, 0.0, 3.0) );
            }
        }
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        if( maxScore > 0 )
        {
#if CMAA2_EXTRA_SHARPNESS
            lpfloat shapeQualityScore = round( clamp(4.0 - maxScore, 0.0, 3.0) );    // 0 - best quality, 1 - some edges missing but ok, 2 & 3 - dubious but better than nothing
#else
            lpfloat shapeQualityScore = floor( clamp(4.0 - maxScore, 0.0, 3.0) );    // 0 - best quality, 1 - some edges missing but ok, 2 & 3 - dubious but better than nothing
#endif

            const float2 stepRight = ( horizontal ) ? ( float2( 1, 0 ) ) : ( float2( 0, -1 ) );
            lpfloat lineLengthLeft, lineLengthRight;
            FindZLineLengths( lineLengthLeft, lineLengthRight, pixelPos, horizontal, invertedZ, stepRight, msaaSampleIndex );

            lineLengthLeft  -= shapeQualityScore;
            lineLengthRight -= shapeQualityScore;

            if( ( lineLengthLeft + lineLengthRight ) >= (5.0) )
            {
#if CMAA2_COLLECT_EXPAND_BLEND_ITEMS
                // try adding to SLM but fall back to in-place processing if full (which only really happens in synthetic test cases)
                if( !CollectBlendZs( pixelPos, horizontal, invertedZ, shapeQualityScore, lineLengthLeft, lineLengthRight, stepRight, msaaSampleIndex ) )
#endif
                    BlendZs( pixelPos, horizontal, invertedZ, shapeQualityScore, lineLengthLeft, lineLengthRight, stepRight, msaaSampleIndex );
            }
        }
    }

    }

#if CMAA2_COLLECT_EXPAND_BLEND_ITEMS
    GroupMemoryBarrierWithGroupSync( );
    
    uint totalItemCount = min( CMAA2_BLEND_ITEM_SLM_SIZE, g_groupSharedBlendItemCount );

    // spread items into waves
    uint loops = (totalItemCount+(CMAA2_PROCESS_CANDIDATES_NUM_THREADS-1)-groupThreadID.x)/CMAA2_PROCESS_CANDIDATES_NUM_THREADS;

    for( uint loop = 0; loop < loops; loop++ )
    {
        uint    index           = loop*CMAA2_PROCESS_CANDIDATES_NUM_THREADS + groupThreadID.x;

        uint2   itemVal         = g_groupSharedBlendItems[index];

        uint2   startingPos     = uint2( (itemVal.x >> 18) /*& 0x3FFF*/, itemVal.x & 0x3FFF );
        uint itemMSAASampleIndex= 0;
#if CMAA_MSAA_SAMPLE_COUNT > 1
        itemMSAASampleIndex     = (itemVal.x >> 14) & 0x07;
#endif

        bool    itemHorizontal  = (itemVal.y >> 31) & 1;
        bool    itemInvertedZ   = (itemVal.y >> 30) & 1;
        lpfloat itemStepIndex   = float((itemVal.y >> 20) & 0x3FF) - 256.0;
        lpfloat itemSrcOffset   = ((itemVal.y >> 10) & 0x3FF) - 256.0;
        lpfloat itemLerpK       = (itemVal.y & 0x3FF) / 1023.0;

        lpfloat2 itemStepRight    = ( itemHorizontal ) ? ( lpfloat2( 1, 0 ) ) : ( lpfloat2( 0, -1 ) );
        lpfloat2 itemBlendDir     = ( itemHorizontal ) ? ( lpfloat2( 0, -1 ) ) : ( lpfloat2( -1, 0 ) );
        if( itemInvertedZ )
            itemBlendDir = -itemBlendDir;

        uint2 itemPixelPos      = startingPos + itemStepRight * lpfloat(itemStepIndex);

        lpfloat3 colorCenter    = LoadSourceColor( itemPixelPos, int2( 0, 0 ), itemMSAASampleIndex ).rgb;
        lpfloat3 colorFrom      = LoadSourceColor( itemPixelPos.xy + itemBlendDir * lpfloat(itemSrcOffset).xx, int2( 0, 0 ), itemMSAASampleIndex ).rgb;
        
        lpfloat3 outputColor    = lerp( colorCenter.rgb, colorFrom.rgb, itemLerpK );

        StoreColorSample( itemPixelPos.xy, outputColor, true, itemMSAASampleIndex );
    }
#endif

}