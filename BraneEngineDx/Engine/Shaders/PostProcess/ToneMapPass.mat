#material
Scalar gamma: 0.25
Scalar exposure: 3
Color baseColor: 255, 255, 255, 255
Scalar vignetteRate: 0
Scalar vignettePower: 2
Color vignetteColor: 0, 0, 0, 255
Scalar lutBlend: 0.5
Texture ssaoMap: white
Texture lutMap: defaultLut
Image imageMap: binding(0)
#localsize 16 16
#compute postprocess
#include "../lib/Basic_FS_Lib.hmat"
#include "../lib/PostProcess_Def.hmat"

DEF_MAT_BEGIN
uniform float gamma;
uniform float exposure;
uniform float4 baseColor;
uniform float vignetteRate;
uniform float vignettePower;
uniform float4 vignetteColor;
uniform float lutBlend;
DEF_MAT_END

DEF_TEX2D(ssaoMap, 0);
DEF_TEX2D(lutMap, 1);
RWTexture2D<unorm float4> imageMap : register(u0);

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

float4 lookupTable(float4 color, Texture2D LUT, SamplerState LUTSampler)
{
    float blueColor = color.b * 63.0;

    float2 quad1;
    quad1.y = floor(floor(blueColor) / 8.0);
    quad1.x = floor(blueColor) - (quad1.y * 8.0);
    float2 quad2;
    quad2.y = floor(ceil(blueColor) / 8.0);
    quad2.x = ceil(blueColor) - (quad2.y * 8.0);

    //int2 size = textureSize(LUT, 0);

    float2 texPos1;
    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);
    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);
    float2 texPos2;
    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);
    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);
    float4 newColor1 = SAMPLE_TEX_LOD(LUT, texPos1, 0);
    float4 newColor2 = SAMPLE_TEX_LOD(LUT, texPos2, 0);
    float4 newColor = lerp(newColor1, newColor2, frac(blueColor));
    return float4(newColor.rgb, color.w);
}

[numthreads(LOCAL_SIZE_2D, LOCAL_SIZE_2D, 1)]
void main(uint3 gid : SV_DispatchThreadID)
{
	FragmentOut fout;
	uint2 pos = uint2(gid.xy);
	uint2 size;
	imageMap.GetDimensions(size.x, size.y);
	if (pos.x < size.x && pos.y < size.y)
	{
		float4 c = imageMap[pos] * baseColor;
		float2 uv = float2(pos.x / float(size.x), pos.y / float(size.y));
		c = c * SAMPLE_TEX_LOD(ssaoMap, uv, 0);
		c.rgb = Float3(1.0) - exp(-c.rgb * exposure);
		c.rgb = pow(c.rgb, Float3(1.0/gamma));
		if (vignetteRate != 0) {
			float vx = abs(pos.x - float(size.x / 2)) / float(size.x / 2);
			float vy = abs(pos.y - float(size.y / 2)) / float(size.y / 2);
			float v = (pow(vx, vignettePower) + pow(vy, vignettePower)) / 2.0;
			v -= 1 - vignetteRate;
			v = max(v, 0);
			v /= vignetteRate;
			v = pow(v, vignettePower);
			c = lerp(c, vignetteColor, v);
		}
		c = lerp(c, tan(lookupTable(atan(c) * (2.0 / PI), lutMap, lutMapSampler) * (PI / 2.0)), lutBlend);
        GroupMemoryBarrierWithGroupSync();
		imageMap[pos] = c;
	}
}