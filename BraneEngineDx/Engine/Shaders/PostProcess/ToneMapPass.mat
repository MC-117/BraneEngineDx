#material
Scalar gamma: 0.25
Scalar exposure: 3
Color baseColor: 255, 255, 255, 255
Scalar vignetteRate: 0
Scalar vignettePower: 2
Color vignetteColor: 0, 0, 0, 255
Scalar lutBlend: 0.5
Texture ssaoMap: white
Texture lutMap: defaultLut
Image imageMap: binding(0)
#localsize 16 16
#compute postprocess
#version 460

#include "../lib/Const_Def.hmat"

uniform float gamma;
uniform float exposure;
uniform float4 baseColor;
uniform float vignetteRate;
uniform float vignettePower;
uniform float4 vignetteColor;
uniform float lutBlend;
uniform sampler2D ssaoMap;
uniform sampler2D lutMap;
layout(rgba8, binding = 0) uniform image2D imageMap;
layout(local_size_x = LOCAL_SIZE_2D, local_size_y = LOCAL_SIZE_2D) in;

void syncronize()
{
	memoryBarrier();
	barrier();
}

float4 lookupTable(float4 color, sampler2D LUT) {
    float blueColor = color.b * 63.0;

    float2 quad1;
    quad1.y = floor(floor(blueColor) / 8.0);
    quad1.x = floor(blueColor) - (quad1.y * 8.0);
    float2 quad2;
    quad2.y = floor(ceil(blueColor) / 8.0);
    quad2.x = ceil(blueColor) - (quad2.y * 8.0);

    //ifloat2 size = textureSize(LUT, 0);

    float2 texPos1;
    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);
    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);
    float2 texPos2;
    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);
    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);
    float4 newColor1 = texture(LUT, texPos1);
    float4 newColor2 = texture(LUT, texPos2);
    float4 newColor = mix(newColor1, newColor2, fract(blueColor));
    return float4(newColor.rgb, color.w);
}

void main() {
	ifloat2 pos = ifloat2(gl_GlobalInvocationID.xy);
	ifloat2 size = imageSize(imageMap);
	if (pos.x < size.x && pos.y < size.y) {
		float4 c = imageLoad(imageMap, pos) * baseColor;
		float2 uv = float2(pos.x / float(size.x), pos.y / float(size.y));
		c = c * texture(ssaoMap, uv);
		c.rgb = float3(1.0) - exp(-c.rgb * exposure);
		c.rgb = pow(c.rgb, float3(1.0/gamma));
		if (vignetteRate != 0) {
			float vx = abs(pos.x - float(size.x / 2)) / float(size.x / 2);
			float vy = abs(pos.y - float(size.y / 2)) / float(size.y / 2);
			float v = (pow(vx, vignettePower) + pow(vy, vignettePower)) / 2.0;
			v -= 1 - vignetteRate;
			v = max(v, 0);
			v /= vignetteRate;
			v = pow(v, vignettePower);
			c = mix(c, vignetteColor, v);
		}
		c = mix(c, tan(lookupTable(atan(c) * (2.0 / PI), lutMap) * (PI / 2.0)), lutBlend);
        syncronize();
		imageStore(imageMap, pos, c);
	}
}