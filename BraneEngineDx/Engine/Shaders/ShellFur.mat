#order 1000
#pass 10
#material
Color baseColor: 255, 255, 255, 255
Color shadowColor: 150, 150, 150, 255
Color highlightColor: 255, 255, 255, 255
Color rimColor: 255, 255, 255, 255
Color overColor: 255, 255, 255, 255

Color ldtgUVScale: 1.0, 1.0, 0.0, 0.0
Color patternUVScale: 1.0, 1.0, 0.0, 0.0

Scalar furLength: 0.5
Scalar furLengthRand: 0.3
Scalar furDensity: 1.0
Scalar furThicknessBase: 0.75
Scalar furThicknessTip: 0.3
Scalar furThicknessRand: 0.0
Scalar furGrowth: 1.0
Scalar furGrowthRand: 0.0

Scalar shadowCut: 0.5
Scalar shadowCutSmooth: 0.0
Scalar highlightCut: 0.999
Scalar highlightCutSmooth: 0.0
Scalar rimCut: 0.8
Scalar rimCutSmooth: 0.0
Scalar normalScale: 1.0
Texture colorMap: white
Texture aoMap: white
Texture normalMap: black
Texture ldtgMap: white
Texture patternMap: white
Texture depthMap: white
#vertex use shellfur
#fragment

#include "lib/Light_Def.hmat"
#include "lib/CameraData_Def.hmat"

#include "lib/Toon_Lib.hmat"
#include "lib/ShellFur_Def.hmat"

DEF_MAT_BEGIN
SHELL_FUR_BASE_MAT
uniform float4 ldtgUVScale;
uniform float4 patternUVScale;
uniform float4 baseColor;
uniform float4 shadowColor;
uniform float4 highlightColor;
uniform float4 rimColor;
uniform float4 overColor;
uniform float shadowCut;
uniform float shadowCutSmooth;
uniform float highlightCut;
uniform float highlightCutSmooth;
uniform float rimCut;
uniform float rimCutSmooth;
uniform float normalScale;
DEF_MAT_END

DEF_TEX2D(colorMap, 0);
DEF_TEX2D(aoMap, 1);
DEF_TEX2D(normalMap, 2);
DEF_TEX2D(ldtgMap, 3);
DEF_TEX2D(patternMap, 4);
DEF_TEX2D(depthMap, 5);

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
//FS_DEF_OUT_COLOR(ssnMask, 0);
FS_DEF_OUT_END

FragmentOut DEFAULT_FS_MAIN
{
    float furLayer = float(passID) / float(passNum);
    if (passID > 0) {
        float4 ldtgData = SAMPLE_TEX(ldtgMap, fin.TexCoords * ldtgUVScale.xy);
        
        float4 pattern = SAMPLE_TEX(patternMap, fin.TexCoords * patternUVScale.xy);
        // We multiply the thicknesses with ldtg texture's B channel and a random value based on 
        // the pattern's B channel ids to allow for control of the thickness through texture.
        float t_rand = 1.0 - furThicknessRand * pattern.b;
        float g_rand = 1.0 - furGrowthRand * ((pattern.g + pattern.b) / 2.0); // We use two random channels to generate an extra "random" for growth
        float thickness_base = furThicknessBase * ldtgData.b * t_rand; 
        float thickness_tip = furThicknessTip * ldtgData.b * pattern.b * t_rand;
        float scissor_thresh = lerp(-thickness_base + 1.0, -thickness_tip + 1.0, furLayer) + clamp(1.0 - furGrowth + (1.0 - g_rand * ldtgData.a), 0.0, 1.0); 
        
        // We use the unique id's in pattern.b to discard if density is under the threshold
        // density is multiplied by the ldtg textures G channel to allow fine control
        if (furDensity * ldtgData.g * 1.02 <= pattern.b + 0.01) {
            discard;
        }

        // Workaround for issue https://github.com/godotengine/godot/issues/36669
        // Below two lines should work but they do not, so we use discard instead
        //ALPHA_SCISSOR = scissor_thresh;
        //ALPHA = pattern.r * ldtg_texture_data.r - pattern.r * ldtg_texture_data.r * pattern.g * shape_length_rand;
        // We discard the parts of mesh that does not make up the strand, we multiply
        // by ldtg texture R channel and the unique ids in pattern's G channel to allow
        // for randomized and controlled length
        if (scissor_thresh > pattern.r * ldtgData.r - pattern.r * ldtgData.r * pattern.g * furLengthRand) {
            discard;
        }
    }

    FragmentOut fout;
    float3x3 TBN = cotangent(fin.Normal, fin.WorldPos, fin.TexCoords);
    float3 tN = normalize(SAMPLE_TEX(normalMap, fin.TexCoords).xyz * 2 - 1) * normalScale;
    float3 N = normalize(mul(tN, TBN));
    float3 V = normalize(camData.camPos - fin.WorldPos);
    float4 albedo = SAMPLE_TEX(colorMap, fin.TexCoords);
    float4 ao = SAMPLE_TEX(aoMap, fin.TexCoords);
    float a = albedo.a * baseColor.a;

    float4 normalColor = lerp(shadowColor, baseColor, furLayer);

    float4 Lo = Float4(0.0f);
    float L_Dot = 0;
    float lightInstansity = 0;

    lightInstansity = getLightFinalIntensity(directLight);
    if (lightInstansity != 0) {
        float3 L = directLight.direction;
        float4 Lo_dir = Toon_Lo_DirectLight(directLight, N, V, normalColor, highlightColor,
            highlightCut, highlightCutSmooth);
        Lo = lerp(shadowColor * lightInstansity, Lo_dir, ShadowCalculation(depthMap, depthMapSampler,
            fin.lightSpacePos, N, L));
        L_Dot = dot(N, L);
    }

    for(int i = 0; i < pointLightCount; ++i) {
        float intensity = getLightFinalIntensity(pointLights[i]);
        if (intensity != 0) {
            float3 L = normalize(pointLights[i].pos - fin.WorldPos);
            float distance = length(pointLights[i].pos - fin.WorldPos);
            float attenuation = distance / pointLights[i].radius;
            attenuation = max(1 - attenuation * attenuation, 0);
            float3 radiance = pointLights[i].color * pointLights[i].intensity * attenuation;
            float4 Lo_point = Toon_Lo(N, V, L, radiance, normalColor,
                highlightColor, highlightCut, highlightCutSmooth);
            Lo += Lo_point;
            L_Dot = max(dot(N, L) * attenuation, L_Dot);
            lightInstansity += intensity * attenuation;
        }
    }
    
    Lo = smoothToon(Lo, shadowColor * lightInstansity, L_Dot, shadowCut, shadowCutSmooth);
    Lo = smoothToon(rimColor * lightInstansity, Lo, fresnelSchlick(dot(N, normalize(camData.camPos - fin.WorldPos)), 0.33f),
        rimCut, rimCutSmooth);

    float4 ambient = Toon_Ambient(albedo, ao.r);

    fout.FragColor = albedo * Lo + ambient;
    fout.FragColor.a = a;
    fout.FragColor *= overColor;
    //fout.ssnMask = float4(1);
    return fout;
}
