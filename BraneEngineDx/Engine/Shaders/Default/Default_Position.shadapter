#adapter name position
#vertex
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/MeshData_Def.hmat"

//#define mul(a, b) mul(b, a)

DefaultVertexOut MESH_MAIN
{
    DefaultVertexOut vout;
    vout.svPos = mul(float4(pos, 1.0), Transforms[ObjectIDs[instanceID]]);
    vout.svPos = float4(camData.pmat._12,
    camData.pmat._23, camData.pmat._34, 1.0);
    //vout.svPos = mul(camData.pmat, vout.svPos);
    return vout;
}
#vertex skeleton
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"

//#define mul(a, b) mul(b, a)

DefaultVertexOut SKELETON_MAIN
{
    DefaultVertexOut vout;
    vout.svPos = mul(mul(float4(pos, 1.0), getFinalMat(instanceID, weights, boneId)), camData.pmat);
    vout.svPos /= vout.svPos.w;
    return vout;
}
#vertex skeleton morph
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"
#include "../lib/MorphData_def.hmat"

//#define mul(a, b) mul(b, a)

float3 morphPos(in uint vertexID, in float3 pos)
{
    uint nMorph = morphData[0].x;
    uint base = vertexID * nMorph;
    float3 w = float3(0, 0, 0);
    for (uint i = 0; i < nMorph; i++) {
        w += morphData[(base + i) * 2 + 1].xyz * morphWeight[i];
    }
    return pos + w;
}

float3 morphNorm(in uint vertexID, in float3 norm)
{
    uint nMorph = morphData[0].x;
    uint base = vertexID * nMorph;
    float3 w = float3(0, 0, 0);
    for (uint i = 0; i < nMorph; i++) {
        w += morphData[(base + i) * 2 + 2].xyz * morphWeight[i];
    }
    return norm + w;
}

DefaultVertexOut SKELETON_MAIN
{
    float4 worldPos = mul(float4(morphPos(vertexID, pos), 1.0), getFinalMat(instanceID, weights, boneId));
    DefaultVertexOut vout;
    vout.svPos = mul(worldPos, camData.pmat);
    vout.svPos /= vout.svPos.w;
    return vout;
}