#adapter name outline
#vertex
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/MeshData_Def.hmat"

DEF_MAT_BEGIN
uniform float borderWidth;
uniform float refenceDistance;
uniform float4 baseColor;
DEF_MAT_END

DefaultVertexOut MESH_MAIN
{
    float4x4 fm = getFinalMat(ins[0]);
    float sca = 1;
    if (refenceDistance != 0) {
        float3 vec = mul(float4(pos, 1.0), fm).xyz - camData.camPos;
        float dist = dot(vec, camData.camDir);
        sca = dist / refenceDistance;
    }
    DefaultVertexOut vout;
    vout.svPos = mul(mul(float4(pos + borderWidth * sca * normalize(norm), 1.0), fm), camData.pmat);
    vout.LocalPos = pos;
    return vout;
}

#vertex skeleton
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"

DEF_MAT_BEGIN
uniform float borderWidth;
uniform float refenceDistance;
uniform float4 baseColor;
DEF_MAT_END

DefaultVertexOut SKELETON_MAIN
{
    float4x4 fm = getFinalMat(ins[0], weights, boneId);
    float sca = 1;
    if (refenceDistance != 0) {
        float3 vec = mul(float4(pos, 1.0), fm).xyz - camData.camPos;
        float dist = dot(vec, camData.camDir);
        sca = dist / refenceDistance;
    }
    DefaultVertexOut vout;
    vout.svPos = mul(mul(float4(pos + borderWidth * sca * normalize(norm), 1.0), fm), camData.pmat);
    vout.LocalPos = pos;
    return vout;
}

#vertex skeleton morph
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"
#include "../lib/MorphData_def.hmat"

DEF_MAT_BEGIN
uniform float borderWidth;
uniform float refenceDistance;
uniform float4 baseColor;
DEF_MAT_END

DefaultVertexOut SKELETON_MAIN
{
    uint vid = ins[1] + vertexID;
    float4x4 fm = getFinalMat(ins[0], weights, boneId);
    float3 mpos = morphPos(vid, pos);
    float3 mnorm = morphNorm(vid, norm);
    float sca = 1;
    if (refenceDistance != 0) {
        float3 vec = mul(float4(mpos, 1.0), fm).xyz - camData.camPos;
        float dist = dot(vec, camData.camDir);
        sca = dist / refenceDistance;
    }
    DefaultVertexOut vout;
    vout.svPos = mul(mul(float4(mpos + borderWidth * sca * normalize(mnorm), 1.0), fm), camData.pmat);
    vout.LocalPos = mpos;
    return vout;
}