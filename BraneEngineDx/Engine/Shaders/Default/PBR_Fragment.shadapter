#adapter name pbr_fragment
#fragment
#include "../lib/Light_Def.hmat"
#include "../lib/CameraData_Def.hmat"

DEF_MAT_BEGIN
uniform float4 baseColor;
uniform float metallic;
uniform float roughness;
uniform float ao;
uniform float normalScale;
uniform float emission;
DEF_MAT_END

DEF_TEX2D(colorMap, 0);
DEF_TEX2D(metallicMap, 1);
DEF_TEX2D(roughnessMap, 2);
DEF_TEX2D(aoMap, 3);
DEF_TEX2D(normalMap, 4);
DEF_TEX2D(emissionMap, 5);
DEF_TEX2D(depthMap, 6);

#include "../lib/PBR_Lib.hmat"
#include "../lib/Basic_FS_Lib.hmat"

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

FragmentOut DEFAULT_FS_MAIN
{
    FragmentOut fout;
    float3x3 TBN = cotangent(fin.Normal, fin.WorldPos, fin.TexCoords);
    float3 tN = normalize(SAMPLE_TEX(normalMap, fin.TexCoords).xyz * 2 - 1) * normalScale;
    float3 N = normalize(mul(tN, TBN));
    float3 V = normalize(camData.camPos - fin.WorldPos);
    float3 albedo = baseColor.rgb * SAMPLE_TEX(colorMap, fin.TexCoords).rgb;
    float alpha = baseColor.a * SAMPLE_TEX(colorMap, fin.TexCoords).a;
    float _roughness = roughness * SAMPLE_TEX(roughnessMap, fin.TexCoords).r;
    float _metallic = metallic * SAMPLE_TEX(metallicMap, fin.TexCoords).r;
    float _ao = ao * SAMPLE_TEX(aoMap, fin.TexCoords).r;

    // reflectance equation
    float3 Lo = Float3(0.0);

    if (directLight.intensity != 0) {
        Lo += PBR_Lo_DirectLight(directLight, N, V, albedo, _metallic, _roughness) *
            ShadowCalculation(depthMap, depthMapSampler, fin.WorldPos, fin.Normal, directLight);
    }

    for(int i = 0; i < pointLightCount; ++i) {
        if (pointLights[i].intensity != 0) {
            Lo += PBR_Lo_PointLight(pointLights[i], fin.WorldPos, N, V, albedo, _metallic, _roughness);
        }
    }

    // Combination
    float3 ambient = PBR_Ambient(albedo, _ao);
    float3 emissionColor = SAMPLE_TEX(emissionMap, fin.TexCoords).rgb;
    float3 color = ambient + Lo;

    color = PBR_ColorCorrection(color) + (emission * baseColor).rgb * emissionColor;

    fout.FragColor = float4(color, alpha);
    return fout;
}