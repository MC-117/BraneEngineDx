#adapter name default
#vertex
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/Light_Def.hmat"
#include "../lib/MeshData_Def.hmat"

DefaultVertexOut MESH_MAIN
{
    DefaultVertexOut vout;
    float4x4 fm = getFinalMat(objID);
    float4 _WorldPos = mul(float4(pos, 1.0), fm);
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.WorldPos = _WorldPos.xyz;
    vout.LocalPos = pos;
    vout.Normal = normalize(mul(norm, (float3x3)(fm)));
    vout.LocalNormal = norm;
    vout.lightSpacePos = mul(_WorldPos, directLight.lmat);
    vout.TexCoords = uv;
    vout.TexCoords.y = 1 - vout.TexCoords.y;
    vout.WorldScale = getWorldScale(fm);
    return vout;
}
#vertex skeleton
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/Light_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"

DefaultVertexOut SKELETON_MAIN
{
    DefaultVertexOut vout;
    float4x4 fm = getFinalMat(objID, weights, boneId);
    float4 _WorldPos = mul(float4(pos, 1.0), fm);
    vout.WorldPos = _WorldPos.xyz;
    vout.LocalPos = pos;
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.Normal = normalize(mul(norm, (float3x3)(fm)));
    vout.LocalNormal = norm;
    vout.lightSpacePos = mul(_WorldPos, directLight.lmat);
    vout.TexCoords = uv;
    vout.TexCoords.y = 1 - vout.TexCoords.y;
    vout.WorldScale = getWorldScale(fm);
    return vout;
}
#vertex skeleton morph
#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/Light_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"
#include "../lib/MorphData_def.hmat"

DefaultVertexOut SKELETON_MAIN
{
    DefaultVertexOut vout;
    float4x4 fm = getFinalMat(objID, weights, boneId);
    float4 _WorldPos = mul(float4(morphPos(vertexID, pos), 1.0), fm);
    vout.WorldPos = _WorldPos.xyz;
    vout.LocalPos = pos;
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.Normal = normalize(mul(morphNorm(vertexID, norm), (float3x3)(fm)));
    vout.LocalNormal = norm;
    vout.lightSpacePos = mul(_WorldPos, directLight.lmat);
    vout.TexCoords = uv;
    vout.TexCoords.y = 1 - vout.TexCoords.y;
    vout.WorldScale = getWorldScale(fm);
    return vout;
}