#include "Basic_FS_Lib.hmat"
#include "ScreenPass_Def.hmat"
#include "CameraData_Def.hmat"

#define REFLECTION_MASK 1

struct Surface
{
    float4 albedo;
    float3 WorldPos;
    float depth;
    float3 Normal;
    float roughness;
    float2 TexCoords;
    float metallic;
    float ao;
    uint matID;
    uint mask;
};

void outputSurface(in Surface surf, out float4 A, out float B, out float4 C, out float4 D, out int4 E)
{
    A = surf.albedo;
    B = surf.depth;
    C.xyz = surf.Normal;
    C.a = surf.roughness;
    D.xy = surf.TexCoords;
    D.z = surf.metallic;
    D.w = surf.ao;
    E.r = surf.matID >> 16;
    E.g = (surf.matID >> 8) & 0xFF;
    E.b = surf.matID & 0xFF;
    E.a = surf.mask;
}

#if defined(LIGHTING_SHADER_FEATURE)
#define SURFACE_MAIN DEFAULT_SCREEN_MAIN

Surface getSurface(in ScreenVertexOut fin)
{
    Surface surf;
    uint4 E = LOAD_TEX(gBufferE, int3(fin.UV * camData.viewSize, 0));
    uint matID = E.r << 16 | E.g << 8 | E.b;
    if (matID != materialID)
        discard;
    float4 A = SAMPLE_TEX(gBufferA, fin.UV);
    float B = SAMPLE_TEX(gBufferB, fin.UV);
    float4 C = SAMPLE_TEX(gBufferC, fin.UV);
    float4 D = SAMPLE_TEX(gBufferD, fin.UV);
    surf.albedo = A;
    surf.depth = B;
    surf.WorldPos = uvzPosToWorld(float3(fin.UV, surf.depth));
    surf.Normal = C.xyz;
    surf.roughness = C.a;
    surf.TexCoords = D.xy;
    surf.metallic = D.b;
    surf.ao = D.a;
    surf.matID = matID;
    surf.mask = E.a;
    return surf;
}
#else
#define SURFACE_MAIN DEFAULT_FS_MAIN

Surface getSurface(in DefaultVertexOut fin)
{
    Surface surf;
    surf.albedo = float4(1, 1, 1, 1);
    surf.WorldPos = fin.WorldPos;
    surf.depth = fin.svPos.z;
    surf.roughness = 0.5f;
    surf.Normal = fin.Normal;
    surf.metallic = 0.5f;
    surf.TexCoords = fin.TexCoords;
    surf.ao = 1.0f;
    surf.matID = materialID;
    surf.mask = 0;
    return surf;
}
#endif