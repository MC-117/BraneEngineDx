#include "Bindings_Def.hmat"

struct PointLight
{
    float3 pos;
    float intensity;
    float3 color;
    float radius;
};

struct DirectLight
{
    float4x4 worldToLightView;
    float4x4 viewToLightClip;
    float4x4 worldToLightClip;
    float3 direction;
    float intensity;
    float4 shadowBias;
    float3 color;
};

cbuffer DirectLightBuffer : register(DIRECT_LIGHT_BIND_INDEX)
{
    DirectLight directLight;
    uint pointLightCount;
};

StructuredBuffer<PointLight> pointLights : register(POINT_LIGHT_BIND_INDEX);

float3 getLightRadiance(in DirectLight light)
{
    return light.color * light.intensity;
}

float3 getLightRadiance(in PointLight light, in float3 worldPos)
{
    float distance = length(light.pos - worldPos);
    float attenuation = distance / light.radius;
    attenuation = max(1 - attenuation * attenuation, 0);
    return light.color * light.intensity * attenuation;
}

float rgbToIntensity(float3 rgb)
{
    return dot(rgb, float3(0.299f, 0.587f, 0.114f));
}

float getLightFinalIntensity(in DirectLight light)
{
    return rgbToIntensity(light.color) * light.intensity;
}

float getLightFinalIntensity(in PointLight light)
{
    return rgbToIntensity(light.color) * light.intensity;
}