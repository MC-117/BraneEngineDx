#include "Basic_FS_Lib.hmat"

float4 smoothToon(float4 base, float4 over, float value, float cut, float smoothValue)
{
    float hs = clamp(smoothValue, 0.0f, 1.0f) / 2.0f;
    return lerp(over, base, smoothstep(max(0.0f, cut - hs), min(1.0f, cut + hs), value));
}

float4 Toon_Lo(float3 N, float3 V, float3 L, float3 radiance, float4 baseColor, float4 highlightColor,
    float highlightCut, float highlightCutSmooth)
{
    float3 H = normalize(V + L);
    float4 Lo = lerp(baseColor, highlightColor, smoothToon(Float4(1.0f),
        Float4(0.0f), dot(N, H), highlightCut, highlightCutSmooth));
    Lo.rgb *= radiance;
    return Lo;
}

float4 Toon_Lo_DirectLight(in DirectLight directLight, float3 N, float3 V, float4 baseColor,
    float4 highlightColor, float highlightCut, float highlightCutSmooth)
{
    float3 L = normalize(directLight.direction);
    float3 radiance = getLightRadiance(directLight);
    return Toon_Lo(N, V, L, radiance, baseColor, highlightColor, highlightCut, highlightCutSmooth);
}

float4 Toon_Lo_PointLight(in PointLight pointLight, float3 worldPos, float3 N, float3 V,
    float4 baseColor, float4 highlightColor, float highlightCut, float highlightCutSmooth)
{
    float3 L = normalize(pointLight.pos - worldPos);
    float3 radiance = getLightRadiance(pointLight, worldPos);
    return Toon_Lo(N, V, L, radiance, baseColor, highlightColor, highlightCut, highlightCutSmooth);
}

float4 Toon_Ambient(float4 albedo, float ao)
{
    return Float4(0.03) * albedo * ao;
}