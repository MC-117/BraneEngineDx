#include "CameraData_Def.hmat"

float2 getHiZCellSize(float2 detailUVSize, float mipLevel)
{
    return detailUVSize * exp2(mipLevel);
}

float getHiZStepSize(float2 startUV, float curUV, float2 dirUV, float2 cellSize)
{
    float2 solution = abs((curUV + sign(dirUV) * cellSize - startUV) / dirUV);
    return length(solution);
}

int2 getHiZCellIndex(float2 curUV, float2 cellSize)
{
    return int2(curUV.x / cellSize.x, curUV.y / cellSize.y);
}

bool rayTraceHiZ_UVZ(Texture2D hiZMap, SamplerState hiZMapSampler,
    int hiZStartLevel, int hiZStopLevel, int hiZMaxStep, float4 hiZUVScale,
    float3 startUVZ, float3 dirUVZ, out float3 hitUVZ)
{
    bool hit = false;
    int mipLevel = hiZStartLevel;
    int stepNum = 0;
    float minZ;
    float stepSize;
    float3 curUVZ = startUVZ;
    while (mipLevel > hiZStopLevel && stepNum < hiZMaxStep) {
        float stepSize = length(getHiZCellSize(hiZUVScale.zw, mipLevel));
        float3 stepUVZ = dirUVZ * stepSize;
        float3 nextUVZ = curUVZ + stepUVZ;
        minZ = SAMPLE_TEX_LOD(hiZMap, nextUVZ.xy * hiZUVScale.xy, mipLevel);
        float deltaDepth = nextUVZ.z - minZ;
        if (deltaDepth > 0) {
            mipLevel--;
            hit = deltaDepth < stepUVZ.z;
            //hitUVZ -= dirUVZ / dirUVZ.z * deltaDepth * 0.001;
            hitUVZ = curUVZ;
        }
        else {
            mipLevel = min(mipLevel + 1, hiZStartLevel);
            curUVZ = nextUVZ;
        }
        stepNum++;
    }
    return hit;
}

bool rayTraceHiZ_View(Texture2D hiZMap, SamplerState hiZMapSampler,
    int hiZStartLevel, int hiZStopLevel, int hiZMaxStep, float4 hiZUVScale,
    float3 startViewPos, float3 viewDir, out float3 hitUVZ)
{
    bool hit = false;
    int mipLevel = hiZStartLevel;
    int stepNum = 0;
    float2 detailCellSize = float2(camData.aspect, 1) * 0.1;
    float3 curViewPos = startViewPos;
    while (mipLevel > hiZStopLevel && stepNum < hiZMaxStep) {
        float cellSize = length(getHiZCellSize(detailCellSize, mipLevel));
        float3 nextViewPos = curViewPos + viewDir * cellSize;
        float3 nextUVZ = viewPosToUVZ(nextViewPos);
        float depth = SAMPLE_TEX_LOD(hiZMap, nextUVZ.xy * hiZUVScale.xy, mipLevel);
        float deltaDepth = nextUVZ.z - depth;
        if (deltaDepth > 0) {
            mipLevel--;
            hit = deltaDepth < (1 / camData.zFar * 20);
            hitUVZ = nextUVZ;
        }
        else {
            mipLevel = min(mipLevel + 1, hiZStartLevel);
            curViewPos = nextViewPos;
            hit = false;
        }
        stepNum++;
    }
    return hit;
}