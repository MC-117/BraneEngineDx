#include "Const_Def.hmat"
#include "Bindings_Def.hmat"
#include "Basic_VS_Lib.hmat"
#include "CameraData_Def.hmat"
#include "Light_Def.hmat"
#define FS_DEF_OUT_BEGIN struct FragmentOut {
#define FS_DEF_OUT_END };
#define FS_DEF_OUT_COLOR(col, id) float4 col : SV_TARGET##id
#define FS_DEF_OUT_FLOAT(col, id) float col : SV_TARGET##id
#define FS_DEF_OUT_COUNT(col, id) uint4 col : SV_TARGET##id
#define FS_DEF_OUT_STENCIL(stencil) uint stencil : SV_StencilRef
#define FS_DEF_OUT_DEPTH(depth) float depth : SV_DEPTH
#define DEFAULT_FS_MAIN main(DefaultVertexOut fin)

float3x3 cotangent(float3 N, float3 p, float2 uv)
{
    float3 dp1 = ddx(p);
    float3 dp2 = ddy(p);
    float2 duv1 = ddx(uv);
    float2 duv2 = ddy(uv);

    float3 dp2perp = cross(N, dp2);
    float3 dp1perp = cross(dp1, N);
    float3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    float3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    float invmax = rsqrt(max(dot(T,T), dot(B,B)));
    return float3x3( T * invmax, B * invmax, N );
}

float fresnelSchlick(float cosTheta, float F0)
{
    return F0 + (1.0f - F0) * pow(max(abs(1.0f - max(cosTheta, 0.0f)), 0.0001f), 5.0f);
}

float fresnelSchlick(float cosTheta, float F0, float power)
{
    return F0 + (1.0f - F0) * pow(max(abs(1.0f - max(cosTheta, 0.0f)), 0.0001f), power);
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0 - F0) * pow(max(abs(1.0f - max(cosTheta, 0.0f)), 0.0001f), 5.0);
}

float3 fresnelSchlick(float cosTheta, float3 F0, float roughness)
{
    float r = 1.0 - roughness;
    return F0 + (max(float3(r, r, r), F0) - F0) * pow(max(abs(1.0f - max(cosTheta, 0.0f)), 0.0001f), 5.0);
}

float3 AOMultiBounce(float AO,float3 albedo)
{
	float3 a = 2.0404 * albedo - 0.3324;
	float3 b = -4.7951 * albedo + 0.6417;
	float3 c = 2.7552 * albedo + 0.6903;

	return max(AO, ((AO * a + b) * AO + c) * AO);
}

float2 getTexureSize(in Texture2D tex) {
    float2 size;
    tex.GetDimensions(size.x, size.y);
    return size;
}

float ShadowCalculation(in Texture2D depthMap, in SamplerState depthMapSampler, float3 worldPos, float3 N, in DirectLight directLight)
{
    float cos = dot(N, directLight.direction);
    float sin = sqrt(1 - cos * cos);
    //float sin = length(cross(N, directLight.direction));
    float depthScale = max(0.1,sin * rcp(cos));
    float normalScale = saturate(sin * rcp(cos * cos));

    float3 posWS = worldPos;
    posWS += directLight.direction * depthScale * directLight.shadowBias.x;
    posWS += N * normalScale * directLight.shadowBias.y;
    float4 posLS = mul(float4(posWS, 1.0f), directLight.worldToLightClip);

    float3 projCoords = posLS.xyz / posLS.w;

    if (projCoords.z >= 1.0) {
        return 1.0;
    }
    
    //projCoords = projCoords * 0.5 + 0.5;
    projCoords.xy = projCoords.xy * 0.5 + 0.5;

    float currentDepth = projCoords.z;
    
    float shadow = 0.0;
    
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float2 uv = projCoords.xy;
            uv.y = 1 - uv.y;
            float pcfDepth = GATHER_TEX(depthMap, uv, float2(x, y)).r; 
            shadow += currentDepth > pcfDepth ? 0.0 : 1.0;
        }
    }
    shadow /= 9.0;
    return shadow;
}

float2 sphereProj(float3 v)
{
    float3 zp = normalize(float3(v.xy, 0.0f));
    float s = v.y >= 0 ? (0.25 - zp.x * 0.25) : (0.75 + zp.x * 0.25);
    float tp = dot(zp, v);
    float t = v.z >= 0 ? (1 - tp * 0.5) : (tp * 0.5);
    return float2(s, t);
}

uint getLodLevels(in Texture2D tex)
{
    uint w, h, l;
    tex.GetDimensions(0, w, h, l);
    return l;
}

float luminance(float3 linearColor)
{
    return dot(linearColor, float3(0.299f, 0.587f, 0.114f));
}

float2 clipToUV(float2 clip)
{
    return clip * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);
}

float2 uvToClip(float2 UV)
{
    return UV * float2(2.0f, -2.0f) + float2(-1.0f, 1.0f);
}

float depthFromNDCToView(float depth)
{
    return camData.zNear * camData.zFar / (camData.zFar - depth * (camData.zFar - camData.zNear));
}

float3 clipToUVZ(float3 clip)
{
    return float3(clipToUV(clip.xy), clip.z);
}

float3 uvzToClip(float3 UVZ)
{
    return float3(uvToClip(UVZ.xy), UVZ.z);
}

float3 clipPosToView(float3 clipPos)
{
    float4 viewPos = mul(float4(clipPos, 1.0f), camData.promatInv);
    return viewPos.xyz / viewPos.w;
}

float3 viewPosToWorld(float3 viewPos)
{
    return mul(float4(viewPos, 1.0f), camData.vmatInv).xyz;
}

float3 viewPosToViewOrigin(float3 viewPos)
{
    return mul(float4(viewPos, 1.0f), camData.vomatInv).xyz;
}

float3 viewOriginPosToView(float3 viewOriginPos)
{
    return mul(float4(viewOriginPos, 1.0f), camData.vomat).xyz;
}

float3 uvzPosToWorld(float3 UVZ)
{
    float4 clipPos = float4(uvzToClip(UVZ), 1.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    viewPos /= viewPos.w;
    float4 worldPos = mul(viewPos, camData.vmatInv);
    return worldPos.xyz / worldPos.w;
}

float3 uvzPosToView(float3 UVZ)
{
    float4 clipPos = float4(uvzToClip(UVZ), 1.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    return viewPos.xyz / viewPos.w;
}

float3 uvzDirToWorld(float3 UVZ)
{
    float4 clipPos = float4(uvzToClip(UVZ), 0.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    viewPos /= viewPos.w;
    float4 worldPos = mul(viewPos, camData.vmatInv);
    return worldPos.xyz / worldPos.w;
}

float3 uvzDirToView(float3 UVZ)
{
    float4 clipPos = float4(normalize(uvzToClip(UVZ)), 0.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    return normalize(viewPos.xyz / viewPos.w);
}

float3 viewPosToClip(float3 viewPos)
{
    float4 clipPos = mul(float4(viewPos, 1), camData.promat);
    clipPos /= clipPos.w;
    return clipPos.xyz;
}

float3 viewPosToUVZ(float3 viewPos)
{
    float4 clipPos = mul(float4(viewPos, 1), camData.promat);
    clipPos /= clipPos.w;
    return clipToUVZ(clipPos.xyz);
}

float3 uvzPosToViewOrigin(float3 UVZ)
{
    UVZ.xy = UVZ.xy * float2(2.0f, -2.0f) +float2(-1.0f, 1.0f);
    float4 clipPos = float4(UVZ, 1.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    viewPos /= viewPos.w;
    float4 worldPos = mul(viewPos, camData.vomatInv);
    return worldPos.xyz;
}

float3 worldDirToView(float3 worldDir)
{
    return mul(float4(worldDir, 0), camData.vmat).xyz;
}

float3x3 getTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * TangentZ.x * TangentZ.x, Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * TangentZ.y * TangentZ.y, -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}