#include "Const_Def.hmat"
#include "Bindings_Def.hmat"
#include "Basic_VS_Lib.hmat"
#include "CameraData_Def.hmat"
#include "Light_Def.hmat"
#define FS_DEF_OUT_BEGIN struct FragmentOut {
#define FS_DEF_OUT_END };
#define FS_DEF_OUT_COLOR(col, id) float4 col : SV_TARGET##id
#define FS_DEF_OUT_FLOAT(col, id) float col : SV_TARGET##id
#define FS_DEF_OUT_COUNT(col, id) uint4 col : SV_TARGET##id
#define FS_DEF_OUT_STENCIL(stencil) uint stencil : SV_StencilRef
#define DEFAULT_FS_MAIN main(DefaultVertexOut fin)

float3x3 cotangent(float3 N, float3 p, float2 uv)
{
    float3 dp1 = ddx(p);
    float3 dp2 = ddy(p);
    float2 duv1 = ddx(uv);
    float2 duv2 = ddy(uv);

    float3 dp2perp = cross(dp2, N);
    float3 dp1perp = cross(N, dp1);
    float3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    float3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    float invmax = rsqrt(max(dot(T,T), dot(B,B)));
    return float3x3( T * invmax, B * invmax, N );
}

float fresnelSchlick(float cosTheta, float F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float3 fresnelSchlick(float cosTheta, float3 F0, float roughness)
{
    float r = 1.0 - roughness;
    return F0 + (max(float3(r, r, r), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

float2 getTexureSize(in Texture2D tex) {
    float2 size;
    tex.GetDimensions(size.x, size.y);
    return size;
}

float ShadowCalculation(in Texture2D depthMap, in SamplerState depthMapSampler, float3 worldPos, float3 N, in DirectLight directLight)
{
    float cos = dot(N, directLight.direction);
    float sin = sqrt(1 - cos * cos);
    //float sin = length(cross(N, directLight.direction));
    float depthScale = max(0.1,sin * rcp(cos));
    float normalScale = saturate(sin * rcp(cos * cos));

    float3 posWS = worldPos;
    posWS += directLight.direction * depthScale * directLight.shadowBias.x;
    posWS += N * normalScale * directLight.shadowBias.y;
    float4 posLS = mul(float4(posWS, 1.0f), directLight.lmat);

    float3 projCoords = posLS.xyz / posLS.w;

    if (projCoords.z >= 1.0) {
        return 1.0;
    }
    
    //projCoords = projCoords * 0.5 + 0.5;
    projCoords.xy = projCoords.xy * 0.5 + 0.5;

    float currentDepth = projCoords.z;
    
    float shadow = 0.0;
    
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float2 uv = projCoords.xy;
            uv.y = 1 - uv.y;
            float pcfDepth = GATHER_TEX(depthMap, uv, float2(x, y)).r; 
            shadow += currentDepth > pcfDepth ? 0.0 : 1.0;        
        }
    }
    shadow /= 9.0;
    return shadow;
}

float2 sphereProj(float3 v)
{
    float3 zp = normalize(float3(v.xy, 0.0f));
    float s = v.y >= 0 ? (0.25 - zp.x * 0.25) : (0.75 + zp.x * 0.25);
    float tp = dot(zp, v);
    float t = v.z >= 0 ? (1 - tp * 0.5) : (tp * 0.5);
    return float2(s, t);
}

uint getLodLevels(in Texture2D tex)
{
    uint w, h, l;
    tex.GetDimensions(0, w, h, l);
    return l;
}

float luminance(float3 linearColor)
{
    return dot(linearColor, float3(0.299f, 0.587f, 0.114f));
}