#include "Basic_FS_Lib.hmat"
#include "TransformData_Def.hmat"

#define VSM_DirectLight 0
#define VSM_LocalLight 1

// Used in the PageFlags
// NOTE: These flags are combined hierarchically using bitwise *OR*, so plan/negate them appropriately
// Marks pages that are allocated
#define VSM_ALLOCATED_FLAG			(1U << 0)
// Marks pages whose dynamic pages are uncached
#define VSM_DYNAMIC_UNCACHED_FLAG	(1U << 1)
// Marks pages whose static pages are uncached
#define VSM_STATIC_UNCACHED_FLAG	(1U << 2)
// Marks pages that are _not_ coarse (i.e., "normal" pages) that should include all geometry and conversely to mark geometry that is 
// "detail geometry" and which can skip rendering to coarse pages
#define VSM_DETAIL_GEOMETRY_FLAG	(1U << 3)

// Stored in the physical meta data flags and must be higher than the  VSM_*_FLAG
// The light was marked to not be cached (even though caching is enabled)
#define VSM_PHYSICAL_FLAG_VIEW_UNCACHED		(1U << 4)
#define VSM_PHYSICAL_FLAG_DIRTY				(1U << 5)


// bit-offset for storing another set of page flags used to track invalidation in the physical page metadata flags.
#define VSM_PHYSICAL_PAGE_INVALIDATION_FLAGS_SHIFT 8U

// NOTE: Bits for the hierarchical page flags are stored in the same uints as the regular mip tail,
// offset based on the Hmip level. For instance, at the 1x1 level the first 4 bits store the page
// flags for the coarsest mip, the next 4 bits store the hierarchical page flags for the second
// coarsest mip and so on.
// If the total bit count needs to change be sure it doesn't overlow the page flags for all Hmips
#define VSM_PAGE_FLAGS_BITS_PER_HMIP (4U)
#define VSM_PAGE_FLAGS_BITS_MASK     ((1U<<VSM_PAGE_FLAGS_BITS_PER_HMIP)-1U)

#define VSM_PAGE_SIZE 128U
#define VSM_LOG2_PAGE_SIZE ((uint)log2(VSM_PAGE_SIZE))
#define VSM_L0_PAGES 128U
#define VSM_LOG2_L0_PAGES  ((uint)log2(VSM_L0_PAGES))
#define VSM_MAX_MIPS (VSM_LOG2_L0_PAGES + 1)
#define VSM_MAX_SIZE (VSM_PAGE_SIZE * VSM_L0_PAGES)

#define VSM_PAGE_SIZE_MASK (VSM_PAGE_SIZE - 1)

#define NONE_VSMID -1
#define NONE_PAGEID 0xFFFFFFFFU

// Log2 2D dimension of thread group size, 2^4 == 16, 
#define LOG2_TILE_THREAD_GROUP_SIZE_XY 4U
#define TILE_THREAD_GROUP_SIZE_XY (1U << LOG2_TILE_THREAD_GROUP_SIZE_XY)

// Each thread takes 2x2 samples to work with, so tile size is 2x thread group size
#define LOG2_TILE_SIZE_XY (LOG2_TILE_THREAD_GROUP_SIZE_XY + 1U)

// Number of tiles (thread groups) in each dimension to cover the page
#define LOG2_TILES_PER_PAGE_XY ( VSM_LOG2_PAGE_SIZE - LOG2_TILE_SIZE_XY )
// Log2 1D tile count to cover the page  LOG2_TILES_PER_PAGE_XY * LOG2_TILES_PER_PAGE_XY
#define LOG2_TILES_PER_PAGE_1D ( 2U * LOG2_TILES_PER_PAGE_XY )
// 1D tile count to cover the page  
#define TILES_PER_PAGE_1D ( 1U << LOG2_TILES_PER_PAGE_1D )

#define TILES_PER_PAGE_XY_MASK ( ( 1U << LOG2_TILES_PER_PAGE_XY ) - 1U )
#define TILES_PER_PAGE_1D_MASK ( ( 1U << LOG2_TILES_PER_PAGE_1D ) - 1U )

uint calcLevelOffsets(uint Level)
{
	// VSM_LOG2_L0_PAGES is a power of two, so the footprint of each mip level MipSize_i=(VSM_LOG2_L0_PAGES>>i)^2 is also a power of two.
	// The binary representation of a mip size is just a single bit: 1 << log2(MipSize_i) = (1 << (2 * (VSM_LOG2_L0_PAGES - i))).
	
	// To calculate the offset we need to calculate a sum of consecutive mip sizes, which is equivalent to producing a bit pattern with one bit per level starting out at 
	// bitposition 2*VSM_LOG2_L0_PAGES and going down by 2 for every level.
	// E.g. VSM_LOG2_L0_PAGES=3
	//   Level 0: 0000000
	//   Level 1: 1000000
	//   Level 2: 1010000
	//   Level 3: 1010100
	//   Level 4: 1010101

	// To quickly produce a variable number of bits we just select a range of bits from the alternating bit sequence 0x55=0b01010101.
	uint NumBits = Level << 1;
	uint StartBit = (2 * VSM_LOG2_L0_PAGES + 2) - NumBits;
	uint Mask = ((1u << NumBits) - 1u) << StartBit;

	return 0x55555555u & Mask;
}

#define VSM_PAGE_TABLE_SIZE (calcLevelOffsets(VSM_MAX_MIPS))

uint calcLog2LevelPages(uint level)
{
	return VSM_LOG2_L0_PAGES - level;	// log2( VSM_LOG2_L0_PAGES >> level )
}

uint calcLevelPages(uint level)
{
	return 1u << calcLog2LevelPages(level);
}

uint calcLevelTexels(uint level)
{
	return uint(VSM_MAX_SIZE) >> level;
}

uint calcPageTableLevelOffset(uint vsmID, uint level)
{
	return vsmID * VSM_PAGE_TABLE_SIZE + calcLevelOffsets(level);
}

uint calcPageOffsetInLevel(uint level, uint2 pageAddress)
{
	return pageAddress.x + ( pageAddress.y << calcLog2LevelPages(level) );
}

uint calcPageOffset(uint vsmID, uint level, uint2 pageAddress)
{
	return calcPageTableLevelOffset(vsmID, level) + calcPageOffsetInLevel(level, pageAddress);
}

int calcMipLevel(int4 rect, int coveredPixels)
{
    const int maxPixelOffset = coveredPixels - 1;
	const int mipOffset = (int)log2((float)coveredPixels) - 1;

    int2 mipLevelXY = firstbithigh(rect.zw - rect.xy);

	int mipLevel = max(max(mipLevelXY.x, mipLevelXY.y) - mipOffset, 0);

	mipLevel += any((rect.zw >> mipLevel) - (rect.xy >> mipLevel) > maxPixelOffset) ? 1 : 0;

	return mipLevel;
}

struct VSMProjData
{
	float4x4 viewOriginToView;
	float4x4 viewToClip;
	float4x4 viewOriginToClip;
	float4x4 viewOriginToUV;

	float3 clipmapWorldOrigin;
	int resolutionLodBias;
	
	int2 clipmapOffset;
	int clipmapIndex;
	int clipmapLevel;

	float3 worldCenter;
	int clipmapCount;

	float3 worldDirection;
	int vsmID;

	int lightType;

	int uncached;

	int2 pad;
};

struct VSMInfo
{
	uint physPageRowMask;
	uint physPageRowShift;
	uint maxPhysPages;
	uint numShadowMapSlots;
	uint2 physPoolSize;
	uint2 physPoolPages;
	uint staticPageIndex;
	uint flag;
	uint2 pad;
};

cbuffer VSMInfoBuff
{
	VSMInfo vsmInfo;
};

bool doesUseStaticCacheMode()
{
	return vsmInfo.staticPageIndex == 1;
}

struct VSMPrevData
{
	int vsmID;
	int2 clipmapCornerOffsetDelta;
	int pad;
};

struct ScreenRect
{
    int4 pixels;
    int4 hzbTexels;
    int hzbLevel;
    int depth;
};

struct FrustumCullData
{
    float3 rectMin;
    bool visiable;
    float3 rectMax;
};

FrustumCullData frustumCullBoxOrtho(float3 center, float3 extent, float3 preWorldTranslation, float4x4 localToWorld, float4x4 viewOriginToClip)
{
    FrustumCullData data;
	float3 centerWorld = mul( float4( center, 1 ), localToWorld ).xyz + preWorldTranslation;
    float3 centerClip = mul( float4( centerWorld, 1 ), viewOriginToClip ).xyz;

	float3 clipDelta =
        abs( extent.x * mul(localToWorld[0], viewOriginToClip).xyz ) +
        abs( extent.y * mul(localToWorld[1], viewOriginToClip).xyz ) +
        abs( extent.z * mul(localToWorld[2], viewOriginToClip).xyz );

	data.rectMin = centerClip - clipDelta;
	data.rectMax = centerClip + clipDelta;

    data.visiable = data.rectMax.z > 0.0f && !any(
        (data.rectMax.xy < -1.0f) || (data.rectMin.xy > 1.0f));
    return data;
}

ScreenRect getScreenRect(int4 viewRect, FrustumCullData cullData, int coveredPixels)
{
    ScreenRect rect;
    rect.depth = cullData.rectMax.z;
    float4 rectUV = saturate(float4(cullData.rectMin.xy, cullData.rectMax.xy) *
        float2(0.5, -0.5).xyxy + 0.5).xwzy;
    float2 viewSize = viewRect.zw - viewRect.xy;
	rect.pixels = int4( rectUV * viewSize.xyxy + viewRect.xyxy +
        float4(0.5f, 0.5f, -0.5f, -0.5f));
	rect.pixels.xy = max(rect.pixels.xy, viewRect.xy);
	rect.pixels.zw = min(rect.pixels.zw, viewRect.zw - 1);

    rect.hzbTexels = int4(rect.pixels.xy, max(rect.pixels.xy, rect.pixels.zw));	
    rect.hzbTexels = rect.hzbTexels >> 1;

    rect.hzbLevel = calcMipLevel(rect.hzbTexels, coveredPixels);

	rect.hzbTexels >>= rect.hzbLevel;

	return rect;
}

float calcAbsClipmapLevel(VSMProjData baseProjData, float3 worldPos)
{
	float distToClipmapOrigin = length(worldPos - baseProjData.clipmapWorldOrigin);
	return log2(distToClipmapOrigin);
}

int calcClipmapLevel(VSMProjData baseProjData, float3 worldPos)
{
	float biasedLevel = calcAbsClipmapLevel(baseProjData, worldPos) + baseProjData.resolutionLodBias;
	return int(floor(biasedLevel));
}

struct VSMPhysPageMetaData
{
	uint flags;
	uint age;
	uint virtualPageOffset;
	uint vsmID;
};

struct VSMPhysPageRequest
{
	uint vsmID;
	uint globalPageOffset;
};

// Current page table format:
// NOTE: Some redundancy in flags and encoding, but we have spare bits for now
//   [0:9] PageAddress.x
//   [10:19] PageAddress.y
//   [20:25] LODOffset
//   [26:30] (currently unused)
//   [31] bAnyLODValid
struct VSMPhysPage
{
	uint2 physAddress;	// Physical page address X, Y
	uint lodOffset;			// 0 if page is mapped at this mip/clipmap level; 1 if mapped at next courser level, etc. [0..64)
	bool isAnyLODValid;		// Valid physical page mapped at some LOD level
	bool isThisLODValid;		// Valid page mapped at this specific level (equivalent to bAnyMipValid && LODOffset == 0)
};

#define VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG 0x8000000
#define VSM_PHYSICAL_PAGE_INVALID 0x00000000

uint vsmEncodePageTable(uint2 physAddress)
{
	return VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG | (physAddress.y << 10) | (physAddress.x);
}
uint vsmEncodePageTable(uint2 physAddress, uint lodOffset)
{
	return VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG | (lodOffset << 20) | (physAddress.y << 10) | (physAddress.x);
}

VSMPhysPage vsmDecodePageTable(uint value)
{
	VSMPhysPage res;
	res.physAddress = uint2(value & 0x3FF, (value >> 10) & 0x3FF);
	res.lodOffset = (value >> 20) & 0x3F;
	res.isAnyLODValid = (value & VSM_PHYSICAL_PAGE_ANY_MIP_VALID_FLAG) != 0;
	res.isThisLODValid = res.isAnyLODValid && res.lodOffset == 0;
	return res;
}

uint physPageAddressToIndex(uint2 physPageAddress)
{
	return (physPageAddress.y << vsmInfo.physPageRowShift) + physPageAddress.x;
}

uint2 physIndexToPageAddress(uint pageIndex)
{
	uint2 pageAddress;
	pageAddress.x = pageIndex  & vsmInfo.physPageRowMask;
	pageAddress.y = pageIndex >> vsmInfo.physPageRowShift;
	return pageAddress;
}

void calcPageAddressFromIndex(uint index, inout uint mipLevel, inout uint2 pageAddress)
{
	pageAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);

	// TODO: There is probably some clever math we can use for this instead;
	// See CalcLevelOffsets for a start
	for (mipLevel = 0; mipLevel < VSM_MAX_MIPS - 1; ++mipLevel)
	{
		if (index < calcLevelOffsets(mipLevel + 1))
		{
			break;
		}
	}
	const uint level0RowMask = ((1U << VSM_LOG2_L0_PAGES) - 1U);
	const uint offsetInLevel = index - calcLevelOffsets(mipLevel);
	pageAddress.x = offsetInLevel & (level0RowMask >> mipLevel);
	pageAddress.y = offsetInLevel >> (VSM_LOG2_L0_PAGES - mipLevel);
}

StructuredBuffer<uint> pageTable;
StructuredBuffer<uint> pageFlags;
StructuredBuffer<VSMPhysPageMetaData> physPageMetaData;
StructuredBuffer<VSMProjData> projData;
StructuredBuffer<uint> pageRequestFlags;
StructuredBuffer<uint4> pageRect;
StructuredBuffer<uint> freePhysPages;
StructuredBuffer<VSMPhysPageRequest> physPageAllocRequests;
StructuredBuffer<uint4> allocPageRect;

StructuredBuffer<VSMPrevData> vsmPrevData;
StructuredBuffer<uint> prevPageTable;
StructuredBuffer<uint> prevPageFlags;
StructuredBuffer<VSMPhysPageMetaData> prevPhysPageMetaData;
StructuredBuffer<VSMProjData> prevProjData;

RWStructuredBuffer<uint> outPageTable;
RWStructuredBuffer<uint> outPageFlags;
RWStructuredBuffer<VSMPhysPageMetaData> outPhysPageMetaData;
RWStructuredBuffer<VSMProjData> outProjData;
RWStructuredBuffer<uint> outPageRequestFlags;
RWStructuredBuffer<uint4> outPageRect;
RWStructuredBuffer<uint> outFreePhysPages;
RWStructuredBuffer<VSMPhysPageRequest> outPhysPageAllocRequests;
RWStructuredBuffer<uint4> outAllocPageRect;

Texture2DArray<uint> physPagePool;
RWTexture2DArray<uint> outPhysPagePool;

#if defined(DEBUG_SHADER_FEATURE)
DEF_TEX2D_AUTO(debugBuffer);
RWTexture2D<float4> outDebugBuffer;
#endif

VSMProjData getVSMProjData(uint vsmID)
{
    return projData[vsmID];
}

VSMPhysPage vsmGetPhysicalPage(uint pageOffset)
{
	return vsmDecodePageTable(pageTable[pageOffset]);
}

uint vsmGetPageFlags(uint vsmID, uint mipLevel, uint hMipLevel, uint2 pageAddress)
{
	uint mipToSample = mipLevel + hMipLevel;
	//uint hPageLevelOffset = CalcPageTableLevelOffset(vsmID, mipToSample);
	uint rawFlags = pageFlags[calcPageOffset(vsmID, mipToSample, pageAddress)];

	// Extract the flags for the given HMip
	uint hMipBitShift = VSM_PAGE_FLAGS_BITS_PER_HMIP * hMipLevel;
	return (rawFlags >> hMipBitShift) & VSM_PAGE_FLAGS_BITS_MASK;
}

uint4 getPageRect(ScreenRect rect)
{
	uint4 rectPages = uint4(rect.pixels) >> VSM_LOG2_PAGE_SIZE;

	return rectPages;
}

uint4 clipPageRect(uint4 rectPages, uint vsmID, uint mipLevel)
{
	uint4 rect = pageRect[vsmID * VSM_MAX_MIPS + mipLevel];

	return uint4(max(rectPages.xy, rect.xy), min(rectPages.zw, rect.zw));
}

uint4 getPageRect(ScreenRect rect, uint vsmID, uint mipLevel)
{
	return clipPageRect(getPageRect(rect), vsmID, mipLevel);
}

bool overlapsAnyValidPage(
	uint vsmID,
	uint mipLevel, 
	uint4 rectPages,
	uint flagMask = VSM_ALLOCATED_FLAG)
{
	if (any(rectPages.zw < rectPages.xy))
		return false;

	uint hMipLevel = calcMipLevel(rectPages, 2);

	rectPages >>= hMipLevel;
	for( uint y = rectPages.y; y <= rectPages.w; y++ )
	{
		for( uint x = rectPages.x; x <= rectPages.z; x++ )
		{
			uint pageFlags = vsmGetPageFlags(vsmID, mipLevel, hMipLevel, uint2(x, y));
			if ((pageFlags & flagMask) == flagMask)
			{
				return true;
			}
		}
	}

	return false;
}

float calcClipRadius(in TransformData data, float4x4 viewToClip)
{
    return data.localRadius * data.worldScale * viewToClip[0][0];
}

uint3 getTileOffset(uint gidx, Buffer<uint> pageIndexBuffer, inout VSMPhysPageMetaData outMetaData)
{
	const uint pageInputIndex = gidx >> LOG2_TILES_PER_PAGE_1D;
	uint pageIndex = pageIndexBuffer[pageInputIndex];

	int arrayIndex = 0;

	if (pageIndex >= vsmInfo.maxPhysPages)
	{
		// Request to clear the static page
		pageIndex -= vsmInfo.maxPhysPages;
		arrayIndex = 1;
	}

	outMetaData = physPageMetaData[pageIndex];

	// Each page has 1 << LOG2_TILES_PER_PAGE_XY groups (aka tiles) assigned to work on it.
	const uint localTileIndex = gidx & TILES_PER_PAGE_1D_MASK;
	// wrap to 2D tile coord
	const uint2 localTile = uint2(localTileIndex & TILES_PER_PAGE_XY_MASK, localTileIndex >> LOG2_TILES_PER_PAGE_XY);

	uint2 physPageAddress = physIndexToPageAddress(pageIndex);
	// Pixel address of tile region for this thread group.
	const uint2 tileOffset = (physPageAddress << uint2(VSM_LOG2_PAGE_SIZE, VSM_LOG2_PAGE_SIZE)) + (localTile << uint2(LOG2_TILE_SIZE_XY, LOG2_TILE_SIZE_XY));

	return uint3(tileOffset, arrayIndex);
}

uint3 getTileBasePos(uint2 tileID, uint gidx, Buffer<uint> pageIndexBuffer, inout VSMPhysPageMetaData outMetaData)
{
	// Pixel address of tile region for this thread group.
	const uint3 tileOffset = getTileOffset(gidx, pageIndexBuffer, outMetaData);
	// Pixel address of 2x2 region to sample for this thread.
	const uint2 basePos = tileOffset.xy + (tileID << 1u);

	return uint3(basePos, tileOffset.z);
}

uint3 getTileBasePos(uint2 tileID, uint gidx, Buffer<uint> pageIndexBuffer)
{
	VSMPhysPageMetaData TmpMetaData;
	return getTileBasePos(tileID, gidx, pageIndexBuffer, TmpMetaData);
}

void emitPageToProcess(RWBuffer<uint> outPageIndices, RWBuffer<uint> argCounter, uint pageIndex)
{
	int groupCount = 0;
    // Each page needs TILES_PER_PAGE_1D groups launched
    InterlockedAdd(argCounter[0], TILES_PER_PAGE_1D, groupCount);
    outPageIndices[groupCount >> LOG2_TILES_PER_PAGE_1D] = pageIndex;
}

struct VSMDrawInstanceInfo
{
	uint instanceID;
	uint indirectArgIndex;
};

struct ShadowViewInfo
{
	float4x4 viewOriginToClip;
	int4 viewRect;
	float3 worldCenter;
	uint vsmID;
	uint mipLevel;
	uint mipCount;
	uint flags;
	uint pad;
};

struct VSMPageInfo
{
	uint viewIndex;
	bool isStaticPage;
};

uint packVSMPageInfo(in VSMPageInfo info)
{
	return info.viewIndex | (info.isStaticPage ? (1 << 16) : 0);
}

VSMPageInfo unpackVSMPageInfo(uint value)
{
	VSMPageInfo info;
	info.viewIndex = value & 0xFFFFU;
	info.isStaticPage = (value & (1 << 16)) != 0;
	return info;
}

struct VisiableInstanceInfo
{
	uint pageInfo;
	VSMDrawInstanceInfo drawInfo;
};

struct DefaultVSMVertexOut
{
    float4x4 TransMat : TRANSMAT;
    float4 clipPos : SV_POSITION;
    float4 pageClipPos : PAGECLIP;
    float2 TexCoords : TEXCOORD;
    uint InstanceID : INSTANCEID;
    nointerpolation uint pageInfo : PAGEINFO;
};

StructuredBuffer<ShadowViewInfo> shadowViewInfos;
StructuredBuffer<uint> instanceIDs;
StructuredBuffer<uint> pageInfos;

void scaleBiasClipToPhysPage(ShadowViewInfo viewInfo, inout float4 clipPos, inout float4 pageClipPos)
{
	float2 vClip = clipPos.xy;
	float2 vUV = vClip * float2(0.5, -0.5) + 0.5 * clipPos.w;
	float2 vPixels = vUV * ( uint(VSM_MAX_SIZE) >> viewInfo.mipLevel );

	{
		float2 scale = exp2( -viewInfo.mipLevel );
		clipPos.xy *= scale;
		clipPos.xy += ( scale * float2(1,-1) + float2(-1,1) ) * clipPos.w;
	}

	{
		// Clip to allocated page rect
		uint4 rect = pageRect[ viewInfo.vsmID * VSM_MAX_MIPS + viewInfo.mipLevel ];

		float2 minClip =  vPixels - ( rect.xy + 0 ) * VSM_PAGE_SIZE * clipPos.w;
		float2 maxClip = -vPixels + ( rect.zw + 1 ) * VSM_PAGE_SIZE * clipPos.w;

		pageClipPos.xy = minClip;
		pageClipPos.zw = maxClip;
	}
}

void transformToVirtualPage(inout float4 clipPos, inout float4 pageClipPos, uint viewIndex, float3 worldPos)
{
    ShadowViewInfo viewInfo = shadowViewInfos[viewIndex];

	clipPos = mul( float4( worldPos - viewInfo.worldCenter, 1 ), viewInfo.viewOriginToClip );

	scaleBiasClipToPhysPage(viewInfo, clipPos, pageClipPos);
}

float vsmSamplePhysDepth(uint2 physTexelAddress)
{
	return asfloat(physPagePool.Load(uint4(physTexelAddress, 0, 0)));
}

struct VSMClipmapRelativeTransform
{
	float scale;
	float3 bias;
};

VSMClipmapRelativeTransform calcClipmapRelativeTransform(int clipmapId, int levelOffset)
{
	const VSMProjData projDataA = getVSMProjData(clipmapId);
	const VSMProjData projDataB = getVSMProjData(clipmapId + levelOffset);

	float2 offsetA = float2(projDataA.clipmapOffset);
	float2 offsetB = float2(projDataB.clipmapOffset);

	VSMClipmapRelativeTransform result;
	result.scale = levelOffset >= 0 ? rcp(float(1U << levelOffset)) : float(1U << (-levelOffset));
	result.bias.xy = 0.25f * (offsetB - result.scale * offsetA);

	// NOTE: relative Z bias can change when caching is enabled due to cached levels pinning the depth range
	float offsetZA = projDataA.viewToClip[3][2];
	float offsetZB = projDataB.viewToClip[3][2];
	result.bias.z = offsetZB - result.scale * offsetZA;

	return result;
}

// Transforms a virtual page in a given clipmap level to a page in the offset coarser level
// This offset must be positive or else the page would not be guaranteed to exist in the target level
// This is done entirely in integer math as well to avoid precision issues when looking up coarser fallback pages
uint2 calcClipmapOffsetLevelPage(uint2 basePage, int clipmapId, uint levelOffset)
{
	const VSMProjData projDataA = getVSMProjData(clipmapId);
	const VSMProjData projDataB = getVSMProjData(clipmapId + levelOffset);

	const int offsetScale = (VSM_L0_PAGES >> 2);
	int2 basePageOffset  = offsetScale * projDataA.clipmapOffset;
	int2 levelPageOffset = offsetScale * projDataB.clipmapOffset;
	return (basePage - basePageOffset + (levelPageOffset << levelOffset)) >> levelOffset;
}

struct VSMSample
{
	float depth;
	uint vsmID;
	uint mipLevel;
	uint2 virtualTexelAddress;
	float2 virtualTexelAddressFloat;
};

bool vsmSampleClipmap(int vsmID, float2 shadowUV, out VSMSample vsmSample)
{
	uint2 basePage = uint2(shadowUV * VSM_L0_PAGES);
	VSMPhysPage physPage = vsmGetPhysicalPage(calcPageOffset(vsmID, 0, basePage));
	if (physPage.isAnyLODValid) {	
		uint clipmapLevelOffset = physPage.lodOffset;
		int clipmapLevelId = vsmID + clipmapLevelOffset;

		vsmSample.virtualTexelAddressFloat = shadowUV * float(calcLevelTexels(0));
		vsmSample.virtualTexelAddress = uint2(vsmSample.virtualTexelAddressFloat);
		float depthLevelScale = 1.0f;
		float depthLevelBias = 0.0f;

		// Need to use a coarser clipmap to find a valid page
		if (clipmapLevelOffset > 0)
		{
			// Compute the virtual page in the offset level by integer math and clamp to the edges to avoid any precision
			// issues at borders that may cause us to miss the mapped page.
			uint2 vPage = calcClipmapOffsetLevelPage(basePage, vsmID, clipmapLevelOffset);
			uint2 virtualTexelAddressMin = vPage * VSM_PAGE_SIZE;
			uint2 virtualTexelAddressMax = virtualTexelAddressMin + (VSM_PAGE_SIZE - 1);

			VSMClipmapRelativeTransform transform = calcClipmapRelativeTransform(vsmID, clipmapLevelOffset);
			float2 clipmapUV = shadowUV * transform.scale + transform.bias.xy;
			depthLevelScale = transform.scale;
			depthLevelBias = transform.bias.z;

			// NOTE: Do not clamp the float address as it messes with optimal slope bias calculations
			vsmSample.virtualTexelAddress = clamp(uint2(clipmapUV * float(calcLevelTexels(0))), virtualTexelAddressMin, virtualTexelAddressMax);

			physPage = vsmGetPhysicalPage(calcPageOffset(clipmapLevelId, 0, vPage));
			vsmSample.vsmID = clipmapLevelId;
		}

		// NOTE: This really should be valid if we got here
		if (physPage.isAnyLODValid) {
			uint2 physTexelAddress = 
				physPage.physAddress * VSM_PAGE_SIZE +
				(vsmSample.virtualTexelAddress & VSM_PAGE_SIZE_MASK);

			// Convert depth into back into the original reference clipmap level range
			vsmSample.depth = (vsmSamplePhysDepth(physTexelAddress) - depthLevelBias) / depthLevelScale;
			vsmSample.mipLevel = 0;
			return true;
		}
	}
	return false;
}

float computeVSMOptimalSlopeBias(
	// Used to compare to the sampled SmSample.VirtualShadowMapId to adjust depth scale for clipmaps
	int requestVSMID,
	VSMSample vsmSample,
	float3 worldPos,
	float3 EstimatedGeoWorldNormal,
	bool bClamp = true)
{
	VSMProjData projData = getVSMProjData(vsmSample.vsmID);

	// Transform geometry world-space plane eq to shadow 'UV' texture space [0-1] ranges
	float4 NormalPlaneTranslatedWorld = float4(EstimatedGeoWorldNormal, -dot(EstimatedGeoWorldNormal, worldPos));
	float4 NormalPlaneUV = mul(NormalPlaneTranslatedWorld, projData.viewOriginToUV);

	float2 DepthSlopeUV = -NormalPlaneUV.xy / NormalPlaneUV.z;
	float MipLevelDim = float(calcLevelTexels(vsmSample.mipLevel));
	float2 TexelCenter = float2(vsmSample.virtualTexelAddress) + 0.5f;
	float2 TexelCenterOffset = TexelCenter - vsmSample.virtualTexelAddressFloat;
	float2 TexelCenterOffsetUV = TexelCenterOffset / MipLevelDim;
	// 2x factor due to lack of precision (probably)
	float OptimalSlopeBias = 2.0f * max(0.0f, dot(DepthSlopeUV, TexelCenterOffsetUV));
	
	// Clamp to avoid excessive degenerate slope biases causing flickering lit pixels
	OptimalSlopeBias = bClamp ? min(OptimalSlopeBias, abs(100.0f * projData.viewOriginToClip._33)) : OptimalSlopeBias;

	// Adjust depth scale if we sampled a different clipmap level
	// NOTE: Sampled clipmap should always be >= the requested one (coarser)
	// Do this after clamping to be consistent in world space
	OptimalSlopeBias *= float(1u << (vsmSample.vsmID - requestVSMID));

	return OptimalSlopeBias;
}

float vsmSampleDirectShadow(int vsmID, float3 worldPos, float3 worldNormal = float3(0, 0, 0), float normalBiasScale = 1.0f)
{
	if (vsmID != NONE_VSMID) {
		VSMProjData baseProjData = getVSMProjData(vsmID);
		const int firstClipmapLevel = baseProjData.clipmapLevel;
		const int clipmapLevel = calcClipmapLevel(baseProjData, worldPos);
		int clipmapIndex = max(0, clipmapLevel - firstClipmapLevel);

		if (clipmapIndex < baseProjData.clipmapCount) {
			int clipmapVSMID = vsmID + clipmapIndex;
			VSMProjData projData = getVSMProjData(clipmapVSMID);

			float3 viewOriginPos = worldPos - projData.worldCenter;
			float4 shadowUVz = mul(float4(viewOriginPos, 1.0f), projData.viewOriginToUV);

			VSMSample vsmSample;
			if (vsmSampleClipmap(clipmapVSMID, shadowUVz.xy, vsmSample)) {
				float optimalSlopeBias = all(worldNormal == float3(0, 0, 0)) ? 0 : computeVSMOptimalSlopeBias(clipmapVSMID, vsmSample, viewOriginPos, worldNormal);
				float biasedDepth = vsmSample.depth;// - optimalSlopeBias * normalBiasScale;
				return shadowUVz.z > biasedDepth ? 0.0f : 1.0f;
			}
		}
	}
	return 1.0f;
}

uint MurmurMix(uint Hash)
{
	Hash ^= Hash >> 16;
	Hash *= 0x85ebca6b;
	Hash ^= Hash >> 13;
	Hash *= 0xc2b2ae35;
	Hash ^= Hash >> 16;
	return Hash;
}

float3 IntToColor(uint Index)
{
	uint Hash = MurmurMix(Index);

	float3 Color = float3
	(
		(Hash >>  0) & 255,
		(Hash >>  8) & 255,
		(Hash >> 16) & 255
	);

	return Color * (1.0f / 255.0f);
}

void writeVSMDepth(DefaultVSMVertexOut fin)
{
	uint2 vAddress = (uint2)fin.clipPos.xy;
	float deviceZ = fin.clipPos.z;

	VSMPageInfo pageInfo = unpackVSMPageInfo(fin.pageInfo);

    ShadowViewInfo viewInfo = shadowViewInfos[pageInfo.viewIndex];
    VSMPhysPage page = vsmGetPhysicalPage(
        calcPageOffset(viewInfo.vsmID, viewInfo.mipLevel,
            vAddress >> VSM_LOG2_PAGE_SIZE));
    if (page.isThisLODValid) {
        uint2 pAddress = page.physAddress * VSM_PAGE_SIZE + (vAddress & VSM_PAGE_SIZE_MASK);
		uint arrayIndex = pageInfo.isStaticPage ? 1 : 0;
		InterlockedMin( outPhysPagePool[ uint3(pAddress, arrayIndex) ], asuint( deviceZ ) );
    }
}

#define DEFAULT_VSM_MAIN main(DefaultVSMVertexOut fin)