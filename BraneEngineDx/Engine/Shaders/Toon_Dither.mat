#order 2450
#material
Color baseColor: 255, 255, 255, 255
Texture colorMap: white
Color shadowColor: 150, 150, 150, 255
Color highlightColor: 50, 50, 50, 255
Color rimColor: 50, 50, 50, 255
Color overColor: 255, 255, 255, 255
Scalar shadowCut: 0.5
Scalar shadowCutSmooth: 0.0
Scalar highlightCut: 0.999
Scalar highlightCutSmooth: 0.0
Scalar rimCut: 0.8
Scalar rimCutSmooth: 0.0
Scalar normalScale: 1.0
Texture normalMap: black
Texture depthMap: white
#vertex use default
#fragment
#version 460 core

#include "lib/Light_Def.hmat"
#include "lib/CameraData_Def.hmat"

layout (location = 0) out float4 FragColor;
layout (location = 1) out float4 ssnMask;
in float3 Normal;
in float2 TexCoords;
in float4 lightSpacePos;
in float3 WorldPos;

uniform float4 baseColor;
uniform sampler2D colorMap;
uniform float4 shadowColor;
uniform float4 highlightColor;
uniform float4 rimColor;
uniform float4 overColor;
uniform float shadowCut;
uniform float shadowCutSmooth;
uniform float highlightCut;
uniform float highlightCutSmooth;
uniform float rimCut;
uniform float rimCutSmooth;
uniform float normalScale;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

const float4x4 thresholdMatrix = float4x4(
1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
);

#include "lib/Toon_Lib.hmat"

void main()
{
    float3 N = normalize(cotangent(Normal, WorldPos, TexCoords) * ((normalize(texture(normalMap, TexCoords) * 2 - 1)).xyz) * normalScale);
    float3 V = normalize(camData.camPos - WorldPos);
    float4 albedo = texture(colorMap, TexCoords);
    float a = albedo.a * baseColor.a;
    ifloat2 pos = ifloat2(int(gl_FragCoord.x), int(gl_FragCoord.y));
    if (a < thresholdMatrix[(pos.x % 4)][(pos.y % 4)])
        discard;
        
    float3 L = normalize(directLight.direction);
    float3 H = normalize(V + L);
    float4 ambience = mix(baseColor, highlightColor, smoothToon(float4(1.0f), float4(0.0f), dot(N, H), highlightCut, highlightCutSmooth));
    ambience = mix(shadowColor, ambience, ShadowCalculation(depthMap, lightSpacePos, N, L));
    ambience = smoothToon(ambience, shadowColor, dot(N, L), shadowCut, shadowCutSmooth);
    ambience = smoothToon(rimColor, ambience, fresnelSchlick(dot(N, normalize(camData.camPos - WorldPos)), 0.33f), rimCut, rimCutSmooth);
    FragColor = albedo * ambience;
    FragColor.a = a;
    FragColor *= overColor;
    ssnMask = float4(1);
}