#adapter name default
#vertex
#condition depth
#condition depth.vsm
#condition skeleton
#condition skeleton.depth
#condition skeleton.depth.vsm
#condition skeleton.morph
#condition skeleton.morph.depth
#condition skeleton.morph.depth.vsm
#include "../lib/TransformData_Def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/Light_Def.hmat"
#include "../lib/MeshData_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"
#include "../lib/MorphData_def.hmat"

#if defined(SKELETON_SHADER_FEATURE)
#define VERTEX_MAIN SKELETON_MAIN
#else
#define VERTEX_MAIN MESH_MAIN
#endif

#if defined(DEPTH_SHADER_FEATURE) && defined(VSM_SHADER_FEATURE)
#include "../lib/VirtualShadowMap_Def.hmat"
#define VERTEX_OUT DefaultVSMVertexOut
#else
#define VERTEX_OUT DefaultVertexOut
#endif

VERTEX_OUT VERTEX_MAIN
{
    VERTEX_OUT vout;

#if defined(DEPTH_SHADER_FEATURE) && defined(VSM_SHADER_FEATURE)
    uint globalInsID = ins[0] + localInsID;
    uint objID = instanceIDs[globalInsID];
#else
    uint objID = ins[0];
#endif
    uint vextexBase = ins[1];

#ifdef SKELETON_SHADER_FEATURE
    float4x4 fm = getFinalMat(objID, weights, boneId);
#else
    float4x4 fm = getFinalMat(objID);
#endif

#ifdef MORPH_SHADER_FEATURE
    uint vid = vextexBase + vertexID;
    float3 _pos = morphPos(vid, pos);
    float3 _norm = morphNorm(vid, norm);
#else
    float3 _pos = pos;
    float3 _norm = norm;
#endif

#if defined(DEPTH_SHADER_FEATURE) && defined(VSM_SHADER_FEATURE)
    float4 _WorldPos = mul(float4(_pos, 1.0), fm);
    vout.TransMat = fm;
    vout.TexCoords = uv;
    vout.TexCoords.y = 1 - vout.TexCoords.y;
    vout.InstanceID = objID;
    vout.pageInfo = pageInfos[globalInsID];

    VSMPageInfo pageInfo = unpackVSMPageInfo(vout.pageInfo);
    
    transformToVirtualPage(vout.clipPos, vout.pageClipPos, pageInfo.viewIndex, _WorldPos);
#elif defined(DEPTH_SHADER_FEATURE)
    float4 _WorldPos = mul(float4(_pos, 1.0), fm);
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.LocalPos = pos;
    vout.InstanceID = objID;
    vout.svClipDist = dot(camData.clipPlane, _WorldPos);
#else
    float4 _WorldPos = mul(float4(_pos, 1.0), fm);
    vout.TransMat = fm;
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.WorldPos = _WorldPos.xyz;
    vout.LocalPos = _pos;
    vout.Normal = normalize(mul(float4(_norm, 0.0), fm).xyz);
    vout.LocalNormal = _norm;
    vout.TexCoords = uv;
    vout.TexCoords.y = 1 - vout.TexCoords.y;
    vout.WorldScale = getWorldScale(fm);
    vout.InstanceID = objID;
    vout.svClipDist = dot(camData.clipPlane, _WorldPos);
#endif
    return vout;
}
#vertex terrain
#include "../lib/TransformData_Def.hmat"
#include "../lib/TerrainMeshData_Def.hmat"

DefaultTerrainVertexOut TERRAIN_MAIN
{
    DefaultTerrainVertexOut vout;
    uint objID = ins[0];
    float4x4 fm = getFinalMat(objID);
    vout.LocalPos = pos * terrainWidthPerGrid;
    float4 _WorldPos = mul(float4(vout.LocalPos, 1.0), fm);
    vout.TransMat = fm;
    vout.WorldPos = _WorldPos.xyz;
    vout.Normal = normalize(mul(float4(0.0, 0.0, 1.0, 0.0), fm).xyz);
    vout.TexCoords = uv;
    vout.WorldScale = getWorldScale(fm);
    vout.InstanceID = objID;
    vout.svClipDist = 0;

    return vout;
}
#vertex terrain custom1
#include "../lib/TransformData_Def.hmat"
#include "../lib/TerrainMeshData_Def.hmat"

DefaultTerrainVertexOut TERRAIN_MAIN
{
    DefaultTerrainVertexOut vout;
    uint objID = ins[0];
    float4x4 fm = getFinalMat(objID);
    vout.LocalPos = pos * terrainWidthPerGrid;
    float4 _WorldPos = mul(float4(vout.LocalPos, 1.0), fm);
    vout.TransMat = fm;
    vout.WorldPos = _WorldPos.xyz;
    vout.Normal = normalize(mul(float4(0.0, 0.0, 1.0, 0.0), fm).xyz);
    vout.TexCoords = uv;
    vout.WorldScale = getWorldScale(fm);
    vout.InstanceID = objID;
    vout.svClipDist = 0;

    return vout;
}
#tess_ctrl terrain
#include "../lib/Terrain_TessCtrl_Lib.hmat"

[domain("quad")]
[partitioning("fractional_even")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(4)]
[patchconstantfunc("terrainTessConstFunc")]
[maxtessfactor(MAX_TERRAIN_TESS_FACTOR)]
DefaultTerrainVertexOut main(InputPatch<DefaultTerrainVertexOut, 4> patch, uint i : SV_OutputControlPointID, uint patchId : SV_PrimitiveID)
{
    return patch[i];
}
#tess_eval terrain
#include "../lib/TransformData_Def.hmat"
#include "../lib/Terrain_TessCtrl_Lib.hmat"
#include "../lib/TerrainMeshData_Def.hmat"
#include "../lib/Light_Def.hmat"
#include "../lib/CameraData_Def.hmat"

Texture2D terrainMap : register(TERRAIN_MAP_BIND_INDEX);
SamplerState terrainMapSampler : register(TERRAIN_MAP_SAMPLER_INDEX);

[domain("quad")]
DefaultVertexOut main(DefaultTerrainPatchTess patchTess, float2 uv : SV_DomainLocation, const OutputPatch<DefaultTerrainVertexOut, 4> quad)
{
    DefaultVertexOut vout;

    float2 TexCoordsV1 = lerp(quad[1].TexCoords, quad[2].TexCoords, uv.x);
    float2 TexCoordsV2 = lerp(quad[0].TexCoords, quad[3].TexCoords, uv.x);
    vout.TexCoords = lerp(TexCoordsV1, TexCoordsV2, uv.y);

    float3 WorldPosV1 = lerp(quad[1].WorldPos, quad[2].WorldPos, uv.x);
    float3 WorldPosV2 = lerp(quad[0].WorldPos, quad[3].WorldPos, uv.x);
    vout.WorldPos = lerp(WorldPosV1, WorldPosV2, uv.y);

    float3 LocalPosV1 = lerp(quad[1].LocalPos, quad[2].LocalPos, uv.x);
    float3 LocalPosV2 = lerp(quad[0].LocalPos, quad[3].LocalPos, uv.x);
    vout.LocalPos = lerp(LocalPosV1, LocalPosV2, uv.y);

    float resolution = min(terrainGrid.x, terrainGrid.y) * MAX_TERRAIN_TESS_FACTOR;
    float mipCount = max(log2(resolution) - 1, 0);

    float tileSize = distance(WorldPosV1, WorldPosV2);
    float sphereD = tileSize * 2.0f;
    float scale = 1 - saturate(calcEdgeTessellationSphere(WorldPosV1, WorldPosV2, sphereD, terrainWidthPerTriangle) * (1 / MAX_TERRAIN_TESS_FACTOR));

    //float scale = 1 - saturate((patchTess.svInside[0] + patchTess.svInside[1]) * 0.5 * (1 / MAX_TERRAIN_TESS_FACTOR));
    float lodBias = scale * mipCount;
    float lod0 = lodBias, lod1 = max(lodBias - 1, 0);
    float4 terrainData0 = SAMPLE_TEX_LOD(terrainMap, vout.TexCoords, lod0);
    float4 terrainData1 = SAMPLE_TEX_LOD(terrainMap, vout.TexCoords, lod1);
    float4 terrainData = lerp(terrainData0, terrainData1, 0.5f);
    vout.LocalNormal = terrainData.xyz;
    vout.Normal = normalize(mul(float4(vout.LocalNormal, 0.0), quad[0].TransMat).xyz);

    float height = terrainData.w * terrainHeight;
    vout.LocalPos.z += height;
    vout.WorldPos += quad[0].Normal * height;

    vout.WorldScale = quad[0].WorldScale;
    
    vout.svPos = mul(float4(vout.WorldPos, 1.0), camData.pmat);
    vout.TransMat = quad[0].TransMat;
    vout.InstanceID = quad[0].InstanceID;
    vout.svClipDist = dot(camData.clipPlane, float4(vout.WorldPos, 1.0));

    return vout;
}