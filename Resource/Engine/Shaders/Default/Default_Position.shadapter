#adapter name position
#vertex
#include "../lib/TransformData_Def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/MeshData_Def.hmat"

DefaultVertexOut MESH_MAIN
{
    DefaultVertexOut vout;
    float4 _WorldPos = mul(float4(pos, 1.0), getFinalMat(ins[0]));
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.LocalPos = pos;
    vout.svClipDist = dot(camData.clipPlane, _WorldPos);
    return vout;
}
#vertex skeleton
#include "../lib/TransformData_Def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"

DefaultVertexOut SKELETON_MAIN
{
    DefaultVertexOut vout;
    float4 _WorldPos = mul(float4(pos, 1.0), getFinalMat(ins[0], weights, boneId));
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.LocalPos = pos;
    vout.InstanceID = ins[0];
    vout.svClipDist = dot(camData.clipPlane, _WorldPos);
    return vout;
}
#vertex skeleton morph
#include "../lib/TransformData_Def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/SkeletonMeshData_Def.hmat"
#include "../lib/MorphData_def.hmat"

DefaultVertexOut SKELETON_MAIN
{
    uint vid = ins[1] + vertexID;
    float4 _WorldPos = mul(float4(morphPos(vid, pos), 1.0), getFinalMat(ins[0], weights, boneId));
    DefaultVertexOut vout;
    vout.svPos = mul(_WorldPos, camData.pmat);
    vout.LocalPos = pos;
    vout.InstanceID = ins[0];
    vout.svClipDist = dot(camData.clipPlane, _WorldPos);
    return vout;
}
#vertex terrain
#include "../lib/TransformData_Def.hmat"
#include "../lib/TerrainMeshData_Def.hmat"

DefaultTerrainVertexOut TERRAIN_MAIN
{
    DefaultTerrainVertexOut vout;
    float4x4 fm = getFinalMat(ins[0]);
    vout.LocalPos = pos * terrainWidthPerGrid;
    float4 _WorldPos = mul(float4(vout.LocalPos, 1.0), fm);
    vout.TransMat = fm;
    vout.WorldPos = _WorldPos.xyz;
    vout.Normal = normalize(mul(float4(0.0, 0.0, 1.0, 0.0), fm).xyz);
    vout.TexCoords = uv;
    vout.WorldScale = getWorldScale(fm);
    vout.InstanceID = ins[0];
    vout.svClipDist = 0;
    return vout;
}
#tess_ctrl terrain
#include "../lib/Terrain_TessCtrl_Lib.hmat"

[domain("quad")]
[partitioning("fractional_even")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(4)]
[patchconstantfunc("terrainTessConstFunc")]
[maxtessfactor(MAX_TERRAIN_TESS_FACTOR)]
DefaultTerrainVertexOut main(InputPatch<DefaultTerrainVertexOut, 4> patch, uint i : SV_OutputControlPointID, uint patchId : SV_PrimitiveID)
{
    return patch[i];
}
#tess_eval terrain
#include "../lib/TransformData_Def.hmat"
#include "../lib/TerrainMeshData_Def.hmat"
#include "../lib/Light_Def.hmat"
#include "../lib/CameraData_Def.hmat"

Texture2D terrainMap : register(TERRAIN_MAP_BIND_INDEX);
SamplerState terrainMapSampler : register(TERRAIN_MAP_SAMPLER_INDEX);

[domain("quad")]
DefaultVertexOut main(DefaultTerrainPatchTess patchTess, float2 uv : SV_DomainLocation, const OutputPatch<DefaultTerrainVertexOut, 4> quad)
{
    DefaultVertexOut vout;

    float2 TexCoordsV1 = lerp(quad[1].TexCoords, quad[2].TexCoords, uv.x);
    float2 TexCoordsV2 = lerp(quad[0].TexCoords, quad[3].TexCoords, uv.x);
    vout.TexCoords = lerp(TexCoordsV1, TexCoordsV2, uv.y);

    float3 WorldPosV1 = lerp(quad[1].WorldPos, quad[2].WorldPos, uv.x);
    float3 WorldPosV2 = lerp(quad[0].WorldPos, quad[3].WorldPos, uv.x);
    vout.WorldPos = lerp(WorldPosV1, WorldPosV2, uv.y);

    float3 LocalPosV1 = lerp(quad[1].LocalPos, quad[2].LocalPos, uv.x);
    float3 LocalPosV2 = lerp(quad[0].LocalPos, quad[3].LocalPos, uv.x);
    vout.LocalPos = lerp(LocalPosV1, LocalPosV2, uv.y);

    float4 terrainData = SAMPLE_TEX_LOD(terrainMap, vout.TexCoords, 0);
    vout.LocalNormal = terrainData.xyz;
    vout.Normal = normalize(mul(float4(vout.LocalNormal, 0.0), quad[0].TransMat).xyz);

    float height = terrainData.w * terrainHeight;
    vout.LocalPos.z += height;
    vout.WorldPos = mul(float4(vout.LocalPos, 0.0), quad[0].TransMat).xyz;

    vout.WorldScale = quad[0].WorldScale;
    
    float4 worldPos = float4(vout.WorldPos, 1.0);
    vout.svPos = mul(worldPos, camData.pmat);
    
    vout.InstanceID = quad[0].InstanceID;
    vout.svClipDist = dot(camData.clipPlane, worldPos);

    return vout;
}