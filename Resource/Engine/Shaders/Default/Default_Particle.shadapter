#adapter name particle
#vertex particle
#include "../lib/ParticleData_Def.hmat"

PVOut main(uint instanceID : SV_InstanceID)
{
    PVOut pvout;
    pvout.index = instanceID;
    pvout.gParticle = Particles[pvout.index];
    return pvout;
}

#geometry particle
#include "../lib/ParticleData_Def.hmat"
#include "../lib/CameraData_Def.hmat"

DEF_MAT_BEGIN
uniform float uvScale;
DEF_MAT_END

float3 calH(uint i)
{
    if (i == 0 && Particles[i].extSca == 1)
        return float3(0, 0, 0);
    if (i == 0) {
        float3 v = Particles[i + 1].pos - Particles[i].pos;
        return normalize(cross(v, Particles[i].pos - camData.camPos)) * Particles[i].scale.x;
    }
    else if (Particles[i].extSca == 1) {
        float3 v = Particles[i].pos - Particles[i - 1].pos;
        return normalize(cross(v, Particles[i].pos - camData.camPos)) * Particles[i].scale.x;
    }
    else {
        float3 v0 = Particles[i].pos - Particles[i - 1].pos;
        float3 v1 = Particles[i + 1].pos - Particles[i].pos;
        float3 cv0 = (Particles[i - 1].pos + Particles[i].pos) / 2.0 - camData.camPos;
        float3 cv1 = (Particles[i].pos + Particles[i + 1].pos) / 2.0 - camData.camPos;
        float3 v = normalize(v0) + normalize(v1);
        float3 cv = normalize(cv0) + normalize(cv1);
        return normalize(cross(v, cv)) * Particles[i].scale.x;
    }
}

[maxvertexcount(4)]
void main(point PVOut gin[1], inout TriangleStream<PGOut> os)
{
    PGOut gout;
    gout.particle = gin[0].gParticle;
    uint index = gin[0].index;
    float3 v;
    float3 h0, h1;
    float3 pos0, pos1;

    if (gout.particle.type == 0) {
        v = camData.camUp * gout.particle.scale.y * 0.5;
        h0 = h1 = camData.camLeft * gout.particle.scale.x * 0.5;
        pos0 = gout.particle.pos - v;
        pos1 = gout.particle.pos + v;
    }
    else if (gout.particle.type == 1) {
        v = normalize(gout.particle.velocity) * gout.particle.scale.y * 0.5;
        h0 = h1 = normalize(cross(gout.particle.velocity, gout.particle.pos - camData.camPos)) * gout.particle.scale.x * 0.5;
        pos0 = gout.particle.pos - v;
        pos1 = gout.particle.pos + v;
    }
    else if (gout.particle.type == 2) {
        v = (gout.particle.extVec.xyz - gout.particle.pos) * gout.particle.scale.y * (gout.particle.maxLifetime == 0 ?
        1 : clamp((1 - gout.particle.lifetime / gout.particle.maxLifetime) / gout.particle.extVec.w, 0, 1));
        h0 = h1 = normalize(cross(v, gout.particle.pos - camData.camPos)) * gout.particle.scale.x * 0.5;
        pos0 = gout.particle.pos;
        pos1 = gout.particle.pos + v;
    }
    else if (gout.particle.type == 3) {
        if (Particles[index].extSca == 1)
            return;
        h0 = calH(index);
        h1 = calH(index + 1);
        pos0 = gout.particle.pos;
        pos1 = Particles[index + 1].pos;
    }
    else {
        v = camData.camUp * gout.particle.scale.y * 0.5;
        h0 = h1 = camData.camLeft * gout.particle.scale.x * 0.5;
        pos0 = gout.particle.pos - v;
        pos1 = gout.particle.pos + v;
    }

    float uvS = uvScale == 0 ? 1 : (uvScale * length(pos1 - pos0) / length(h0 + h1) * 2.0);

    float4 worldPos = float4(pos0 + h0, 1.0);
    gout.svPos = mul(worldPos, camData.pmat);
    gout.UV = float2(0, 0);
    gout.svClipDist = dot(camData.clipPlane, worldPos);
    os.Append(gout);

    worldPos = float4(pos0 - h0, 1.0);
    gout.svPos = mul(worldPos, camData.pmat);
    gout.UV = float2(1, 0);
    gout.svClipDist = dot(camData.clipPlane, worldPos);
    os.Append(gout);

    worldPos = float4(pos1 + h1, 1.0);
    gout.svPos = mul(worldPos, camData.pmat);
    gout.UV = float2(0, uvS);
    gout.svClipDist = dot(camData.clipPlane, worldPos);
    os.Append(gout);

    worldPos = float4(pos1 - h1, 1.0);
    gout.svPos = mul(worldPos, camData.pmat);
    gout.UV = float2(1, uvS);
    gout.svClipDist = dot(camData.clipPlane, worldPos);
    os.Append(gout);

    os.RestartStrip();
}