#material
Matrix projectMatrix: identity
Matrix clipMatrix: identity
Color baseColor: 255, 255, 255, 255
Color channelFlag: 255, 255, 255, 255
Texture mainTexture: white
Texture maskTexture: white

#vertex custom1
// SetupMask
#include "lib/Live2D_VS_Lib.hmat"
Live2DVertexOut LIVE2D_VS_MAIN
{
    Live2DVertexOut vout;
    vout.Position = mul(float4(pos, 1.0f), projectMatrix);
    vout.clipPosition = vout.Position;
    vout.uv.x = uv.x;
    vout.uv.y = 1.0 - uv.y;
    return vout;
}

#fragment custom1
// SetupMask
#include "lib/Live2D_FS_Lib.hmat"
float4 LIVE2D_FS_MAIN
{
    float isInside =
    step(baseColor.x, fin.clipPosition.x / fin.clipPosition.w)
    * step(baseColor.y, fin.clipPosition.y / fin.clipPosition.w)
    * step(fin.clipPosition.x / fin.clipPosition.w, baseColor.z)
    * step(fin.clipPosition.y / fin.clipPosition.w, baseColor.w);
    return channelFlag * SAMPLE_TEX(mainTexture, fin.uv).a * isInside;
}

#vertex custom2
// Normal
#include "lib/Live2D_VS_Lib.hmat"
Live2DVertexOut LIVE2D_VS_MAIN
{
    Live2DVertexOut vout;
    vout.Position = mul(float4(pos, 1.0f), projectMatrix);
    vout.uv.x = uv.x;
    vout.uv.y = 1.0 - uv.y;
    return vout;
}

#fragment custom2
// Normal
#include "lib/Live2D_FS_Lib.hmat"
float4 LIVE2D_FS_MAIN
{
    float4 color = SAMPLE_TEX(mainTexture, fin.uv) * baseColor;
    color.xyz *= color.w;
    return color;
}

#vertex custom2 custom3
// Normal Masked
#include "lib/Live2D_VS_Lib.hmat"
Live2DVertexOut LIVE2D_VS_MAIN
{
    Live2DVertexOut vout;
    vout.Position = mul(float4(pos, 1.0f), projectMatrix);
    vout.clipPosition = mul(float4(pos, 1.0f), clipMatrix);
    vout.uv.x = uv.x;
    vout.uv.y = 1.0 - uv.y;
    return vout;
}

#fragment custom2 custom3
// Normal Masked
#include "lib/Live2D_FS_Lib.hmat"
float4 LIVE2D_FS_MAIN
{
    float4 color = SAMPLE_TEX(mainTexture, fin.uv) * baseColor;
    color.xyz *= color.w;
    float4 clipMask = (1.0 - SAMPLE_TEX(maskTexture, fin.clipPosition.xy / fin.clipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    color = color * maskVal;
    return color;
}

#vertex custom2 custom5
// Normal [PremultipliedAlpha]
#include "lib/Live2D_VS_Lib.hmat"
Live2DVertexOut LIVE2D_VS_MAIN
{
    Live2DVertexOut vout;
    vout.Position = mul(float4(pos, 1.0f), projectMatrix);
    vout.uv.x = uv.x;
    vout.uv.y = 1.0 - uv.y;
    return vout;
}

#fragment custom2 custom5
// Normal PremultipliedAlpha
#include "lib/Live2D_FS_Lib.hmat"
float4 LIVE2D_FS_MAIN
{
    float4 color = SAMPLE_TEX(mainTexture, fin.uv) * baseColor;
    return color;
}

#vertex custom2 custom3 custom4
// Normal Masked [Inverted]
#include "lib/Live2D_VS_Lib.hmat"
Live2DVertexOut LIVE2D_VS_MAIN
{
    Live2DVertexOut vout;
    vout.Position = mul(float4(pos, 1.0f), projectMatrix);
    vout.clipPosition = mul(float4(pos, 1.0f), clipMatrix);
    vout.uv.x = uv.x;
    vout.uv.y = 1.0 - uv.y;
    return vout;
}

#fragment custom2 custom3 custom4
// Normal Masked Inverted
#include "lib/Live2D_FS_Lib.hmat"
float4 LIVE2D_FS_MAIN
{
    float4 color = SAMPLE_TEX(mainTexture, fin.uv) * baseColor;
    color.xyz *= color.w;
    float4 clipMask = (1.0 - SAMPLE_TEX(maskTexture, fin.clipPosition.xy / fin.clipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    color = color * (1.0 - maskVal);
    return color;
}

#vertex custom2 custom3 custom5
// Normal Masked [PremultipliedAlpha]
#include "lib/Live2D_VS_Lib.hmat"
Live2DVertexOut LIVE2D_VS_MAIN
{
    Live2DVertexOut vout;
    vout.Position = mul(float4(pos, 1.0f), projectMatrix);
    vout.clipPosition = mul(float4(pos, 1.0f), clipMatrix);
    vout.uv.x = uv.x;
    vout.uv.y = 1.0 - uv.y;
    return vout;
}

#fragment custom2 custom3 custom5
// Normal Masked PremultipliedAlpha
#include "lib/Live2D_FS_Lib.hmat"
float4 LIVE2D_FS_MAIN
{
    float4 color = SAMPLE_TEX(mainTexture, fin.uv) * baseColor;
    float4 clipMask = (1.0 - SAMPLE_TEX(maskTexture, fin.clipPosition.xy / fin.clipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    color = color * maskVal;
    return color;
}

#vertex custom2 custom3 custom4 custom5
// Normal Masked [Inverted] [PremultipliedAlpha]
#include "lib/Live2D_VS_Lib.hmat"
Live2DVertexOut LIVE2D_VS_MAIN
{
    Live2DVertexOut vout;
    vout.Position = mul(float4(pos, 1.0f), projectMatrix);
    vout.clipPosition = mul(float4(pos, 1.0f), clipMatrix);
    vout.uv.x = uv.x;
    vout.uv.y = 1.0 - uv.y;
    return vout;
}

#fragment custom2 custom3 custom4 custom5
// Normal Masked Inverted PremultipliedAlpha
#include "lib/Live2D_FS_Lib.hmat"
float4 LIVE2D_FS_MAIN
{
    float4 color = SAMPLE_TEX(mainTexture, fin.uv) * baseColor;
    float4 clipMask = (1.0 - SAMPLE_TEX(maskTexture, fin.clipPosition.xy / fin.clipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    color = color * (1.0 - maskVal);
    return color;
}