struct FrustumCullData
{
    float3 rectMin;
    bool visiable;
    float3 rectMax;
};

FrustumCullData frustumCullBoxOrtho(float3 center, float3 extent, float3 preWorldTranslation, float4x4 localToWorld, float4x4 viewOriginToClip)
{
    FrustumCullData data;
	float3 centerWorld = mul( float4( center, 1 ), localToWorld ).xyz + preWorldTranslation;
    float3 centerClip = mul( float4( centerWorld, 1 ), viewOriginToClip ).xyz;

	float3 clipDelta =
        abs( extent.x * mul(localToWorld[0], viewOriginToClip).xyz ) +
        abs( extent.y * mul(localToWorld[1], viewOriginToClip).xyz ) +
        abs( extent.z * mul(localToWorld[2], viewOriginToClip).xyz );

	data.rectMin = centerClip - clipDelta;
	data.rectMax = centerClip + clipDelta;

    data.visiable = data.rectMax.z > 0.0f && !any(
        (data.rectMax.xy < -1.0f) || (data.rectMin.xy > 1.0f));
    return data;
}

FrustumCullData frustumCullBoxPersp(float3 center, float3 extent, float3 preWorldTranslation, float4x4 localToWorld, float4x4 viewOriginToClip)
{
    FrustumCullData data;

    float4  DX = (2.0f * extent.x) * mul(localToWorld[0], viewOriginToClip);
    float4  DY = (2.0f * extent.y) * mul(localToWorld[1], viewOriginToClip);

	float   MinW = 1.0f;
	float	MaxW = -1.0f;
    float4  PlanesMin = 1.0f;

	data.rectMin = float3(1, 1, 1);
	data.rectMax = float3(-1, -1, -1);

	#define min3(a, b, c) min(min(a, b), c)
	#define max3(a, b, c) max(max(a, b), c)

	// To discourage the compiler from overlapping the entire calculation, which uses an excessive number of VGPRs, the evaluation is split into 4 isolated passes with two corners per pass.
	// There seems to be no additional benefit from evaluating just one corner per pass and it prevents the use of fast min3/max3 intrinsics.

    #define EVAL_POINTS(PC0, PC1) \
        MinW            = min3(MinW, PC0.w, PC1.w); \
        MaxW            = max3(MaxW, PC0.w, PC1.w); \
        PlanesMin       = min3(PlanesMin, float4(PC0.xy, -PC0.xy) - PC0.w, float4(PC1.xy, -PC1.xy) - PC1.w); \
        float3 PS0      = PC0.xyz / PC0.w; \
        float3 PS1      = PC1.xyz / PC1.w; \
        data.rectMin    = min3(data.rectMin, PS0, PS1); \
        data.rectMax    = max3(data.rectMax, PS0, PS1);

    float4 PC000, PC100;
	[isolate]
    {
        float4 DZ = (2.0f * extent.z) * mul(localToWorld[2], viewOriginToClip);
        PC000 = mul(mul(float4(center - extent, 1.0), localToWorld) +
			float4(preWorldTranslation, 0.0f), viewOriginToClip);
        PC100 = PC000 + DZ;
        EVAL_POINTS(PC000, PC100);
    }

    float4 PC001, PC101;
	[isolate]
    {
        PC001 = PC000 + DX;
        PC101 = PC100 + DX;
        EVAL_POINTS(PC001, PC101);
    }

    float4 PC011, PC111;
	[isolate]
    {
        PC011 = PC001 + DY;
        PC111 = PC101 + DY;
        EVAL_POINTS(PC011, PC111);
    }

    float4 PC010, PC110;
	[isolate]
    {
        PC010 = PC011 - DX;
        PC110 = PC111 - DX;
        EVAL_POINTS(PC010, PC110);
    }

    #undef EVAL_POINTS
    #undef min3
    #undef max3

	data.visiable = data.rectMax.z > 0; // Far clip

	// Near clip
	if (MinW <= 0.0f && MaxW > 0.0f)
	{
		data.visiable = true;
		data.rectMin = float3(-1, -1, -1);
		data.rectMax = float3( 1, 1, 1);
	}
	else
	{
		data.visiable = MaxW > 0.0 && data.visiable;
	}

	const bool isFrustumCull = any(PlanesMin > 0.0f);
	data.visiable = data.visiable && !isFrustumCull;

    return data;
}

FrustumCullData frustumCullBox(float3 center, float3 extent, float3 preWorldTranslation, float4x4 localToWorld, float4x4 viewOriginToClip, bool isOrtho)
{
	if (isOrtho) {
		return frustumCullBoxOrtho(center, extent, preWorldTranslation, localToWorld, viewOriginToClip);
	}
	else {
		return frustumCullBoxPersp(center, extent, preWorldTranslation, localToWorld, viewOriginToClip);
	}
}