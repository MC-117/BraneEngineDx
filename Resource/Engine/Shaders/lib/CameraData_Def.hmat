#include "Bindings_Def.hmat"

struct CameraData
{
    float4x4 pmat;
    float4x4 promat;
    float4x4 promatInv;
    float4x4 vmat;
    float4x4 vmatInv;
    float4x4 vomat;
    float4x4 vomatInv;
    float3 camPos;
    float zNear;
    float3 camDir;
    float zFar;
    float3 camUp;
    float fovy;
    float3 camLeft;
    float aspect;
    float4 clipPlane;
    float2 viewSize;
	float distance;
	int flags;
};

cbuffer CameraDataBuf : register(CAM_BIND_INDEX)
{
    CameraData camData;
    uint3 probeGridSize;
	uint probeGridPixelSizeShift;
	float3 probeGridZParams;
	uint probeByteWidth;
    uint probeCount;
    uint probeGridCellCount;
    uint probeMaxCountPerCell;
    uint probeMaxLinkListLength;
    int debugProbeIndex;
    int3 probePad;
};

float2 svPosToUV(float4 svPos)
{
    return svPos.xy / camData.viewSize;
}

float2 clipToUV(float2 clip)
{
    return clip * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);
}

float2 uvToClip(float2 UV)
{
    return UV * float2(2.0f, -2.0f) + float2(-1.0f, 1.0f);
}

float depthFromNDCToView(float depth)
{
    return camData.zNear * camData.zFar / (camData.zNear + depth * (camData.zFar - camData.zNear));
}

float depthFromViewToNDC(float depth)
{
    return (camData.zNear * camData.zFar / depth - camData.zNear) / (camData.zFar - camData.zNear);
}

float3 clipToUVZ(float3 clip)
{
    return float3(clipToUV(clip.xy), clip.z);
}

float3 uvzToClip(float3 UVZ)
{
    return float3(uvToClip(UVZ.xy), UVZ.z);
}

float3 clipPosToView(float3 clipPos)
{
    float4 viewPos = mul(float4(clipPos, 1.0f), camData.promatInv);
    return viewPos.xyz / viewPos.w;
}

float3 viewPosToWorld(float3 viewPos)
{
    return mul(float4(viewPos, 1.0f), camData.vmatInv).xyz;
}

float3 viewPosToViewOrigin(float3 viewPos)
{
    return mul(float4(viewPos, 1.0f), camData.vomatInv).xyz;
}

float3 viewOriginPosToView(float3 viewOriginPos)
{
    return mul(float4(viewOriginPos, 1.0f), camData.vomat).xyz;
}

float3 viewOriginPosToClip(float3 viewOriginPos)
{
    float4 viewPos = mul(float4(viewOriginPos, 1.0f), camData.vomat);
    float4 clipPos = mul(viewPos, camData.promat);
    clipPos /= clipPos.w;
    return clipPos.xyz;
}

float3 viewOriginDirToClip(float3 viewOriginDir)
{
    float4 viewPos = mul(float4(viewOriginDir, 0.0f), camData.vomat);
    float4 clipPos = mul(viewPos, camData.promat);
    clipPos /= clipPos.w;
    return clipPos.xyz;
}

float3 uvzPosToWorld(float3 UVZ)
{
    float4 clipPos = float4(uvzToClip(UVZ), 1.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    viewPos /= viewPos.w;
    float4 worldPos = mul(viewPos, camData.vmatInv);
    return worldPos.xyz / worldPos.w;
}

float3 uvzPosToView(float3 UVZ)
{
    float4 clipPos = float4(uvzToClip(UVZ), 1.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    return viewPos.xyz / viewPos.w;
}

float3 uvzDirToWorld(float3 UVZ)
{
    float4 clipPos = float4(uvzToClip(UVZ), 0.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    viewPos /= viewPos.w;
    float4 worldPos = mul(viewPos, camData.vmatInv);
    return worldPos.xyz / worldPos.w;
}

float3 uvzDirToView(float3 UVZ)
{
    float4 clipPos = float4(normalize(uvzToClip(UVZ)), 0.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    return normalize(viewPos.xyz / viewPos.w);
}

float3 viewPosToClip(float3 viewPos)
{
    float4 clipPos = mul(float4(viewPos, 1), camData.promat);
    clipPos /= clipPos.w;
    return clipPos.xyz;
}

float3 viewPosToUVZ(float3 viewPos)
{
    float4 clipPos = mul(float4(viewPos, 1), camData.promat);
    clipPos /= clipPos.w;
    return clipToUVZ(clipPos.xyz);
}

float3 viewOriginPosToUVZ(float3 viewOriginPos)
{
    float4 viewPos = mul(float4(viewOriginPos, 1.0f), camData.vomat);
    float4 clipPos = mul(viewPos, camData.promat);
    clipPos /= clipPos.w;
    return clipToUVZ(clipPos.xyz);
}

float3 viewOriginDirToUVZ(float3 viewOriginDir)
{
    float4 viewPos = mul(float4(viewOriginDir, 0.0f), camData.vomat);
    float4 clipPos = mul(viewPos, camData.promat);
    clipPos /= clipPos.w;
    return clipToUVZ(clipPos.xyz);
}

float3 uvzPosToViewOrigin(float3 UVZ)
{
    UVZ.xy = UVZ.xy * float2(2.0f, -2.0f) +float2(-1.0f, 1.0f);
    float4 clipPos = float4(UVZ, 1.0f);
    float4 viewPos = mul(clipPos, camData.promatInv);
    viewPos /= viewPos.w;
    float4 worldPos = mul(viewPos, camData.vomatInv);
    return worldPos.xyz;
}

float3 worldPosToView(float3 worldPos)
{
    return mul(float4(worldPos, 1), camData.vmat).xyz;
}

float3 worldDirToView(float3 worldDir)
{
    return mul(float4(worldDir, 0), camData.vmat).xyz;
}