struct DebugPoint
{
    float3 pos;
    float3 color;
};

struct DebugPointVertexOut
{
    float4 svPos : SV_POSITION;
    float3 color : COLOR;
};

#define DEBUG_NONE_FLAG 0
#define DEBUG_Allocated_FLAG 1
#define DEBUG_PERSISTENT_FLAG 2
#define DEBUG_FLAG_SHIFT 24
#define DEBUG_INDEX_MASK 0xFFFFFF
#define DEBUG_INDEX_NONE 0xFFFFFFFF

StructuredBuffer<DebugPoint> debugLines;
Buffer<uint> debugFlags;

RWStructuredBuffer<DebugPoint> outDebugLines;
RWBuffer<uint> outDebugFlags;

struct DebugPointTable
{
    uint flags;
    uint index;
};

DebugPointTable unpackDebugPointTable(uint code)
{
    DebugPointTable table;
    table.flags = code >> DEBUG_FLAG_SHIFT;
    table.index = code & DEBUG_INDEX_MASK;
    return table;
}

uint packDebugPointTable(DebugPointTable table)
{
    return (table.flags << DEBUG_FLAG_SHIFT) | table.index;
}

uint debugAllocatePoints(uint count)
{
    uint lineIndex = 0;
    InterlockedAdd(outDebugFlags[0], count, lineIndex);
    lineIndex++;
    uint maxSize;
    outDebugFlags.GetDimensions(maxSize);
    return (lineIndex + count) <= maxSize ? lineIndex : DEBUG_INDEX_NONE;
}

void debugSubmitLine(uint lineIndex, float3 p0, float3 p1, float3 color, uint flags)
{
    DebugPointTable pointTable0 = unpackDebugPointTable(outDebugFlags[lineIndex]);
    DebugPointTable pointTable1 = unpackDebugPointTable(outDebugFlags[lineIndex + 1]);
    pointTable0.flags = DEBUG_Allocated_FLAG | flags;
    pointTable1.flags = DEBUG_Allocated_FLAG | flags;
    outDebugFlags[lineIndex] = packDebugPointTable(pointTable0);
    outDebugFlags[lineIndex + 1] = packDebugPointTable(pointTable1);

    DebugPoint p;
    p.color = color;
    p.pos = p0;
    outDebugLines[pointTable0.index] = p;
    p.pos = p1;
    outDebugLines[pointTable1.index] = p;
}

void debugSubmitCube(uint lineIndex, float3 p[8], float3 color, uint flags)
{
    debugSubmitLine(lineIndex +  0, p[0], p[1], color, flags);
    debugSubmitLine(lineIndex +  2, p[1], p[2], color, flags);
    debugSubmitLine(lineIndex +  4, p[2], p[3], color, flags);
    debugSubmitLine(lineIndex +  6, p[3], p[0], color, flags);
    debugSubmitLine(lineIndex +  8, p[4], p[5], color, flags);
    debugSubmitLine(lineIndex + 10, p[5], p[6], color, flags);
    debugSubmitLine(lineIndex + 12, p[6], p[7], color, flags);
    debugSubmitLine(lineIndex + 14, p[7], p[4], color, flags);
    debugSubmitLine(lineIndex + 16, p[0], p[4], color, flags);
    debugSubmitLine(lineIndex + 18, p[1], p[5], color, flags);
    debugSubmitLine(lineIndex + 20, p[2], p[6], color, flags);
    debugSubmitLine(lineIndex + 22, p[3], p[7], color, flags);
}

void debugDrawLine(float3 p0, float3 p1, float3 color, uint flags = DEBUG_NONE_FLAG)
{
    uint lineIndex = debugAllocatePoints(2);
    if (lineIndex == DEBUG_INDEX_NONE)
        return;
    debugSubmitLine(lineIndex, p0, p1, color, flags);
}

void computeAABBPoints(float3 center, float3 extend, out float3 p[8])
{
    p[0] = center + extend * float3( 1,  1,  1);
    p[1] = center + extend * float3(-1,  1,  1);
    p[2] = center + extend * float3(-1, -1,  1);
    p[3] = center + extend * float3( 1, -1,  1);
    p[4] = center + extend * float3( 1,  1, -1);
    p[5] = center + extend * float3(-1,  1, -1);
    p[6] = center + extend * float3(-1, -1, -1);
    p[7] = center + extend * float3( 1, -1, -1);
}

void debugDrawAABB(float3 center, float3 extend, float3 color, uint flags = DEBUG_NONE_FLAG)
{
    uint lineIndex = debugAllocatePoints(24);
    if (lineIndex == DEBUG_INDEX_NONE)
        return;
    float3 p[8];
    computeAABBPoints(center, extend, p);
    debugSubmitCube(lineIndex, p, color, flags);
}

void debugDrawTransformedAABB(float3 center, float3 extend, float4x4 transMat, float3 color, uint flags = DEBUG_NONE_FLAG)
{
    uint lineIndex = debugAllocatePoints(24);
    if (lineIndex == DEBUG_INDEX_NONE)
        return;
    float3 p[8];
    computeAABBPoints(center, extend, p);
    [unroll]
    for (int i = 0; i < 8; i++)
    {
        float4 _p = mul(float4(p[i], 1.0f), transMat);
        p[i] = _p.xyz / _p.w;
    }
    debugSubmitCube(lineIndex, p, color, flags);
}
