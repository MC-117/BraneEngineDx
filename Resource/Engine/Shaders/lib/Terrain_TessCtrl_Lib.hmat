#include "CameraData_Def.hmat"
#include "TerrainMeshData_Def.hmat"

#define MAX_TERRAIN_TESS_FACTOR 16.0f

float calcEdgeTessellation(float2 s0, float2 s1, float triSize)
{
    float d = distance(s0, s1);
    float factor = clamp(d / triSize, 1, MAX_TERRAIN_TESS_FACTOR);
    float floorV = floor(factor);
    float ceilV = ceil(factor);
    return lerp(floorV, ceilV, smoothstep(0.5, 1, factor - floorV));
}

float2 eyeToScreen(float4 p)
{
    float4 r = mul(p, camData.promat);   // to clip space
    r.xy /= r.w;            // project
    r.xy = r.xy*0.5 + 0.5;  // to NDC
    r.xy *= camData.viewSize;    // to pixels
    return r.xy;
}

float calcEdgeTessellationSphere(float3 w0, float3 w1, float diameter, float triSize)
{
    float3 center = (w0 + w1) * 0.5;
    float4 view0 = mul(float4(center, 1.0), camData.vmat);
    float4 view1 = view0 + float4(diameter, 0, 0, 0);
    float2 s0 = eyeToScreen(view0);
    float2 s1 = eyeToScreen(view1);
    return calcEdgeTessellation(s0, s1, triSize);
}

DefaultTerrainPatchTess terrainTessConstFunc(InputPatch<DefaultTerrainVertexOut, 4> patch, uint patchID : SV_PrimitiveID)
{
    DefaultTerrainPatchTess constOut;
    float tileSize = distance(patch[0].WorldPos, patch[1].WorldPos);
    float sphereD = tileSize * 2.0f;
    constOut.svEdge[0] = calcEdgeTessellationSphere(patch[0].WorldPos, patch[1].WorldPos, sphereD, terrainTessTriSize);
    constOut.svEdge[1] = calcEdgeTessellationSphere(patch[1].WorldPos, patch[2].WorldPos, sphereD, terrainTessTriSize);
    constOut.svEdge[2] = calcEdgeTessellationSphere(patch[2].WorldPos, patch[3].WorldPos, sphereD, terrainTessTriSize);
    constOut.svEdge[3] = calcEdgeTessellationSphere(patch[3].WorldPos, patch[0].WorldPos, sphereD, terrainTessTriSize);

    constOut.svInside[0] = 0.5 * (constOut.svEdge[0] + constOut.svEdge[2]);
    constOut.svInside[1] = 0.5 * (constOut.svEdge[1] + constOut.svEdge[3]);

    return constOut;
}