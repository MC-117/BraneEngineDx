#include "Basic_FS_Lib.hmat"
#include "ScreenPass_Def.hmat"
#include "CameraData_Def.hmat"
#include "TransformData_Def.hmat"

#if defined(VSM_SHADER_FEATURE)
#include "VirtualShadowMap_Def.hmat"
#endif

#define REFLECTION_MASK 0x1
#define RECEIVE_DECAL_MASK 0x2

struct Surface
{
    float4 albedo;
    float3 WorldPos;
    float depth;
    float3 Normal;
    float roughness;
    float2 TexCoords;
    float metallic;
    float ao;
    float4 radiosity;
    float specular;
    uint matID;
    uint mask;
};

void outputSurface(in Surface surf, out float4 A, out float4 B, out float4 C, out int4 D, out float4 E)
{
    A = surf.albedo;
    B.xyz = encodeNormal(surf.Normal);
    B.a = 1;
    C.r = surf.roughness;
    C.g = surf.metallic;
    C.b = surf.specular;
    C.a = surf.ao;
    D.rgb = packUIntToUInt3(surf.matID);
    D.a = surf.mask;
    E = surf.radiosity;
}

#if defined(LIGHTING_SHADER_FEATURE)
#define SURFACE_MAIN DEFAULT_SCREEN_MAIN

Surface getSurface(in ScreenVertexOut fin)
{
    Surface surf;
    uint4 D = LOAD_TEX(gBufferD, int3(fin.UV * camData.viewSize, 0));
    uint matID = unpackUInt3ToUInt(D);
    if (matID != materialID)
        discard;
    float4 A = SAMPLE_TEX(gBufferA, fin.UV);
    float4 B = SAMPLE_TEX(gBufferB, fin.UV);
    float4 C = SAMPLE_TEX(gBufferC, fin.UV);
    float4 E = SAMPLE_TEX(gBufferE, fin.UV);
    float depth = SAMPLE_TEX(sceneDepthMap, fin.UV);
    surf.albedo = A;
    surf.depth = depth;
    surf.WorldPos = uvzPosToWorld(float3(fin.UV, depth));
    surf.TexCoords = fin.UV;
    surf.Normal = decodeNormal(B.xyz);
    surf.roughness = C.r;
    surf.metallic = C.g;
    surf.specular = C.b;
    surf.ao = C.a;
    surf.matID = matID;
    surf.mask = D.a;
    surf.radiosity = E;
    return surf;
}
#elif defined(DEPTH_SHADER_FEATURE) && defined(VSM_SHADER_FEATURE)
#define SURFACE_MAIN DEFAULT_VSM_MAIN

Surface getSurface(in DefaultVSMVertexOut fin)
{
    TransformData tansData = getTransformData(fin.InstanceID);
    Surface surf;
    surf.albedo = float4(1, 1, 1, 1);
    surf.WorldPos = float3(0, 0, 0);
    surf.TexCoords = fin.TexCoords;
    surf.depth = fin.clipPos.z;
    surf.Normal = float3(0, 0, 0);
    surf.roughness = 0.5f;
    surf.metallic = 0.5f;
    surf.specular = 1.0f;
    surf.ao = 1.0f;
    surf.matID = -1;
    surf.mask = canReceiveDecal(tansData) ? RECEIVE_DECAL_MASK : 0;
    surf.radiosity = float4(0, 0, 0, 0);
    return surf;
}
#else
#define SURFACE_MAIN DEFAULT_FS_MAIN

Surface getSurface(in DefaultVertexOut fin)
{
    TransformData tansData = getTransformData(fin.InstanceID);
    Surface surf;
    surf.albedo = float4(1, 1, 1, 1);
    surf.WorldPos = fin.WorldPos;
    surf.TexCoords = fin.TexCoords;
    surf.depth = fin.svPos.z;
    surf.roughness = 0.5f;
    surf.Normal = fin.Normal;
    surf.metallic = 0.5f;
    surf.specular = 1.0f;
    surf.ao = 1.0f;
    surf.matID = materialID;
    surf.mask = canReceiveDecal(tansData) ? RECEIVE_DECAL_MASK : 0;
    surf.radiosity = float4(0, 0, 0, 0);
    return surf;
}
#endif

#if defined(DEFERRED_SHADER_FEATURE)

#define FS_DEF_OUT_SURFACE FS_DEF_OUT_GBUFFER

#elif defined(DEPTH_SHADER_FEATURE)

#define FS_DEF_OUT_SURFACE

#else

#define FS_DEF_OUT_SURFACE FS_DEF_OUT_COLOR(FragColor, 0);
//FS_DEF_OUT_COLOR(ssnMask, 0);

#endif

#if defined(DEPTH_SHADER_FEATURE) && defined(VSM_SHADER_FEATURE)
void outputDepth(in DefaultVSMVertexOut fin, float alpha, float clipValue)
{
    clip(alpha - clipValue);
    writeVSMDepth(fin);
}
#else
void outputDepth(in DefaultVertexOut fin, float alpha, float clipValue)
{
    clip(alpha - clipValue);
}
#endif