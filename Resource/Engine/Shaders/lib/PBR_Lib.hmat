#include "Light_Def.hmat"
#include "Basic_FS_Lib.hmat"
#include "EnvLight_Def.hmat"

float D_GGX_TR(float3 N, float3 H, float a)
{
    float a2 = a*a;
    a2 *= a2;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return denom == 0 ? 0 : nom / denom;
}

float D_GGX_TR(float NdotH, float a)
{
    float a2 = a*a;
    a2 *= a2;
    float NdotH2 = NdotH*NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return denom == 0 ? 0 : nom / denom;
}

float4 ImportanceSampleGGX( float2 E, float a2 )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( (1 - E.y) / ( 1 + (a2 - 1) * E.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	
	float d = ( CosTheta * a2 - CosTheta ) * CosTheta + 1;
	float D = a2 / ( PI*d*d );
	float PDF = D * CosTheta;

	return float4( H, PDF );
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float k)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);

    return ggx1 * ggx2;
}

float3 ComputeF0(float3 albedo, float metallic)
{
    float3 F0 = Float3(0.04);
    return lerp(F0, albedo, metallic);
}

SplitLight PBR_Lo(float3 N, float3 V, float3 L, float3 radiance, float3 albedo, float metallic, float roughness)
{
    float3 H = normalize(V + L);
    
    float NDF = D_GGX_TR(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);
    float3 F0 = ComputeF0(albedo, metallic);
    float3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

    float3 kS = F;
    float3 kD = Float3(1.0) - kS;
    kD *= 1.0 - metallic;

    float NdotL = max(dot(N, L), 0.0);
    float NdotV = max(dot(N, V), 0.0);

    float3 nominator = NDF * G * F;
    float denominator = 4 * NdotV * NdotL + 0.001;
    float3 specular = nominator / denominator;

    SplitLight light;
    light.diffuse = kD * albedo * (1.0f / PI) * radiance * NdotL;
    light.specular = specular * radiance * NdotL;

    return light;
}

float3 PBR_Lo_DirectLight(in DirectLight directLight, float3 N, float3 V, float3 albedo, float metallic, float roughness)
{
    float3 L = normalize(directLight.direction);
    float3 radiance = getLightRadiance(directLight);
    return MargeSplitLight(PBR_Lo(N, V, L, radiance, albedo, metallic, roughness));
}

float3 PBR_Lo_PointLight(in PointLight pointLight, float3 worldPos, float3 N, float3 V, float3 albedo, float metallic, float roughness)
{
    float3 L = normalize(pointLight.pos - worldPos);
    float3 radiance = getLightRadiance(pointLight, worldPos);
    return MargeSplitLight(PBR_Lo(N, V, L, radiance, albedo, metallic, roughness));
}

float3 PBR_Ambient(float3 albedo, float ao)
{
    return AOMultiBounce(ao, albedo);
}

float3 PBR_Ambient(float3 worldPos, float3 worldNorm, float3 albedo, float ao)
{
    float3 envLight = getEnvLight(worldPos, worldNorm);
    return envLight * albedo * PBR_Ambient(albedo, ao);
}

float3 PBR_ColorCorrection(float3 color)
{
    // color = color / (color + Float3(1.0));
    // color = Float3(1.0) - exp(-color * 3);
    // color = pow(color, Float3(1.0/2.2));
    return color;
}