#include "../lib/Surface_Def.hmat"

#ifndef DEFERRED_SHADER_FEATURE
float getShadow(in DirectLight directLight, in Surface surf)
{
    #if defined(VSM_SHADER_FEATURE)
    float viewDepth = depthFromNDCToView(surf.depth);
    float rayLength = vsmInfo.screenRayLength * camData.promatInv[1][1] * viewDepth;
    float noise = 0;
    #if 0
    if (rayLength > 0) {
        rayLength = vsmScreenRayCast(sceneDepthMap, sceneDepthMapSampler, surf.WorldPos - camData.camPos, directLight.direction, rayLength, noise);
    }
    #endif
    return vsmSampleDirectShadowPCF(directLight.vsmID, surf.WorldPos,
        surf.Normal, rayLength, directLight.shadowBias.y);
    #else
    return ShadowCalculation(depthMap, depthMapSampler,
        surf.WorldPos, surf.Normal, directLight);
    #endif
}

float getShadow(in PointLight localLight, in Surface surf)
{
    #if defined(VSM_SHADER_FEATURE)
    float viewDepth = depthFromNDCToView(surf.depth);
    float rayLength = vsmInfo.screenRayLength * camData.promatInv[1][1] * viewDepth;
    float noise = 0;
    #if 0
    if (rayLength > 0) {
        rayLength = vsmScreenRayCast(sceneDepthMap, sceneDepthMapSampler, surf.WorldPos - camData.camPos, normalize(localLight.pos - surf.WorldPos), rayLength, noise);
    }
    #endif
    return vsmSampleLocalShadow(localLight.vsmID, surf.WorldPos,
        surf.Normal, rayLength);
    #else
    return 1;
    #endif
}
#endif