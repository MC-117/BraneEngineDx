#order 2500
#material
Scalar roughnessScale: 1
Scalar metallicScale: 1
Scalar waterOpacity: 0.6
Scalar waterOpacity: 0.6
Color baseColor: 1.0, 1.0, 1.0, 1.0
Color waterColor1: 0.007, 0.243, 0.273, 1.0
Color waterColor2: 0.1, 0.227, 0.31, 1.0
Texture waterDepthMap: black
Texture waterNormalMap: black
#vertex use default
#fragment
#condition default SSR
#condition vsm SSR
#include "lib/Light_Def.hmat"
#include "lib/CameraData_Def.hmat"

#include "lib/PBR_Lib.hmat"

#include "lib/TranslucentSSR_Lib.hmat"

DEF_MAT_BEGIN
uniform float4 baseColor;
uniform float4 waterColor1;
uniform float4 waterColor2;
uniform float roughnessScale;
uniform float metallicScale;
uniform float waterOpacity;
DEF_MAT_END

DEF_TEX2D_AUTO(sceneDepthMap);
DEF_TEX2D_AUTO(waterDepthMap);
DEF_TEX2D_AUTO(waterNormalMap);
#if !defined(VSM_SHADER_FEATURE)
DEF_TEX2D_AUTO(depthMap);
#endif

#include "lib/Surface_Def.hmat"

FS_DEF_OUT_BEGIN
FS_DEF_OUT_SURFACE
FS_DEF_OUT_END

#include "lib/Shadow_Lib.hmat"

float3 blendNormal(float3 N1, float3 N2)
{
    return normalize(N1 + N2);
}

//[earlydepthstencil]
FragmentOut SURFACE_MAIN
{
    FragmentOut fout;
    Surface surf = getSurface(fin);

    float2 screenUV = fin.svPos.xy / camData.viewSize;
    float3 camVec = -uvzDirToWorld(float3(screenUV, surf.depth));
    float3x3 TBN = cotangent(surf.Normal, surf.WorldPos, surf.TexCoords);

    float2 uvOffset1 = gameTime * float2(-0.001f, 0.001f);
    float2 uvOffset2 = gameTime * float2(0.003f, -0.001f);
    float2 uvOffset3 = gameTime * float2(0.001f, 0.005f);
    float2 uvOffset4 = gameTime * float2(0.002f, -0.008f);

    float2 uv1 = surf.WorldPos.xy * 0.000033f + uvOffset1;
    float2 uv2 = surf.WorldPos.xy * 0.000073f + uvOffset2;
    float2 uv3 = surf.WorldPos.xy * 0.00013f + uvOffset3;
    float2 uv4 = surf.WorldPos.xy * 0.0007 + uvOffset4;

    float depth1 = SAMPLE_TEX(waterDepthMap, uv1).r;
    float depth2 = SAMPLE_TEX(waterDepthMap, uv2).r;
    float depth3 = SAMPLE_TEX(waterDepthMap, uv3).r;
    float depth4 = SAMPLE_TEX(waterDepthMap, uv4).r;

    float height = depth1 + depth2;
    
    float3 camDirTan = normalize(mul(camVec, inverse(TBN)));

    const float heightRadio1 = 0.1f;
    const float heightRadio2 = 0.1f;
    const float heightRadio3 = 0.03f;
    const float heightRadio4 = 0.02f;

    const float refHeight = 0.5f;

    float bumpOffsetUV1 = camDirTan.xy * (height - refHeight) * heightRadio1 + uv1;
    float bumpOffsetUV2 = camDirTan.xy * (height - refHeight) * heightRadio2 + uv2;
    float bumpOffsetUV3 = camDirTan.xy * (height - refHeight) * heightRadio3 + uv3;
    float bumpOffsetUV4 = camDirTan.xy * (height - refHeight) * heightRadio4 + uv4;

    float3 tN1 = normalize(SAMPLE_TEX(waterNormalMap, bumpOffsetUV1).xyz * 2 - 1);
    float3 tN2 = normalize(SAMPLE_TEX(waterNormalMap, bumpOffsetUV2).xyz * 2 - 1);
    float3 tN3 = normalize(SAMPLE_TEX(waterNormalMap, bumpOffsetUV3).xyz * 2 - 1);
    float3 tN4 = normalize(SAMPLE_TEX(waterNormalMap, bumpOffsetUV4).xyz * 2 - 1);

    float3 tN = lerp(blendNormal(tN1, tN2), blendNormal(tN3, tN4), 0.5f);
    float3 tNAlpha = lerp((depth2 + depth3), (depth3 + depth4), 0.5f);
    tN = lerp(float3(0, 0, 1), tN, tNAlpha);
    surf.Normal = normalize(mul(tN, TBN));

    float opaqueViewDepth = depthFromNDCToView(SAMPLE_TEX(sceneDepthMap, screenUV));
    float viewDepth = depthFromNDCToView(surf.depth);
    float depthDiff = opaqueViewDepth - viewDepth;
    float depthFadeDistance1 = 200.0f;
    float depthFadeDistance2 = 10.0f;
    float depthFadeDistance3 = 1000.0f;
    float depthFade1 = saturate(depthDiff / depthFadeDistance1);
    float depthFade2 = saturate(depthDiff / depthFadeDistance2);
    float depthFade3 = saturate(depthDiff / depthFadeDistance3);

    float lerpAlpha = pow((depth1 + depth2) * (depth2 + depth3), 3.0f);
    float3 waterColor = lerp(0.0f, lerp(waterColor1.rgb, 1.0f, lerpAlpha), depthFade1);
    waterColor = lerp(waterColor, waterColor2.rgb, fresnelSchlick(dot(surf.Normal, camVec), 0.0f, 7.0f));
    surf.albedo = baseColor * float4(waterColor, 1.0f);

    surf.albedo.a *= lerp(0, waterOpacity, depthFade2) + depthFade3;

    surf.roughness = saturate(lerp(lerp(0.6f, 0.1f, depthFade1), 0.6f, lerpAlpha)) * roughnessScale;

    surf.metallic = saturate(lerp(0.2f, 1.0f, fresnelSchlick(dot(float3(0, 0, 1), camVec), 0.0f, 3.0f))) * metallicScale;

    surf.ao = 1;
    surf.mask |= REFLECTION_MASK;

    float3 V = normalize(camData.camPos - surf.WorldPos);
    // reflectance equation
    float3 Lo = Float3(0.0);

    if (directLight.intensity != 0) {
        float shadowFactor = getShadow(directLight, surf);
        Lo += PBR_Lo_DirectLight(directLight, surf.Normal, V, surf.albedo.xyz,
            surf.metallic, surf.roughness) * shadowFactor;
    }

    PointLight localLight;
    ITER_LOCAL_LIGHT(surf.WorldPos, localLight)
    {
        if (localLight.intensity != 0) {
            float shadowFactor = getShadow(localLight, surf);
            Lo += PBR_Lo_PointLight(localLight, surf.WorldPos, surf.Normal, V,
                surf.albedo.xyz, surf.metallic, surf.roughness) * shadowFactor;
        }
    }

    // SSR
    float3 ssrColor = getSSRColor(float3(screenUV, surf.depth), surf.Normal, surf.roughness);

    // Combination
    float3 ambient = PBR_Ambient(surf.WorldPos, surf.Normal, surf.albedo.xyz, surf.ao);
    float3 color = ambient + Lo + ssrColor;

    color = PBR_ColorCorrection(color);

    fout.FragColor = float4(color, surf.albedo.a);
    return fout;
}