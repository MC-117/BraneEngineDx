#material
#localsize 8 8 1
#compute
#condition debug
#include "../../lib/VirtualShadowMap_Def.hmat"
#if defined(DEBUG_SHADER_FEATURE)
#include "../../lib/DebugDraw_Def.hmat"
#endif

cbuffer GenPageFlagInfo
{
    int directLightCount;
    float pageDilationBorderSizeMain;
    float pageDilationBorderSizeLocal;
    int backFaceCull;
}

Texture2D sceneDepthMap;
DEF_TEX2D_AUTO(sceneNormalMap)

Buffer<uint> directLightVSMIDs;

bool isBackFaceCulled(float3 worldNorm, float3 lightDir)
{
    float sinAlpha = 0.1;
	return dot(worldNorm, lightDir) < -sinAlpha;
}

bool isBackFaceCulled(float3 worldNorm, float3 toLight, float radius)
{
	float distSqr = dot(toLight, toLight);
	float falloff = rcp(distSqr + 1);
	float invDist = rsqrt(distSqr);
	float sinAlphaSqr = saturate(radius * radius * falloff);
	float sinAlpha = sqrt(sinAlphaSqr);
	return dot(worldNorm, toLight * invDist) < -sinAlpha;
}

float calcPixelFootprintLocal(
	VSMProjData projData,
	float3 localPosLightSpace,
	float sceneDepth)
{
	// Compute footprint by projecting the approximate size of a camera pixel at the given depth to shadow space
	// NOTE: This doesn't take the screen XY position/FOV into account, which may or may not be desirable.

	// TODO: Roll into a uniform
	float2 radiusXY = 1.0f / (camData.viewSize * camData.promat._m00_m11);
	float radiusScreen = min(radiusXY.x, radiusXY.y);
	float depthScale = sceneDepth * camData.promat[2][3] + camData.promat[3][3];

	float radiusWorld = depthScale * radiusScreen;

	float4 shadowUVz = mul(float4(localPosLightSpace, 1.0f), projData.viewOriginToUV);

	float4 radiusClipH = mul(float4(radiusWorld, 0.0f, shadowUVz.w, 1.0f), projData.viewToClip);
	float radiusClip = abs(radiusClipH.x / radiusClipH.w);
	float footprint = radiusClip * float(2 * VSM_MAX_SIZE);

	return footprint;
}

uint getMipLevelLocal(uint vsmID, float3 localPosLightSpace, float sceneDepth)
{
	VSMProjData projData = getVSMProjData(vsmID);

	float footprint = calcPixelFootprintLocal(projData, localPosLightSpace, sceneDepth);

	float mipLevelFloat = log2(footprint) + projData.resolutionLodBias;
	uint mipLevel = uint(max(floor(mipLevelFloat), 0.0f));
	return min(mipLevel, (VSM_MAX_MIPS - 1U));
}

void markPageAddress(uint pageOffset, uint flags)
{
	outPageRequestFlags[pageOffset] = flags;
}

void markPage(uint vsmID
	, uint mipLevel
	, float3 worldPos
	, bool usePageDilation
	, float2 pageDilationOffset
	#if defined(DEBUG_SHADER_FEATURE)
	, uint2 pixel
	#endif
	)
{
	VSMProjData projData = getVSMProjData(vsmID);

	float4 shadowUVZ = mul(float4(worldPos - projData.worldCenter, 1.0f), projData.viewOriginToUV);
	shadowUVZ.xyz /= shadowUVZ.w;

	// Check overlap vs the shadow map space
	// NOTE: XY test not really needed anymore with the precise cone test in the caller, but we'll leave it for the moment
	bool inClip = all(shadowUVZ.xyz <= 1.0f) &&
		all(shadowUVZ.xyz >= 0.0f);

	if (!inClip)
		return;

	// Normal pages marked through pixel processing are not "coarse" and should include "detail geometry" - i.e., all geometry
	uint flags = VSM_ALLOCATED_FLAG | VSM_DETAIL_GEOMETRY_FLAG;

	uint maxPageAddress = calcLevelPages(mipLevel) - 1U;
	float2 pageAddressFloat = shadowUVZ.xy * calcLevelPages(mipLevel);
	uint2 pageAddress = clamp(uint2(pageAddressFloat), 0U, maxPageAddress);
	uint pageOffset = calcPageOffset(vsmID, mipLevel, pageAddress);
	markPageAddress(pageOffset, flags);
	#if defined(DEBUG_SHADER_FEATURE)
	outDebugBuffer[pixel] = float4(IntToColor(pageOffset), 1.0f);
	#endif

	if (usePageDilation)
	{
		uint2 pageAddress2 = clamp(uint2(pageAddressFloat + pageDilationOffset), 0U, maxPageAddress);
		uint pageOffset2 = calcPageOffset(vsmID, mipLevel, pageAddress2);
		if (pageOffset2 != pageOffset)
		{
			markPageAddress(pageOffset2, flags);
		}
		uint2 pageAddress3 = clamp(uint2(pageAddressFloat - pageDilationOffset), 0U, maxPageAddress);
		uint pageOffset3 = calcPageOffset(vsmID, mipLevel, pageAddress3);
		if (pageOffset3 != pageOffset)
		{
			markPageAddress(pageOffset3, flags);
		}
	}
}

void markPageClipmap(VSMProjData baseProjData
	, int clipmapStartId
	, bool usePageDilation
	, float2 pageDilationOffset
	, float3 worldPos
	#if defined(DEBUG_SHADER_FEATURE)
	, uint2 pixel
	#endif
	)
{
	const int clipmapLevel = calcClipmapLevel(baseProjData, worldPos);
	int clipmapIndex = max(0, clipmapLevel - baseProjData.clipmapLevel);
	if (clipmapIndex < baseProjData.clipmapCount)
		markPage(clipmapStartId + clipmapIndex, 0
		, worldPos
		, usePageDilation
		, pageDilationOffset
		#if defined(DEBUG_SHADER_FEATURE)
		, pixel
		#endif
		);
}

[numthreads(LOCAL_SIZE_X, LOCAL_SIZE_Y, LOCAL_SIZE_Z)]
void main(uint2 pixel : SV_DispatchThreadID, uint gidx : SV_GroupIndex)
{
	if (any(pixel >= camData.viewSize))
        return;
	float2 uv = pixel / camData.viewSize;
    float depth = sceneDepthMap[pixel];
	float screenDepth = depthFromNDCToView(depth);
    float3 worldPos = uvzPosToWorld(float3(uv, depth));
    float3 worldNorm = normalize(decodeNormal(sceneNormalMap[pixel]));

    const float2 pageDilationDither = float2(
		(gidx & 1) ? 1.0f : -1.0f,
		(gidx & 2) ? 1.0f : -1.0f);
    
    const bool usePageDilation = pageDilationBorderSizeMain > 0.0f;
	const float2 pageDilationOffset = pageDilationBorderSizeMain * pageDilationDither;

	#if defined(DEBUG_SHADER_FEATURE)
	outDebugBuffer[pixel] = 0;
	#endif

    for (int i = 0; i < directLightCount; i++) {
        uint vsmID = directLightVSMIDs[i];
        VSMProjData projData = getVSMProjData(vsmID);
        bool backFaceCulled = false;
        if (backFaceCull && isBackFaceCulled(worldNorm, projData.worldDirection))
            backFaceCulled = true;
        if (!backFaceCulled)
            markPageClipmap(projData
			, vsmID
			, usePageDilation
			, pageDilationOffset
			, worldPos
			#if defined(DEBUG_SHADER_FEATURE)
			, pixel
			#endif
			);
    }

	#if defined(DEBUG_SHADER_FEATURE)
	if (all(pixel == 0)) {
		for (int probeIndex = 0; probeIndex < getProbeCount(); probeIndex++) {
			if (getProbeType(probeIndex) == PROBE_TYPE_LIGHT) {
				PointLight localLight = getPointLight(probeIndex);
				for (int i = 0; i < 6; i++) {
					uint vsmID = localLight.vsmID + i;
					VSMProjData projData = getVSMProjData(vsmID);
					debugDrawTranslatedFrustum(inverse(projData.viewOriginToClip), localLight.pos,
						float3(0, 1, 0));
				}
			}
		}
	}
	#endif

    PointLight localLight;
    ITER_LOCAL_LIGHT(worldPos, localLight)
    {
        if (localLight.intensity != 0 && localLight.vsmID != NONE_VSMID) {
			float3 localPosLightSpace = worldPos - localLight.pos;
			float3 toLight = normalize(localPosLightSpace);
			float distSq = dot(localPosLightSpace, localPosLightSpace);
			if (distSq > (localLight.radius * localLight.radius))
				continue;
			if (localLight.type == LIGHT_TYPE_SPOT && dot(toLight, localLight.direction) < localLight.cosConeAngle)
			 	continue;
			if (backFaceCull && isBackFaceCulled(worldNorm, -toLight))
				continue;
			for (int i = 0; i < 6; i++) {
				uint vsmID = localLight.vsmID + i;
				uint mipLevel = getMipLevelLocal(vsmID, localPosLightSpace, screenDepth);
				markPage(vsmID
				, mipLevel
				, worldPos
				, usePageDilation
				, pageDilationOffset
				#if defined(DEBUG_SHADER_FEATURE)
				, pixel
				#endif
				);
			}
        }
    }
}