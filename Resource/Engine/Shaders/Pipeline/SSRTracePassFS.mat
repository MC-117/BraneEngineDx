#material
#vertex use postprocess
#fragment postprocess
#include "../lib/Light_Def.hmat"
#include "../lib/ReflectionProbe_def.hmat"
#include "../lib/Surface_def.hmat"
#include "../lib/SSR_Lib.hmat"

DEF_TEX2D(gBufferB, 0);
DEF_TEX2D(gBufferC, 1);
DEF_TEX2D(gBufferD, 2);
DEF_TEX2D_UINT(gBufferE, 3);
DEF_TEX2D(hiZMap, 4);

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(hitData, 0);
FS_DEF_OUT_COLOR(hitColor, 1);
FS_DEF_OUT_END

FragmentOut DEFAULT_SCREEN_MAIN
{
	FragmentOut fout;
    float2 UV = fin.UV;
    float4 hitData = 0.0f.rrrr;
    float4 hitColor = 0.0f.rrrr;
    uint mask = LOAD_TEX(gBufferE, int3(UV * camData.viewSize, 0)).a;
    if (mask & REFLECTION_MASK) {
        float depth = SAMPLE_TEX_LOD(gBufferB, UV, 0);

        if ((1.0f - depth) > 1 / camData.zFar) {
            float4 C = SAMPLE_TEX_LOD(gBufferC, UV, 0);
            float4 D = SAMPLE_TEX_LOD(gBufferD, UV, 0);
            float3 N = normalize(worldDirToView(decodeNormal(C.xyz)));
            float roughness = D.r;

            float3 startUVZ = float3(UV, depth);
            float3 startView = uvzPosToView(startUVZ);
            float3 V = normalize(startView);

            float3x3 tangentBasis = getTangentBasis(N);
            float4 HPDF = ImportanceSampleGGX(float2(0, 0), roughness * roughness);
            float3 H = normalize(mul(HPDF.xyz, tangentBasis));
            float3 L = normalize(reflect(V, H));
            float3 hitUVZ;
            float fadeFactor = 0;
#if 1
            float3 endView = startView + L;
            float3 endUVZ = viewPosToUVZ(endView);
            float3 dirUVZ = normalize(endUVZ - startUVZ);
            if (rayTraceHiZ_UVZ(hiZMap, hiZMapSampler,
                hiZStartLevel, hiZStopLevel, hiZMaxStep, hiZUVScale,
                startUVZ, dirUVZ, hitUVZ, fadeFactor))
#else
            if (rayTraceHiZ_View(hiZMap, hiZMapSampler,
                hiZStartLevel, hiZStopLevel, hiZMaxStep, hiZUVScale,
                startView, L, hitUVZ))
#endif
            {
                fadeFactor *= GetScreenFadeBord(uvToClip(hitUVZ.xy));
            }
            hitData = float4(hitUVZ, HPDF.a);
            float3 worldPos = viewPosToWorld(startView);
            float3 worldL = mul(float4(L, 0), camData.vmatInv).xyz;
            float4 refColor = getReflectionColor(worldL, worldPos, getReflectionMip(roughness));
            hitColor = float4(refColor.rgb, fadeFactor);
        }
    }

    fout.hitData = hitData;
    fout.hitColor = hitColor;

    return fout;
}