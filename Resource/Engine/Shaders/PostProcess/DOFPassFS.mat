#material
Scalar blurRadius: 4
Scalar blurIter: 3
Scalar focusDistance: 100
Texture screenMap
Texture depthMap
#vertex use postprocess
#fragment postprocess
#include "../lib/Basic_FS_Lib.hmat"
#include "../lib/ScreenPass_Def.hmat"

#include "../lib/Const_Def.hmat"
#include "../lib/CameraData_Def.hmat"

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

DEF_MAT_BEGIN
uniform float blurRadius;
uniform float blurIter;
uniform float focusDistance;
DEF_MAT_END

DEF_TEX2D(screenMap, 1);
DEF_TEX2D(depthMap, 2);

static const uint dofKernelN = 57;

static const float2 dofKernel[57] = {
    float2(0.000000, 0.000000),

    float2(0.461940, 0.191342), float2(0.191342, 0.461940), float2(-0.191342, 0.461940), float2(-0.461940, 0.191342),
    float2(-0.461940, -0.191342), float2(-0.191342, -0.461940), float2(0.191342, -0.461940), float2(0.461940, -0.191342),

    float2(1.000000, 0.000000), float2(0.923880, 0.382683), float2(0.707107, 0.707107), float2(0.382683, 0.923880),
    float2(0.000000, 1.000000), float2(-0.382683, 0.923880), float2(-0.707107, 0.707107), float2(-0.923880, 0.382683),
    float2(-1.000000, 0.000000), float2(-0.923880, -0.382683), float2(-0.707107, -0.707107), float2(-0.382683, -0.923880),
    float2(-0.000000, -1.000000), float2(0.382683, -0.923880), float2(0.707107, -0.707107), float2(0.923880, -0.382683),

    float2(1.492777, 0.147026), float2(1.435411, 0.435427), float2(1.322882, 0.707095), float2(1.159516, 0.951590),
    float2(0.951590, 1.159516), float2(0.707095, 1.322882), float2(0.435427, 1.435411), float2(0.147026, 1.492777),
    float2(-0.147026, 1.492777), float2(-0.435427, 1.435411), float2(-0.707095, 1.322882), float2(-0.951590, 1.159516),
    float2(-1.159516, 0.951590), float2(-1.322882, 0.707095), float2(-1.435411, 0.435427), float2(-1.492777, 0.147026),
    float2(-1.492777, -0.147026), float2(-1.435411, -0.435427), float2(-1.322882, -0.707095), float2(-1.159516, -0.951590),
    float2(-0.951590, -1.159516), float2(-0.707095, -1.322882), float2(-0.435427, -1.435411), float2(-0.147026, -1.492777),
    float2(0.147026, -1.492777), float2(0.435427, -1.435411), float2(0.707095, -1.322882), float2(0.951590, -1.159516),
    float2(1.159516, -0.951590), float2(1.322882, -0.707095), float2(1.435411, -0.435427), float2(1.492777, -0.147026)
};

float getViewDepth(float2 UV)
{
    return depthFromNDCToView(SAMPLE_TEX_LOD(depthMap, UV, 0));
}

float getDOFFactor(float viewDepth)
{
    return clamp(1 - (focusDistance / viewDepth), -2, 1);
}

FragmentOut DEFAULT_SCREEN_MAIN
{
	FragmentOut fout;
	if (passID == 0) {
        float weight = 0;
        float3 color = Float3(0);
        int n = blurIter < 1 ? 1 : (blurIter < 2 ? 9 : (blurIter < 3 ? 25 : 57));
        float centerDepth = getViewDepth(fin.UV);
        float centerFactor = getDOFFactor(centerDepth);
        if (centerFactor != 0) {
            for (int i = 0; i < n; i++) {
                float2 off = dofKernel[i] * blurRadius;
                off /= camData.viewSize;
                float2 uv = fin.UV + off * centerFactor;
                uv = clamp(uv, Float2(0), Float2(1));
                float depth = getViewDepth(uv);
                if ((centerFactor > 0 ^ depth > focusDistance))
                    continue;
                float3 sampleColor = SAMPLE_TEX_LOD(screenMap, uv, 0).rgb;
                float w = length(sampleColor) + 0.1;
                weight += w;
                color += sampleColor * w;
            }
        }
        if (weight == 0)
            fout.FragColor.rgb = SAMPLE_TEX_LOD(screenMap, fin.UV, 0).rgb;
        else
            fout.FragColor.rgb = color / weight;//((1 + n) * n);
        fout.FragColor.a = 1.0;
    }
    return fout;
}