#material
Scalar width: 1280
Scalar height: 720
Scalar gamma: 0.25
Scalar exposure: 3
Scalar bloomLightIntensity: 5
Scalar bloomDarkIntensity: 2.5
Scalar bloomThreshold: 0.7
Count bloomLevel: 5
Count bloomIter: 6
#vertex use postprocess
#fragment postprocess
#include "../lib/Basic_FS_Lib.hmat"
#include "../lib/ScreenPass_Def.hmat"

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

DEF_MAT_BEGIN
uniform int bloomLevel;
uniform int bloomIter;
uniform float width;
uniform float height;
uniform float gamma;
uniform float exposure;
uniform float bloomLightIntensity;
uniform float bloomDarkIntensity;
uniform float bloomThreshold;
DEF_MAT_END

DEF_TEX2D(sampleMap, 0);

float GaussWeight2D(float x, float y, float sigma)
{
    float E  = 2.71828182846;
    float sigma_2 = pow(sigma, 2);
    float a = -(x*x + y*y) / (2.0 * sigma_2);
    return pow(E, a) / (2.0 * PI * sigma_2);
}

FragmentOut DEFAULT_SCREEN_MAIN
{
	FragmentOut fout;
	float4 pixel = Float4(0.0);
	float sigma = 1.0f;
    if (passID == 0) {
        pixel = SAMPLE_TEX_LOD(sampleMap, fin.UV, 0);
		float totalLuminance = luminance(pixel.rgb);
		float bloomLuminance = totalLuminance - bloomThreshold;
		float bloomIntensity = saturate(bloomLuminance * 0.5f);
        fout.FragColor = float4(bloomIntensity * pixel.rgb, 1);
    }
	else if (passID == 1) {
		float2 pixelUV = 1.0f / float2(width, height) * (1 << passNum);
		float totalWeight = 0.0f;
		for (int dx = -bloomIter; dx <= bloomIter; dx++) {
			for (int dy = -bloomIter; dy <= bloomIter; dy++) {
				float4 color = SAMPLE_TEX_LOD(sampleMap, fin.UV + pixelUV * float2(dx, dy), 0);
				float gaussWeight = GaussWeight2D(dx, dy, sigma);
				float lumaWeight = 1 / (1 + luminance(color.rgb));
				float weight = gaussWeight * lumaWeight;
				pixel += color * weight;
				totalWeight += weight;
			}
		}
        fout.FragColor = pixel / totalWeight;
	}
	else if (passID == 2) {
		float2 pixelUV = 1.0f / float2(width, height) * (1 << passNum);
		float totalWeight = 0.0f;
		for (int dx = -bloomIter; dx <= bloomIter; dx++) {
			for (int dy = -bloomIter; dy <= bloomIter; dy++) {
				float weight = GaussWeight2D(dx, dy, sigma);
				pixel += SAMPLE_TEX_LOD(sampleMap, fin.UV + pixelUV * float2(dx, dy), 0) * weight;
				totalWeight += weight;
			}
		}
        fout.FragColor = pixel / totalWeight;
	}
	else if (passID == 3) {
		float2 pixelUV = 1.0f / float2(width, height) * (1 << passNum);
		for (int dx = -1; dx <= 1; dx++) {
			for (int dy = -1; dy <= 1; dy++) {
				float weight = ((2 - abs(dx) - abs(dy)) << 1) * 0.0625;
				pixel += SAMPLE_TEX_LOD(sampleMap, fin.UV + pixelUV * float2(dx, dy), 0) * weight;
			}
		}
        fout.FragColor = pixel;
	}
	return fout;
}