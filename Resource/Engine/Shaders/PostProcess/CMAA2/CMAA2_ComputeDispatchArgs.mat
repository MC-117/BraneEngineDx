#material
#localsize 1 1 1
#compute
#include "CMAA2_Lib.hmat"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Compute shaders used to generate DispatchIndirec() control buffer
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Compute dispatch arguments for the DispatchIndirect() that calls ProcessCandidatesCS and DeferredColorApply2x2CS
[numthreads( 1, 1, 1 )]
void ComputeDispatchArgsCS( uint3 groupID : SV_GroupID )
{
    // activated once on Dispatch( 2, 1, 1 )
    if( groupID.x == 1 )
    {
        // get current count
        uint shapeCandidateCount = g_workingControlBuffer.Load(4*4);

        // check for overflow!
        uint appendBufferMaxCount; uint appendBufferStride;
        g_workingShapeCandidates.GetDimensions( appendBufferMaxCount, appendBufferStride );
        shapeCandidateCount = min( shapeCandidateCount, appendBufferMaxCount );

        // write dispatch indirect arguments for ProcessCandidatesCS
        g_workingExecuteIndirectBuffer.Store( 4*0, ( shapeCandidateCount + CMAA2_PROCESS_CANDIDATES_NUM_THREADS - 1 ) / CMAA2_PROCESS_CANDIDATES_NUM_THREADS );
        g_workingExecuteIndirectBuffer.Store( 4*1, 1 );                                                                                                       
        g_workingExecuteIndirectBuffer.Store( 4*2, 1 );                                                                                                       

        // write actual number of items to process in ProcessCandidatesCS
        g_workingControlBuffer.Store( 4*3, shapeCandidateCount );                                                                                     
    } 
    // activated once on Dispatch( 1, 2, 1 )
    else if( groupID.y == 1 )
    {
        // get current count
        uint blendLocationCount = g_workingControlBuffer.Load(4*8);

        // check for overflow!
        { 
            uint appendBufferMaxCount; uint appendBufferStride;
            g_workingDeferredBlendLocationList.GetDimensions( appendBufferMaxCount, appendBufferStride );
            blendLocationCount = min( blendLocationCount, appendBufferMaxCount );
        }

        // write dispatch indirect arguments for DeferredColorApply2x2CS
#if CMAA2_DEFERRED_APPLY_THREADGROUP_SWAP
        g_workingExecuteIndirectBuffer.Store( 4*0, 1 );
        g_workingExecuteIndirectBuffer.Store( 4*1, ( blendLocationCount + CMAA2_DEFERRED_APPLY_NUM_THREADS - 1 ) / CMAA2_DEFERRED_APPLY_NUM_THREADS );
#else
        g_workingExecuteIndirectBuffer.Store( 4*0, ( blendLocationCount + CMAA2_DEFERRED_APPLY_NUM_THREADS - 1 ) / CMAA2_DEFERRED_APPLY_NUM_THREADS );
        g_workingExecuteIndirectBuffer.Store( 4*1, 1 );
#endif
        g_workingExecuteIndirectBuffer.Store( 4*2, 1 );

        // write actual number of items to process in DeferredColorApply2x2CS
        g_workingControlBuffer.Store( 4*3, blendLocationCount);

        // clear counters for next frame
        g_workingControlBuffer.Store( 4*4 , 0 );
        g_workingControlBuffer.Store( 4*8 , 0 );
        g_workingControlBuffer.Store( 4*12, 0 );
    }
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////