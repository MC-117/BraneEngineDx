#order 1000
#material
Color baseColor: 255, 255, 255, 255
Color chessColor: 255, 255, 255, 255
Color lineColor: 255, 255, 255, 255
Color gridOffset: 0, 0, 0, 255
Scalar gridSpace: 10
Scalar patternX: 100
Scalar patternY: 100
Texture colorMap: white
Scalar metallic: 0.5
Texture metallicMap: white
Scalar roughness: 0.5
Texture roughnessMap: white
Scalar ao: 1.0
Texture aoMap: white
Scalar normalScale: 1
Texture normalMap: black
Scalar emission: 0
Texture emissionMap: white
Texture depthMap: white
#vertex use default
#fragment
#include "lib/Light_Def.hmat"
#include "lib/CameraData_Def.hmat"
#include "lib/PBR_Lib.hmat"
#include "lib/Basic_FS_Lib.hmat"

DEF_MAT_BEGIN
uniform float4 baseColor;
uniform float4 chessColor;
uniform float4 lineColor;
uniform float4 pointColor;
uniform float4 gridOffset;
uniform float gridSpace;
uniform float patternX;
uniform float patternY;
uniform float metallic;
uniform float roughness;
uniform float ao;
uniform float normalScale;
uniform float emission;
DEF_MAT_END

DEF_TEX2D(colorMap, 0);
DEF_TEX2D(metallicMap, 1);
DEF_TEX2D(roughnessMap, 2);
DEF_TEX2D(aoMap, 3);
DEF_TEX2D(normalMap, 4);
DEF_TEX2D(emissionMap, 5);
DEF_TEX2D(depthMap, 6);

FS_DEF_OUT_BEGIN
FS_DEF_OUT_COLOR(FragColor, 0);
FS_DEF_OUT_END

float2 getUVScale(float3 scale, float3 N)
{
    float3 a = round(normalize(pow(abs(N), Float3(8.0))));
    float2 yz = float2(scale.y, scale.z);
    float2 xz = float2(scale.x, scale.z);
    float2 xy = float2(scale.x, scale.y);
    return lerp(lerp(yz, xy, a.z), xz, a.y);
}

float4 getUVs(float2 UV)
{
    float4 re;
    UV += gridOffset.xy;
    re.xy = UV * 50.0 / (patternX + patternY);
    re.zw = UV * 100.0 / gridSpace;
    return re;
}

float4 getGirdInfo(in Texture2D tex, in SamplerState texSampler, float4 UVs)
{
    float4 info;
    float4 bc = SAMPLE_TEX(tex, UVs.xy);
    float4 sc = SAMPLE_TEX(tex, UVs.zw);
    info.r = bc.b;
    info.g = bc.r + sc.g;
    info.b = bc.r;
    info.a = bc.b * bc.a;
    return info;
}

FragmentOut DEFAULT_FS_MAIN
{
    FragmentOut fout;
    float3x3 TBN = cotangent(fin.Normal, fin.WorldPos, fin.TexCoords);
    float3 tN = normalize(SAMPLE_TEX(normalMap, fin.TexCoords).xyz * 2 - 1) * normalScale;
    float3 N = normalize(mul(tN, TBN));
    float3 V = normalize(camData.camPos - fin.WorldPos);

    float4 info = getGirdInfo(colorMap, colorMapSampler,
        getUVs(fin.TexCoords * getUVScale(fin.WorldScale, fin.LocalNormal)));
    float4 colorMul = baseColor;
    colorMul = lerp(colorMul, chessColor, info.r);
    colorMul = lerp(colorMul, lineColor, info.g);

    float3 albedo = colorMul.rgb;
    float alpha = colorMul.a;
    float _roughness = roughness * SAMPLE_TEX(roughnessMap, fin.TexCoords).r;
    float _metallic = metallic * SAMPLE_TEX(metallicMap, fin.TexCoords).r;
    float _ao = ao * SAMPLE_TEX(aoMap, fin.TexCoords).r;

    float3 F0 = Float3(0.04); 
    F0 = lerp(F0, albedo, _metallic);

    // reflectance equation
    float3 Lo = Float3(0.0);

    if (directLight.intensity != 0) {
        Lo += PBR_Lo_DirectLight(directLight, N, V, albedo, _metallic, _roughness) *
            ShadowCalculation(depthMap, depthMapSampler, fin.WorldPos, fin.Normal, directLight);
    }

    PointLight localLight;
    ITER_LOCAL_LIGHT(fin.WorldPos, localLight)
    {
        if (localLight.intensity != 0) {
            Lo += PBR_Lo_PointLight(localLight, fin.WorldPos, N, V, albedo, _metallic, _roughness);
        }
    }

    // Combination
    float3 ambient = PBR_Ambient(albedo, _ao);
    float3 emissionColor = SAMPLE_TEX(emissionMap, fin.TexCoords).rgb;
    float3 color = ambient + Lo;

    color = PBR_ColorCorrection(color) + (emission * baseColor).rgb * emissionColor;

    fout.FragColor = float4(color, alpha);
    return fout;
}